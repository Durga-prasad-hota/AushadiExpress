{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Pharma-Empire OS\n\n## Overview\n\nPharma-Empire OS is an offline-first pharmacy Point of Sale (POS) and compliance platform built as a full-stack web application. The system is designed to function seamlessly in offline environments with background synchronization capabilities, making it ideal for pharmacy operations with unreliable internet connectivity. The application features a React frontend with TypeScript, an Express.js backend, and uses PostgreSQL with Drizzle ORM for data persistence.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript and Vite for development tooling\n- **UI Framework**: Shadcn/ui components built on Radix UI primitives with Tailwind CSS for styling\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack React Query for server state management and caching\n- **Mobile-First Design**: Responsive design with bottom navigation optimized for mobile/tablet usage\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js web framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API endpoints for products, stock, sales, and sync operations\n- **Error Handling**: Centralized error handling middleware with structured error responses\n- **Development**: Hot reload with Vite integration for seamless development experience\n\n### Data Storage Solutions\n- **Primary Database**: PostgreSQL with connection via Neon serverless\n- **ORM**: Drizzle ORM for type-safe database operations and migrations\n- **Local Storage**: Browser localStorage for offline data persistence\n- **Offline-First Design**: Outbox pattern implementation for handling offline operations\n- **Schema**: Structured tables for users, products, stock, sales, sync outbox, purchase orders, and receiving items\n\n### Authentication and Authorization\n- **Session Management**: Express sessions with PostgreSQL session store\n- **User Management**: User authentication system with username/password\n- **Data Isolation**: User-scoped data access patterns\n\n### External Dependencies\n\n- **Database**: Neon PostgreSQL serverless database\n- **UI Components**: Radix UI primitives for accessible component foundation\n- **Styling**: Tailwind CSS with custom design system variables\n- **Development Tools**: Replit-specific tooling and error handling\n- **Build System**: Vite for frontend bundling and esbuild for backend compilation\n- **Type Safety**: Zod for runtime validation and schema inference\n\n### Offline-First Sync Architecture\n- **Sync Worker**: Background synchronization service that monitors network status\n- **Outbox Pattern**: Local queue for operations performed while offline\n- **Conflict Resolution**: Timestamp-based conflict resolution for data synchronization\n- **Network Detection**: Automatic sync resumption when connectivity is restored\n\n### AI Integration (Stubbed)\n- **Assistant Interface**: Prepared hooks for future on-device LLM integration\n- **Voice Recognition**: Stubbed voice input capabilities for future implementation\n- **OCR Integration**: Placeholder for optical character recognition features\n- **Remote AI**: Configurable OpenAI API integration for remote AI assistance\n\nThe application follows a monorepo structure with clear separation between client, server, and shared code, enabling efficient development and deployment while maintaining type safety across the entire stack.\n\n## Recent Changes\n\n### September 05, 2025 - AushadiExpress Rebrand & UX Improvements\n\n**Payment Sheet Implementation:**\n- Added CollectPaymentSheet component with Cash/UPI/Card payment options\n- Integrated cash-only mode toggle in settings (localStorage persistence)\n- Fixed outbox persistence to ensure sales are queued for offline sync\n- UPI Lite payment stub for offline transactions with analytics tracking\n\n**Receiving Workflow Beta:**\n- Added purchaseOrders and receivingItems tables to database schema\n- Created receiving workflow page with invoice scan and PO entry modes\n- Implemented receiving beta toggle in settings with localStorage persistence  \n- Added conditional receiving FAB that appears only when beta is enabled\n- OCR invoice scanning placeholder for future implementation\n\n**Navigation & UX Improvements:**\n- Fixed swipe-right gesture on home screen to navigate directly to POS\n- Added capability tier badge to header showing VALUE/MAINSTREAM/PREMIUM\n- Responsive bill drawer with max-width constraints for mobile devices\n- Enhanced settings page with toggle switches for payment and receiving options\n\n**Technical Enhancements:**\n- Camera permission handling with fallback modals for graceful degradation\n- Device capability detection service for performance optimization\n- FAB tooltip system with first-launch persistence using localStorage\n- Improved error handling and TypeScript schema definitions\n\n### September 06, 2025 - Camera Service & Scanner Flow Improvements\n\n**Camera Permission Service Enhancements:**\n- Updated ensureCamera API with backward compatibility for both onGranted/onDenied and onOK/onFail callback patterns\n- Added comprehensive error handling with user-friendly messages for different camera error types (NotFoundError, NotReadableError, OverconstrainedError, etc.)\n- Improved permission status management with better localStorage structure and legacy compatibility\n- Enhanced permission state tracking with timestamps and automatic cleanup of stale permissions\n\n**Barcode Scanner Flow Improvements:**\n- Fixed scanner fallback flow to show file input option instead of immediately navigating away on camera failure\n- Implemented proper barcode result passing from BarcodeScannerScreen to POS using URL query parameters\n- Added seamless handoff between scanner and POS with automatic URL cleanup and product addition\n- Enhanced user feedback with contextual toast messages for different scanner states\n\n**User Experience Improvements:**\n- Better error messages guide users through camera permission issues with specific instructions\n- File input fallback ensures scanning functionality works even without camera access\n- Improved toast notifications with distinct styling for errors vs success messages\n- Scanner remains functional and provides alternatives when camera is unavailable","size_bytes":6318},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { registerAIRoutes } from \"./ai-routes\";\nimport intelligentAgentRoutes from \"./routes/intelligent-agent\";\nimport apiKeyRoutes from \"./routes/api-key-management\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json({ limit: '50mb' }));\napp.use(express.urlencoded({ limit: '50mb', extended: true }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n  registerAIRoutes(app);\n  \n  // Register intelligent agent routes\n  app.use('/api', intelligentAgentRoutes);\n  \n  // Register API key management routes\n  app.use('/api', apiKeyRoutes);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2452},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertProductSchema, insertStockSchema, insertSaleSchema, insertCaptureSchema, insertDocumentSchema, insertUserLearningPatternSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport aiRoutes from \"./routes/ai\";\nimport multer from 'multer';\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Enhanced comprehensive logging middleware for debug visibility in Replit console\n  app.use((req, res, next) => {\n    const timestamp = new Date().toISOString();\n    console.log(`\\n=== [${timestamp}] ${req.method} ${req.path} ===`);\n    \n    if (req.query && Object.keys(req.query).length > 0) {\n      console.log(`[QUERY PARAMS]`, JSON.stringify(req.query, null, 2));\n    }\n    \n    if (req.body && Object.keys(req.body).length > 0) {\n      console.log(`[REQUEST BODY]`, JSON.stringify(req.body, null, 2));\n    }\n    \n    if (req.headers.authorization) {\n      console.log(`[AUTH]`, 'Bearer token present');\n    }\n    \n    // Log session info if available  \n    if ((req as any).session?.userId) {\n      console.log(`[SESSION]`, { userId: (req as any).session.userId, userRole: (req as any).session.userRole });\n    }\n    \n    // Intercept response to log status and response body\n    const originalSend = res.send;\n    res.send = function(body) {\n      console.log(`[RESPONSE ${res.statusCode}]`, typeof body === 'string' ? body.substring(0, 200) + (body.length > 200 ? '...' : '') : body);\n      console.log(`=== END ${req.method} ${req.path} ===\\n`);\n      return originalSend.call(this, body);\n    };\n    \n    next();\n  });\n\n  // AI routes\n  app.use(\"/api/ai\", aiRoutes);\n\n  // Document storage setup\n  const documentUpload = multer({ \n    storage: multer.memoryStorage(),\n    limits: { fileSize: 10 * 1024 * 1024 } // 10MB limit\n  });\n\n  // Document storage routes\n  app.post(\"/api/documents\", documentUpload.single('image'), async (req: any, res) => {\n    try {\n      console.log('[SERVER-DEBUG] Document storage request received', {\n        hasFile: !!req.file,\n        fileName: req.file?.originalname,\n        fileSize: req.file?.size,\n        fileMimeType: req.file?.mimetype,\n        bodyKeys: Object.keys(req.body || {}),\n        contentType: req.headers['content-type'],\n        userAgent: req.headers['user-agent']?.substring(0, 100),\n        origin: req.headers.origin\n      });\n\n      if (!req.file) {\n        console.error('[SERVER-DEBUG] No file uploaded - FormData issue');\n        return res.status(400).json({ \n          error: 'No image file provided',\n          details: 'The image field is missing from FormData. Check client upload.'\n        });\n      }\n\n      const { confirmedType, extractedData, userRole, deviceType } = req.body;\n      \n      console.log('[SERVER-DEBUG] Request body parsed', {\n        confirmedType,\n        userRole,\n        deviceType,\n        hasExtractedData: !!extractedData,\n        extractedDataLength: extractedData?.length\n      });\n      \n      if (!confirmedType) {\n        console.error('[SERVER-DEBUG] Missing confirmedType field');\n        return res.status(400).json({ \n          error: 'Document type confirmation required',\n          details: 'The confirmedType field is missing from request'\n        });\n      }\n      \n      let parsedExtractedData;\n      try {\n        parsedExtractedData = JSON.parse(extractedData || '{}');\n        console.log('[SERVER-DEBUG] ExtractedData parsed successfully', {\n          keys: Object.keys(parsedExtractedData),\n          hasLineItems: !!parsedExtractedData.extractedData?.lineItems,\n          itemCount: parsedExtractedData.extractedData?.lineItems?.length || 0\n        });\n      } catch (parseError) {\n        console.error('[SERVER-DEBUG] Failed to parse extractedData:', parseError);\n        return res.status(400).json({ \n          error: 'Invalid extracted data format',\n          details: parseError instanceof Error ? parseError.message : 'JSON parse failed'\n        });\n      }\n      \n      // Role metadata for compliance and audit requirements\n      const roleMetadata = {\n        userRole: userRole || 'retailer',\n        timestamp: new Date().toISOString(),\n        complianceFlags: {\n          auditRequired: userRole === 'wholesaler',\n          regulatoryTracking: true,\n          businessClassification: userRole || 'retailer'\n        }\n      };\n\n      // Generate business intelligence and compliance metadata\n      const businessIntelligence = generateBusinessIntelligence(parsedExtractedData);\n      const complianceMetadata = generateComplianceMetadata(parsedExtractedData, req.file.originalname);\n      \n      // Store document with full-fidelity compliance data + business intelligence\n      const documentData = {\n        enterpriseId: 'default',\n        userId: 'user-1', // TODO: Get from session\n        fileName: req.file.originalname,\n        docType: parsedExtractedData.documentType || 'other',\n        confirmedType: confirmedType,\n        confidence: parsedExtractedData.confidence || 0.5,\n        rawText: parsedExtractedData.rawText || '',\n        modelSummary: parsedExtractedData.modelSummary || '',\n        header: parsedExtractedData.extractedData?.header || {},\n        lineItems: parsedExtractedData.extractedData?.lineItems || [],\n        totals: parsedExtractedData.extractedData?.totals || {},\n        extractedData: parsedExtractedData.extractedData || {},\n        // ENHANCED: Store business entities separately\n        businessEntities: parsedExtractedData.extractedData?.businessEntities || [],\n        // COMPLIANCE: Preserve complete original OCR JSON for audit trail\n        originalOcrJson: parsedExtractedData,\n        // BUSINESS INTELLIGENCE: Add classification and analysis\n        businessIntelligence: businessIntelligence,\n        complianceMetadata: complianceMetadata,\n        // ROLE METADATA: Store user role for compliance and audit\n        roleMetadata: roleMetadata,\n        // Enhanced searchable fields with ALL GSTINs\n        allGstns: extractAllGstns(parsedExtractedData),\n        searchableText: generateSearchableText(parsedExtractedData),\n        fileUrl: `uploads/${req.file.originalname}`,\n        processingTime: parsedExtractedData.metadata?.processingTime || 0,\n        ocrDurationMs: parsedExtractedData.metadata?.ocrDurationMs || 0,\n        mongoWriteMs: 0, // Will be calculated\n        tags: businessIntelligence.suggestedTags || []\n      };\n      \n      documentData.mongoWriteMs = Date.now() - documentData.ocrDurationMs;\n\n      console.log('[DOCUMENTS] Storing document:', documentData.fileName);\n      console.log('[DOCUMENTS-DEBUG] Confirmed type:', confirmedType);\n      console.log('[DOCUMENTS-DEBUG] Raw extractedData string:', extractedData?.substring(0, 200));\n      console.log('[DOCUMENTS-DEBUG] Parsed data keys:', Object.keys(parsedExtractedData));\n      console.log('[DOCUMENTS-DEBUG] Raw text from parsed:', parsedExtractedData.rawText?.length || 0);\n      console.log('[DOCUMENTS-DEBUG] Line items from parsed:', parsedExtractedData.extractedData?.lineItems?.length || 0);\n      console.log('[DOCUMENTS] Raw text length:', documentData.rawText?.length || 0);\n      console.log('[DOCUMENTS] Line items count:', documentData.lineItems?.length || 0);\n      \n      // Store document with real persistence \n      const documentId = `doc-${Date.now()}`;\n      const result = {\n        id: documentId,\n        ...documentData,\n        createdAt: new Date().toISOString()\n      };\n\n      // Add to in-memory storage\n      documentStorage.push(result);\n      \n      console.log('[DOCUMENTS-DEBUG] Current document storage size:', documentStorage.length);\n      console.log('[DOCUMENTS-DEBUG] Document stored with ID:', result.id);\n\n      // Store learning pattern for AI improvement\n      if (confirmedType !== parsedExtractedData.documentType) {\n        console.log('[LEARNING] User corrected AI prediction:', {\n          ai: parsedExtractedData.documentType,\n          user: confirmedType\n        });\n      }\n\n      console.log('[DOCUMENTS] Stored successfully with', result.lineItems?.length || 0, 'line items');\n      res.json(result);\n\n    } catch (error) {\n      console.error('[DOCUMENTS] Storage failed:', error);\n      res.status(500).json({ error: 'Failed to store document' });\n    }\n  });\n\n  // Business Intelligence Generator\n  function generateBusinessIntelligence(ocrData: any) {\n    const header = ocrData.extractedData?.header || {};\n    const lineItems = ocrData.extractedData?.lineItems || [];\n    const totals = ocrData.extractedData?.totals || {};\n    \n    // Classify business relationship\n    let businessRelationship = 'unknown';\n    let entityTypes = { supplier: 'unknown', buyer: 'unknown' };\n    \n    // Analyze business entities based on name patterns\n    const supplierName = header.supplier?.toLowerCase() || '';\n    const buyerName = header.buyer?.toLowerCase() || '';\n    \n    // Supplier classification\n    if (supplierName.includes('medical agencies') || supplierName.includes('pharmaceuticals') || supplierName.includes('pharma')) {\n      entityTypes.supplier = supplierName.includes('agencies') ? 'wholesaler' : 'manufacturer';\n    } else if (supplierName.includes('medical') || supplierName.includes('pharmacy')) {\n      entityTypes.supplier = 'retailer';\n    }\n    \n    // Buyer classification  \n    if (buyerName.includes('medical') || buyerName.includes('pharmacy')) {\n      entityTypes.buyer = buyerName.includes('medicals') ? 'retailer' : 'pharmacy';\n    }\n    \n    // Determine relationship\n    if (entityTypes.supplier === 'wholesaler' && entityTypes.buyer === 'retailer') {\n      businessRelationship = 'wholesaler_to_retailer';\n    } else if (entityTypes.supplier === 'manufacturer' && entityTypes.buyer === 'wholesaler') {\n      businessRelationship = 'manufacturer_to_wholesaler';\n    }\n    \n    // Calculate business metrics\n    const totalValue = parseFloat(totals.net) || 0;\n    const itemCount = lineItems.length;\n    const avgItemValue = itemCount > 0 ? totalValue / itemCount : 0;\n    \n    // Medicine categories\n    const medicineCategories = lineItems.map((item: any) => {\n      const name = item.name?.toLowerCase() || '';\n      if (name.includes('tab') || name.includes('tablet')) return 'tablet';\n      if (name.includes('syrup') || name.includes('liquid')) return 'liquid';\n      if (name.includes('gel') || name.includes('cream')) return 'topical';\n      if (name.includes('injection')) return 'injection';\n      return 'other';\n    });\n    \n    const categoryCount = medicineCategories.reduce((acc: any, cat: string) => {\n      acc[cat] = (acc[cat] || 0) + 1;\n      return acc;\n    }, {});\n    \n    return {\n      businessRelationship,\n      entityTypes,\n      transactionMetrics: {\n        totalValue,\n        itemCount,\n        avgItemValue,\n        medicineCategories: categoryCount\n      },\n      riskProfile: totalValue > 10000 ? 'high_value' : totalValue > 5000 ? 'medium_value' : 'standard',\n      suggestedTags: [\n        businessRelationship,\n        entityTypes.supplier,\n        entityTypes.buyer,\n        totalValue > 10000 ? 'high_value' : 'standard_value'\n      ].filter(Boolean)\n    };\n  }\n\n  function generateComplianceMetadata(ocrData: any, fileName: string) {\n    return {\n      auditTrail: {\n        uploadTimestamp: new Date().toISOString(),\n        fileName,\n        ocrVersion: 'gpt-4o-mini',\n        extractionTimestamp: new Date().toISOString()\n      },\n      regulatoryData: {\n        documentType: ocrData.documentType,\n        businessEntities: {\n          supplier: ocrData.extractedData?.header?.supplier,\n          buyer: ocrData.extractedData?.header?.buyer,\n          gstin: ocrData.extractedData?.header?.gstin\n        },\n        medicineCount: ocrData.extractedData?.lineItems?.length || 0,\n        totalValue: ocrData.extractedData?.totals?.net,\n        taxDetails: {\n          cgst: ocrData.extractedData?.totals?.cgst,\n          sgst: ocrData.extractedData?.totals?.sgst,\n          igst: ocrData.extractedData?.totals?.igst\n        }\n      },\n      dataIntegrity: {\n        originalTextLength: ocrData.rawText?.length || 0,\n        extractedFields: Object.keys(ocrData.extractedData || {}).length,\n        confidence: ocrData.confidence\n      }\n    };\n  }\n\n  function extractAllGstns(ocrData: any): string[] {\n    const gstns: Set<string> = new Set();\n    \n    // From enhanced header fields (supplier and buyer GSTNs)\n    if (ocrData.extractedData?.header?.supplierGstn) {\n      gstns.add(ocrData.extractedData.header.supplierGstn);\n    }\n    if (ocrData.extractedData?.header?.buyerGstn) {\n      gstns.add(ocrData.extractedData.header.buyerGstn);\n    }\n    // Legacy single gstn field for backward compatibility\n    if (ocrData.extractedData?.header?.gstn) {\n      gstns.add(ocrData.extractedData.header.gstn);\n    }\n    \n    // From business entities array\n    if (ocrData.extractedData?.businessEntities) {\n      ocrData.extractedData.businessEntities.forEach((entity: any) => {\n        if (entity.gstn) gstns.add(entity.gstn);\n      });\n    }\n    \n    // From allGstns array if provided by OCR\n    if (ocrData.extractedData?.allGstns) {\n      ocrData.extractedData.allGstns.forEach((gstn: string) => {\n        if (gstn && gstn.length === 15) gstns.add(gstn);\n      });\n    }\n    \n    // From raw text - comprehensive GSTN pattern matching\n    const rawText = ocrData.rawText || '';\n    \n    // Standard GSTN format: 2 digits + 10 characters + 1 digit + 2 characters\n    const gstnPattern = /([0-9]{2}[A-Z]{5}[0-9]{4}[A-Z][1-9A-Z][Z][0-9A-Z])/g;\n    const matches = rawText.match(gstnPattern);\n    \n    if (matches) {\n      matches.forEach((match: string) => gstns.add(match));\n    }\n    \n    // Look for GSTN labels and extract the number after\n    const gstPattern = /GSTN?\\s*:?\\s*([0-9A-Z]{15})/gi;\n    const gstMatches = rawText.match(gstPattern);\n    \n    if (gstMatches) {\n      gstMatches.forEach((match: string) => {\n        const gstn = match.replace(/GSTN?\\s*:?\\s*/i, '').trim();\n        if (gstn.length === 15) gstns.add(gstn);\n      });\n    }\n    \n    // Additional patterns for OCR variations\n    const gstVariations = [\n      /GST\\s*NO\\.?\\s*:?\\s*([0-9A-Z]{15})/gi,\n      /GST\\s*NUMBER\\s*:?\\s*([0-9A-Z]{15})/gi,\n      /TIN\\s*:?\\s*([0-9A-Z]{15})/gi\n    ];\n    \n    gstVariations.forEach(pattern => {\n      const variationMatches = rawText.match(pattern);\n      if (variationMatches) {\n        variationMatches.forEach((match: string) => {\n          const gstn = match.replace(/.*:\\s*/, '').trim();\n          if (gstn.length === 15) gstns.add(gstn);\n        });\n      }\n    });\n    \n    console.log('[GSTN-EXTRACTION] Input OCR data has header:', JSON.stringify(ocrData.extractedData?.header));\n    console.log('[GSTN-EXTRACTION] Input OCR data has businessEntities:', JSON.stringify(ocrData.extractedData?.businessEntities));\n    console.log('[GSTN-EXTRACTION] Input OCR data has allGstns:', JSON.stringify(ocrData.extractedData?.allGstns));\n    console.log('[GSTN-EXTRACTION] Raw text GSTN search results:', rawText.match(/([0-9]{2}[A-Z]{5}[0-9]{4}[A-Z][1-9A-Z][Z][0-9A-Z])/g));\n    console.log('[GSTN-EXTRACTION] Final extracted GSTNs:', Array.from(gstns));\n    return Array.from(gstns);\n  }\n\n  function generateSearchableText(ocrData: any): string {\n    const parts = [\n      ocrData.rawText || '',\n      ocrData.extractedData?.header?.supplier || '',\n      ocrData.extractedData?.header?.buyer || '',\n      ocrData.extractedData?.header?.gstn || '',\n      ocrData.extractedData?.header?.docNo || '',\n      ...(ocrData.extractedData?.lineItems?.map((item: any) => item.name) || [])\n    ];\n    \n    return parts.filter(Boolean).join(' ').toLowerCase();\n  }\n\n  // In-memory document storage for now (should be database in production)\n  const documentStorage: Array<any> = [];\n\n  app.get(\"/api/documents\", async (req, res) => {\n    try {\n      console.log('[DOCUMENTS] Fetching documents:', documentStorage.length);\n      res.json(documentStorage);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch documents\" });\n    }\n  });\n  \n  // POST endpoint for direct document storage (used by confirmation flow)\n  app.post(\"/api/documents\", documentUpload.single('image'), async (req, res) => {\n    try {\n      console.log('[DOCUMENTS-POST] Processing document storage request');\n      \n      if (!req.file) {\n        return res.status(400).json({ error: 'No image file provided' });\n      }\n      \n      const { confirmedType, extractedData: extractedDataString, userRole } = req.body;\n      \n      if (!confirmedType) {\n        return res.status(400).json({ error: 'Confirmed document type is required' });\n      }\n      \n      let parsedExtractedData;\n      try {\n        parsedExtractedData = JSON.parse(extractedDataString || '{}');\n      } catch (e) {\n        console.error('[DOCUMENTS-POST] Failed to parse extracted data:', e);\n        return res.status(400).json({ error: 'Invalid extracted data format' });\n      }\n      \n      console.log('[DOCUMENTS-POST] Request data:', {\n        fileName: req.file.originalname,\n        confirmedType,\n        userRole,\n        extractedDataKeys: Object.keys(parsedExtractedData)\n      });\n      \n      // Generate business intelligence\n      const businessIntelligence = generateBusinessIntelligence(parsedExtractedData);\n      \n      const documentData = {\n        fileName: req.file.originalname,\n        fileSize: req.file.size,\n        confirmedType,\n        userRole: userRole || 'retailer',\n        rawText: parsedExtractedData.rawText || '',\n        extractedData: parsedExtractedData.extractedData || {},\n        header: parsedExtractedData.extractedData?.header || {},\n        lineItems: parsedExtractedData.extractedData?.lineItems || [],\n        totals: parsedExtractedData.extractedData?.totals || {},\n        businessIntelligence,\n        allGstns: extractAllGstns(parsedExtractedData),\n        searchableText: generateSearchableText(parsedExtractedData),\n        fileUrl: `uploads/${req.file.originalname}`,\n        processingTime: 0,\n        ocrDurationMs: 0,\n        mongoWriteMs: 0,\n        tags: businessIntelligence.suggestedTags || []\n      };\n      \n      const documentId = `doc-${Date.now()}`;\n      const result = {\n        id: documentId,\n        ...documentData,\n        createdAt: new Date().toISOString()\n      };\n      \n      // Add to in-memory storage\n      documentStorage.push(result);\n      \n      console.log('[DOCUMENTS-POST] Document stored successfully with ID:', documentId);\n      console.log('[DOCUMENTS-POST] Current document storage size:', documentStorage.length);\n      \n      res.json(result);\n      \n    } catch (error) {\n      console.error('[DOCUMENTS-POST] Storage failed:', error);\n      res.status(500).json({ error: 'Failed to store document' });\n    }\n  });\n\n  // Products routes\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      console.log('[API] Fetching products...');\n      const products = await storage.getProducts();\n      console.log(`[API] Found ${products.length} products`);\n      res.json(products);\n    } catch (error) {\n      console.error('[API ERROR] Failed to fetch products:', error);\n      res.status(500).json({ error: \"Failed to fetch products\" });\n    }\n  });\n\n  app.post(\"/api/products\", async (req, res) => {\n    try {\n      const productData = insertProductSchema.parse(req.body);\n      const product = await storage.createProduct(productData);\n      res.status(201).json(product);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ error: \"Invalid product data\", details: error.errors });\n      } else {\n        res.status(500).json({ error: \"Failed to create product\" });\n      }\n    }\n  });\n\n  app.get(\"/api/products/:id\", async (req, res) => {\n    try {\n      const product = await storage.getProduct(req.params.id);\n      if (!product) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch product\" });\n    }\n  });\n\n  // Stock routes\n  app.get(\"/api/stock\", async (req, res) => {\n    try {\n      const stock = await storage.getStock();\n      res.json(stock);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch stock\" });\n    }\n  });\n\n  app.post(\"/api/stock\", async (req, res) => {\n    try {\n      const stockData = insertStockSchema.parse(req.body);\n      const stock = await storage.createStock(stockData);\n      res.status(201).json(stock);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ error: \"Invalid stock data\", details: error.errors });\n      } else {\n        res.status(500).json({ error: \"Failed to create stock\" });\n      }\n    }\n  });\n\n  app.get(\"/api/stock/product/:productId\", async (req, res) => {\n    try {\n      const stock = await storage.getStockByProduct(req.params.productId);\n      res.json(stock);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch stock\" });\n    }\n  });\n\n  // Barcode lookup route\n  app.post(\"/api/barcode/lookup\", async (req, res) => {\n    try {\n      const { barcode } = req.body;\n      \n      // Mock barcode lookup - in production this would query a drug database\n      const mockProductMapping: Record<string, string> = {\n        '1234567890123': 'prod-1', // Paracetamol\n        '9876543210987': 'prod-2', // Cough Syrup  \n        '1111222233334': 'prod-1', // Another barcode for Paracetamol\n      };\n      \n      const productId = mockProductMapping[barcode];\n      \n      if (productId) {\n        // Get product details\n        const products = await storage.getProducts();\n        const product = products.find(p => p.id === productId);\n        \n        if (product) {\n          res.json({\n            barcode,\n            productId,\n            product,\n            found: true\n          });\n        } else {\n          res.json({\n            barcode,\n            found: false,\n            message: 'Product not found in inventory'\n          });\n        }\n      } else {\n        res.json({\n          barcode,\n          found: false,\n          message: 'Barcode not recognized'\n        });\n      }\n    } catch (error) {\n      res.status(500).json({ error: 'Barcode lookup failed' });\n    }\n  });\n\n  // Sales routes\n  app.get(\"/api/sales\", async (req, res) => {\n    try {\n      const sales = await storage.getSales();\n      res.json(sales);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch sales\" });\n    }\n  });\n\n  app.post(\"/api/sales\", async (req, res) => {\n    try {\n      const saleData = insertSaleSchema.parse(req.body);\n      const sale = await storage.createSale(saleData);\n      \n      // Create outbox entry for offline sync\n      await storage.createOutboxItem({\n        tableName: 'sales',\n        rowId: sale.id,\n        operation: 'create',\n        payload: JSON.stringify(sale)\n      });\n      \n      res.status(201).json(sale);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ error: \"Invalid sale data\", details: error.errors });\n      } else {\n        res.status(500).json({ error: \"Failed to create sale\" });\n      }\n    }\n  });\n\n  app.get(\"/api/sales/today\", async (req, res) => {\n    try {\n      const todaysSales = await storage.getTodaysSales();\n      res.json({ total: todaysSales });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch today's sales\" });\n    }\n  });\n\n  // Stock bulk insert endpoint for OCR processing\n  app.post('/api/stock/bulk', async (req, res) => {\n    try {\n      console.log('[STOCK-BULK] Processing bulk stock insert');\n      console.log('[STOCK-BULK] Request body:', JSON.stringify(req.body, null, 2));\n      \n      const items = req.body.items as Array<{\n        name: string;\n        batch: string;\n        qty: number;\n        exp: string;\n        mrp: number;\n      }>;\n      \n      const { billNumber, date } = req.body;\n      \n      if (!items || !Array.isArray(items)) {\n        throw new Error('Items array is required');\n      }\n      \n      // Log duplicate check info (actual duplicate prevention done on frontend with document storage)\n      if (billNumber && date) {\n        console.log(`[STOCK-BULK] Processing invoice: ${billNumber} dated ${date}`);\n      }\n      \n      console.log('[STOCK-BULK] Items to process:', items.length);\n      \n      for (const item of items) {\n        // Find or create product\n        const products = await storage.getProducts();\n        let product = products.find(p => p.name === item.name);\n        \n        if (!product) {\n          const productData = {\n            name: item.name,\n            description: `Added from OCR scan`,\n            price: item.mrp\n          };\n          \n          product = await storage.createProduct(productData);\n          console.log('[STOCK-BULK] Created new product:', product.name);\n        }\n        \n        // Create stock entry\n        const stockData = {\n          productId: product.id,\n          batchNumber: item.batch,\n          quantity: item.qty,\n          expiryDate: new Date(item.exp)\n        };\n        \n        await storage.createStock(stockData);\n        console.log('[STOCK-BULK] Added stock:', item.name, 'qty:', item.qty);\n      }\n      \n      console.log('[STOCK-BULK] Completed successfully - items processed:', items.length);\n      res.status(201).json({ \n        success: true, \n        itemsProcessed: items.length,\n        message: `${items.length} items added to stock from OCR scan`\n      });\n      \n    } catch (error) {\n      console.error('[STOCK-BULK] Error:', error);\n      res.status(500).json({ error: 'Failed to process bulk stock insert' });\n    }\n  });\n\n  // Captures API\n  app.post(\"/api/captures\", async (req, res) => {\n    try {\n      console.log('[API] Creating capture with data:', req.body);\n      \n      // Basic capture logging (storage method will be added later)\n      const captureData = {\n        id: `capture-${Date.now()}`,\n        ...req.body,\n        createdAt: new Date().toISOString()\n      };\n      \n      console.log('[API] Capture logged successfully:', captureData.id);\n      res.status(201).json(captureData);\n    } catch (error) {\n      console.error('[API ERROR] Failed to create capture:', error);\n      res.status(500).json({ error: \"Failed to create capture\" });\n    }\n  });\n\n  app.get(\"/api/captures\", async (req, res) => {\n    try {\n      console.log('[API] Fetching captures...');\n      res.json([]);\n    } catch (error) {\n      console.error('[API ERROR] Failed to fetch captures:', error);\n      res.status(500).json({ error: \"Failed to fetch captures\" });\n    }\n  });\n\n  // Sync routes\n  app.post(\"/api/sync/batch\", async (req, res) => {\n    try {\n      const unsyncedItems = await storage.getUnsyncedOutboxItems();\n      \n      // Process each unsynced item idempotently\n      for (const item of unsyncedItems) {\n        // Mark as synced (in real implementation, this would sync to remote)\n        await storage.markOutboxItemSynced(item.id);\n      }\n      \n      res.json({ \n        processed: unsyncedItems.length,\n        message: \"Batch sync completed successfully\"\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to process sync batch\" });\n    }\n  });\n\n  app.get(\"/api/sync/status\", async (req, res) => {\n    try {\n      const unsyncedItems = await storage.getUnsyncedOutboxItems();\n      res.json({\n        pendingItems: unsyncedItems.length,\n        lastSync: new Date().toISOString(),\n        online: true\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to get sync status\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":27772},"server/storage.ts":{"content":"import { type User, type InsertUser, type Product, type InsertProduct, type Stock, type InsertStock, type Sale, type InsertSale, type Outbox, type InsertOutbox, type AssistantBetaLead, type InsertAssistantBetaLead, type Document, type InsertDocument } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { db } from \"./db\";\nimport { eq } from \"drizzle-orm\";\nimport { users, products, stock, sales, outbox, assistantBetaLeads, documents } from \"@shared/schema\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Products\n  getProducts(): Promise<Product[]>;\n  getProduct(id: string): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product | undefined>;\n  deleteProduct(id: string): Promise<boolean>;\n  \n  // Stock\n  getStock(): Promise<Stock[]>;\n  getStockByProduct(productId: string): Promise<Stock[]>;\n  createStock(stock: InsertStock): Promise<Stock>;\n  updateStock(id: string, stock: Partial<InsertStock>): Promise<Stock | undefined>;\n  \n  // Sales\n  getSales(): Promise<Sale[]>;\n  getSale(id: string): Promise<Sale | undefined>;\n  createSale(sale: InsertSale): Promise<Sale>;\n  getTodaysSales(): Promise<number>;\n  \n  // Outbox\n  getOutboxItems(): Promise<Outbox[]>;\n  createOutboxItem(item: InsertOutbox): Promise<Outbox>;\n  markOutboxItemSynced(id: string): Promise<void>;\n  getUnsyncedOutboxItems(): Promise<Outbox[]>;\n  \n  // Assistant Beta Leads\n  createAssistantBetaLead(lead: InsertAssistantBetaLead): Promise<AssistantBetaLead>;\n  \n  // Documents - Critical for AI/GSTN compliance data\n  getDocuments(): Promise<Document[]>;\n  createDocument(doc: InsertDocument): Promise<Document>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private products: Map<string, Product> = new Map();\n  private stock: Map<string, Stock> = new Map();\n  private sales: Map<string, Sale> = new Map();\n  private outbox: Map<string, Outbox> = new Map();\n  private assistantBetaLeads: Map<string, AssistantBetaLead> = new Map();\n  private documents: Map<string, Document> = new Map();\n\n  constructor() {\n    // Initialize with some demo data\n    this.initializeDemoData();\n  }\n\n  private initializeDemoData() {\n    // Add demo products\n    const product1: Product = {\n      id: \"prod-1\",\n      name: \"Paracetamol 500mg\",\n      description: \"Pain relief medication\",\n      price: 25.50,\n      createdAt: new Date(),\n    };\n    \n    const product2: Product = {\n      id: \"prod-2\", \n      name: \"Cough Syrup\",\n      description: \"For dry cough relief\",\n      price: 85.00,\n      createdAt: new Date(),\n    };\n\n    this.products.set(product1.id, product1);\n    this.products.set(product2.id, product2);\n\n    // Add demo stock\n    const stock1: Stock = {\n      id: \"stock-1\",\n      productId: \"prod-1\",\n      batchNumber: \"B2024001\",\n      quantity: 45,\n      expiryDate: new Date(\"2025-12-31\"),\n      createdAt: new Date(),\n    };\n\n    const stock2: Stock = {\n      id: \"stock-2\",\n      productId: \"prod-2\", \n      batchNumber: \"B2024002\",\n      quantity: 5, // Low stock\n      expiryDate: new Date(\"2025-06-30\"),\n      createdAt: new Date(),\n    };\n\n    this.stock.set(stock1.id, stock1);\n    this.stock.set(stock2.id, stock2);\n\n    // Add demo sales\n    const sale1: Sale = {\n      id: \"sale-1\",\n      total: 285.50,\n      date: new Date(),\n      items: JSON.stringify([{productId: \"prod-1\", quantity: 2, price: 25.50}]),\n      synced: true,\n    };\n\n    this.sales.set(sale1.id, sale1);\n  }\n\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      id, \n      role: insertUser.role || null,\n      onboarded: (insertUser as any).onboarded || false \n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Products\n  async getProducts(): Promise<Product[]> {\n    return Array.from(this.products.values());\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    return this.products.get(id);\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    const id = randomUUID();\n    const newProduct: Product = { \n      ...product, \n      id, \n      description: product.description || null,\n      price: product.price || 0,\n      createdAt: new Date() \n    };\n    this.products.set(id, newProduct);\n    \n    // Add to outbox for sync\n    await this.createOutboxItem({\n      tableName: \"products\",\n      rowId: id,\n      operation: \"create\",\n      payload: JSON.stringify(newProduct),\n    });\n    \n    return newProduct;\n  }\n\n  async updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product | undefined> {\n    const existing = this.products.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...product };\n    this.products.set(id, updated);\n    \n    // Add to outbox for sync\n    await this.createOutboxItem({\n      tableName: \"products\",\n      rowId: id,\n      operation: \"update\", \n      payload: JSON.stringify(updated),\n    });\n    \n    return updated;\n  }\n\n  async deleteProduct(id: string): Promise<boolean> {\n    const deleted = this.products.delete(id);\n    if (deleted) {\n      // Add to outbox for sync\n      await this.createOutboxItem({\n        tableName: \"products\",\n        rowId: id,\n        operation: \"delete\",\n        payload: JSON.stringify({ id }),\n      });\n    }\n    return deleted;\n  }\n\n  // Stock\n  async getStock(): Promise<Stock[]> {\n    return Array.from(this.stock.values());\n  }\n\n  async getStockByProduct(productId: string): Promise<Stock[]> {\n    return Array.from(this.stock.values()).filter(s => s.productId === productId);\n  }\n\n  async createStock(stock: InsertStock): Promise<Stock> {\n    const id = randomUUID();\n    const newStock: Stock = { \n      ...stock, \n      id, \n      quantity: stock.quantity || 0,\n      expiryDate: stock.expiryDate || null,\n      createdAt: new Date() \n    };\n    this.stock.set(id, newStock);\n    \n    // Add to outbox for sync\n    await this.createOutboxItem({\n      tableName: \"stock\",\n      rowId: id,\n      operation: \"create\",\n      payload: JSON.stringify(newStock),\n    });\n    \n    return newStock;\n  }\n\n  async updateStock(id: string, stock: Partial<InsertStock>): Promise<Stock | undefined> {\n    const existing = this.stock.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...stock };\n    this.stock.set(id, updated);\n    \n    // Add to outbox for sync\n    await this.createOutboxItem({\n      tableName: \"stock\", \n      rowId: id,\n      operation: \"update\",\n      payload: JSON.stringify(updated),\n    });\n    \n    return updated;\n  }\n\n  // Sales\n  async getSales(): Promise<Sale[]> {\n    return Array.from(this.sales.values()).sort((a, b) => \n      new Date(b.date!).getTime() - new Date(a.date!).getTime()\n    );\n  }\n\n  async getSale(id: string): Promise<Sale | undefined> {\n    return this.sales.get(id);\n  }\n\n  async createSale(sale: InsertSale): Promise<Sale> {\n    const id = randomUUID();\n    const newSale: Sale = { \n      ...sale, \n      id, \n      items: sale.items || null,\n      date: new Date(),\n      synced: false\n    };\n    this.sales.set(id, newSale);\n    \n    // Add to outbox for sync\n    await this.createOutboxItem({\n      tableName: \"sales\",\n      rowId: id,\n      operation: \"create\", \n      payload: JSON.stringify(newSale),\n    });\n    \n    return newSale;\n  }\n\n  async getTodaysSales(): Promise<number> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    \n    return Array.from(this.sales.values())\n      .filter(sale => {\n        const saleDate = new Date(sale.date!);\n        saleDate.setHours(0, 0, 0, 0);\n        return saleDate.getTime() === today.getTime();\n      })\n      .reduce((total, sale) => total + sale.total, 0);\n  }\n\n  // Documents - Critical for AI/GSTN data\n  async getDocuments(): Promise<Document[]> {\n    return Array.from(this.documents.values()).sort((a: Document, b: Document) => \n      new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime()\n    );\n  }\n\n  async createDocument(doc: InsertDocument): Promise<Document> {\n    const id = randomUUID();\n    const newDoc: Document = { \n      ...doc, \n      id, \n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.documents.set(id, newDoc);\n    console.log('[STORAGE] Document saved to memory:', id, newDoc.docType);\n    return newDoc;\n  }\n\n  // Outbox\n  async getOutboxItems(): Promise<Outbox[]> {\n    return Array.from(this.outbox.values());\n  }\n\n  async createOutboxItem(item: InsertOutbox): Promise<Outbox> {\n    const id = randomUUID();\n    const newItem: Outbox = { \n      ...item, \n      id, \n      timestamp: new Date(),\n      synced: false,\n      ownerId: item.ownerId || null,\n      persona: item.persona || null\n    };\n    this.outbox.set(id, newItem);\n    return newItem;\n  }\n\n  async markOutboxItemSynced(id: string): Promise<void> {\n    const item = this.outbox.get(id);\n    if (item) {\n      item.synced = true;\n      this.outbox.set(id, item);\n    }\n  }\n\n  async getUnsyncedOutboxItems(): Promise<Outbox[]> {\n    return Array.from(this.outbox.values()).filter(item => !item.synced);\n  }\n\n  // Assistant Beta Leads\n  async createAssistantBetaLead(lead: InsertAssistantBetaLead): Promise<AssistantBetaLead> {\n    const id = randomUUID();\n    const newLead: AssistantBetaLead = { \n      ...lead, \n      id, \n      timestamp: new Date()\n    };\n    this.assistantBetaLeads.set(id, newLead);\n    return newLead;\n  }\n}\n\n// Database storage implementation using PostgreSQL\nexport class DatabaseStorage implements IStorage {\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    try {\n      const [user] = await db.select().from(users).where(eq(users.id, id));\n      return user || undefined;\n    } catch (error) {\n      console.error('Database error in getUser:', error);\n      return undefined;\n    }\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    try {\n      const [user] = await db.select().from(users).where(eq(users.username, username));\n      return user || undefined;\n    } catch (error) {\n      console.error('Database error in getUserByUsername:', error);\n      return undefined;\n    }\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    try {\n      const [user] = await db.insert(users).values({\n        ...insertUser,\n        id: randomUUID()\n      }).returning();\n      return user;\n    } catch (error) {\n      console.error('Database error in createUser:', error);\n      throw error;\n    }\n  }\n\n  // Products\n  async getProducts(): Promise<Product[]> {\n    try {\n      return await db.select().from(products);\n    } catch (error) {\n      console.error('Database error in getProducts:', error);\n      return [];\n    }\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    try {\n      const [product] = await db.select().from(products).where(eq(products.id, id));\n      return product || undefined;\n    } catch (error) {\n      console.error('Database error in getProduct:', error);\n      return undefined;\n    }\n  }\n\n  async createProduct(insertProduct: InsertProduct): Promise<Product> {\n    try {\n      const [product] = await db.insert(products).values({\n        ...insertProduct,\n        id: randomUUID(),\n        createdAt: new Date()\n      }).returning();\n      return product;\n    } catch (error) {\n      console.error('Database error in createProduct:', error);\n      throw error;\n    }\n  }\n\n  async updateProduct(id: string, updates: Partial<InsertProduct>): Promise<Product | undefined> {\n    try {\n      const [product] = await db.update(products).set(updates).where(eq(products.id, id)).returning();\n      return product || undefined;\n    } catch (error) {\n      console.error('Database error in updateProduct:', error);\n      return undefined;\n    }\n  }\n\n  async deleteProduct(id: string): Promise<boolean> {\n    try {\n      const result = await db.delete(products).where(eq(products.id, id));\n      return (result.rowCount || 0) > 0;\n    } catch (error) {\n      console.error('Database error in deleteProduct:', error);\n      return false;\n    }\n  }\n\n  // Stock\n  async getStock(): Promise<Stock[]> {\n    try {\n      return await db.select().from(stock);\n    } catch (error) {\n      console.error('Database error in getStock:', error);\n      return [];\n    }\n  }\n\n  async getStockByProduct(productId: string): Promise<Stock[]> {\n    try {\n      return await db.select().from(stock).where(eq(stock.productId, productId));\n    } catch (error) {\n      console.error('Database error in getStockByProduct:', error);\n      return [];\n    }\n  }\n\n  async createStock(insertStock: InsertStock): Promise<Stock> {\n    try {\n      const [stockItem] = await db.insert(stock).values({\n        ...insertStock,\n        id: randomUUID(),\n        createdAt: new Date()\n      }).returning();\n      return stockItem;\n    } catch (error) {\n      console.error('Database error in createStock:', error);\n      throw error;\n    }\n  }\n\n  async updateStock(id: string, updates: Partial<InsertStock>): Promise<Stock | undefined> {\n    try {\n      const [stockItem] = await db.update(stock).set(updates).where(eq(stock.id, id)).returning();\n      return stockItem || undefined;\n    } catch (error) {\n      console.error('Database error in updateStock:', error);\n      return undefined;\n    }\n  }\n\n  // Sales\n  async getSales(): Promise<Sale[]> {\n    try {\n      return await db.select().from(sales);\n    } catch (error) {\n      console.error('Database error in getSales:', error);\n      return [];\n    }\n  }\n\n  async getSale(id: string): Promise<Sale | undefined> {\n    try {\n      const [sale] = await db.select().from(sales).where(eq(sales.id, id));\n      return sale || undefined;\n    } catch (error) {\n      console.error('Database error in getSale:', error);\n      return undefined;\n    }\n  }\n\n  async createSale(insertSale: InsertSale): Promise<Sale> {\n    try {\n      const [sale] = await db.insert(sales).values({\n        ...insertSale,\n        id: randomUUID(),\n        date: new Date()\n      }).returning();\n      return sale;\n    } catch (error) {\n      console.error('Database error in createSale:', error);\n      throw error;\n    }\n  }\n\n  async getTodaysSales(): Promise<number> {\n    try {\n      const allSales = await db.select().from(sales);\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      \n      return allSales\n        .filter(sale => {\n          const saleDate = new Date(sale.date!);\n          saleDate.setHours(0, 0, 0, 0);\n          return saleDate.getTime() === today.getTime();\n        })\n        .reduce((total, sale) => total + sale.total, 0);\n    } catch (error) {\n      console.error('Database error in getTodaysSales:', error);\n      return 0;\n    }\n  }\n\n  // Outbox\n  async getOutboxItems(): Promise<Outbox[]> {\n    try {\n      return await db.select().from(outbox);\n    } catch (error) {\n      console.error('Database error in getOutboxItems:', error);\n      return [];\n    }\n  }\n\n  async createOutboxItem(insertOutbox: InsertOutbox): Promise<Outbox> {\n    try {\n      const [outboxItem] = await db.insert(outbox).values({\n        ...insertOutbox,\n        id: randomUUID(),\n        timestamp: new Date()\n      }).returning();\n      return outboxItem;\n    } catch (error) {\n      console.error('Database error in createOutboxItem:', error);\n      throw error;\n    }\n  }\n\n  async markOutboxItemSynced(id: string): Promise<void> {\n    try {\n      await db.update(outbox).set({ synced: true }).where(eq(outbox.id, id));\n    } catch (error) {\n      console.error('Database error in markOutboxItemSynced:', error);\n    }\n  }\n\n  async getUnsyncedOutboxItems(): Promise<Outbox[]> {\n    try {\n      return await db.select().from(outbox).where(eq(outbox.synced, false));\n    } catch (error) {\n      console.error('Database error in getUnsyncedOutboxItems:', error);\n      return [];\n    }\n  }\n\n  // Assistant Beta Leads\n  async createAssistantBetaLead(insertLead: InsertAssistantBetaLead): Promise<AssistantBetaLead> {\n    try {\n      const [lead] = await db.insert(assistantBetaLeads).values({\n        ...insertLead,\n        id: randomUUID(),\n        timestamp: new Date()\n      }).returning();\n      return lead;\n    } catch (error) {\n      console.error('Database error in createAssistantBetaLead:', error);\n      throw error;\n    }\n  }\n\n  // Documents - Critical for AI/GSTN compliance data\n  async getDocuments(): Promise<Document[]> {\n    try {\n      const docs = await db.select().from(documents);\n      const sorted = docs.sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime());\n      console.log('[DATABASE] Loaded', docs.length, 'documents from database');\n      return sorted;\n    } catch (error) {\n      console.error('Database error in getDocuments:', error);\n      return [];\n    }\n  }\n\n  async createDocument(insertDoc: InsertDocument): Promise<Document> {\n    try {\n      const [doc] = await db.insert(documents).values({\n        ...insertDoc,\n        id: randomUUID(),\n        createdAt: new Date(),\n        updatedAt: new Date()\n      }).returning();\n      console.log('[DATABASE] Document saved to PostgreSQL:', doc.id, doc.docType);\n      return doc;\n    } catch (error) {\n      console.error('Database error in createDocument:', error);\n      throw error;\n    }\n  }\n}\n\n// Use database storage with fallback to memory storage if database is unavailable\nlet storage: IStorage = new MemStorage(); // Default fallback\n\nasync function initializeStorage(): Promise<void> {\n  try {\n    // Test database connectivity\n    await db.select().from(products).limit(1);\n    storage = new DatabaseStorage();\n    console.log('📊 Using PostgreSQL database storage');\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n    console.warn('⚠️ Database unavailable, using memory storage:', errorMessage);\n    // Keep using MemStorage fallback\n  }\n}\n\n// Initialize storage on first import\ninitializeStorage();\n\nexport { storage };\n","size_bytes":18495},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, real, timestamp, boolean, decimal, doublePrecision, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: text(\"role\").default(\"retailer\"), // retailer, wholesaler, distributor\n  onboarded: boolean(\"onboarded\").default(false),\n});\n\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  price: real(\"price\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const stock = pgTable(\"stock\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  batchNumber: text(\"batch_number\").notNull(),\n  quantity: integer(\"quantity\").notNull().default(0),\n  expiryDate: timestamp(\"expiry_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const sales = pgTable(\"sales\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  total: real(\"total\").notNull(),\n  date: timestamp(\"date\").defaultNow(),\n  items: text(\"items\"), // JSON string of sale items\n  synced: boolean(\"synced\").default(false),\n});\n\nexport const captures = pgTable(\"captures\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  uri: text(\"uri\").notNull(), // file path or base64\n  mode: text(\"mode\").notNull(), // 'barcode', 'invoice', 'prescription'\n  ownerId: varchar(\"owner_id\").references(() => users.id).notNull(),\n  persona: text(\"persona\").notNull(), // retailer, wholesaler, distributor\n  saleId: varchar(\"sale_id\").references(() => sales.id), // optional link to sale\n  processed: boolean(\"processed\").default(false),\n  metadata: text(\"metadata\"), // JSON string for extracted data\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const prescriptions = pgTable(\"prescriptions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  imgId: varchar(\"img_id\").references(() => captures.id).notNull(),\n  patient: text(\"patient\").default(\"\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const receiveInvoices = pgTable(\"receive_invoices\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  imgId: varchar(\"img_id\").references(() => captures.id).notNull(),\n  vendor: text(\"vendor\").default(\"\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const userProfile = pgTable(\"user_profile\", {\n  id: text(\"id\").primaryKey().default(\"ME\"),\n  role: text(\"role\").notNull().default(\"retailer\"), // retailer, wholesaler, distributor\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const receiveItems = pgTable(\"receive_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  invoiceId: varchar(\"invoice_id\").references(() => receiveInvoices.id).notNull(),\n  drug: text(\"drug\").notNull(),\n  qty: integer(\"qty\").notNull(),\n  mrp: real(\"mrp\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const outbox = pgTable(\"outbox\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tableName: text(\"table_name\").notNull(),\n  rowId: varchar(\"row_id\").notNull(),\n  operation: text(\"operation\").notNull(), // 'create', 'update', 'delete'\n  payload: text(\"payload\").notNull(), // JSON string\n  ownerId: varchar(\"owner_id\").references(() => users.id), // track ownership\n  persona: text(\"persona\"), // track user role\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n  synced: boolean(\"synced\").default(false),\n});\n\nexport const assistantBetaLeads = pgTable(\"assistant_beta_leads\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull(),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\n// Receiving workflow tables\nexport const vendors = pgTable(\"vendors\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  gstNo: text(\"gst_no\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const purchaseOrders = pgTable(\"purchase_orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  vendorId: varchar(\"vendor_id\").references(() => vendors.id),\n  date: timestamp(\"date\").defaultNow(),\n  status: text(\"status\").notNull().default(\"draft\"), // draft, sent, received, cancelled\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const purchaseLines = pgTable(\"purchase_lines\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  poId: varchar(\"po_id\").references(() => purchaseOrders.id),\n  productId: varchar(\"product_id\").references(() => products.id),\n  quantity: integer(\"quantity\").notNull(),\n  rate: decimal(\"rate\", { precision: 10, scale: 2 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const receipts = pgTable(\"receipts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  poId: varchar(\"po_id\").references(() => purchaseOrders.id),\n  receivedAt: timestamp(\"received_at\").defaultNow(),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n  role: true,\n});\n\n// Capture schema is defined below with other new schemas\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertStockSchema = createInsertSchema(stock).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSaleSchema = createInsertSchema(sales).omit({\n  id: true,\n  date: true,\n  synced: true,\n});\n\nexport const insertOutboxSchema = createInsertSchema(outbox).omit({\n  id: true,\n  timestamp: true,\n  synced: true,\n});\n\nexport const insertAssistantBetaLeadSchema = createInsertSchema(assistantBetaLeads).omit({\n  id: true,\n  timestamp: true,\n});\n\n// Receiving schemas\nexport const insertVendorSchema = createInsertSchema(vendors).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPurchaseOrderSchema = createInsertSchema(purchaseOrders).omit({\n  id: true,\n  createdAt: true,\n  totalAmount: true,\n});\n\nexport const insertPurchaseLineSchema = createInsertSchema(purchaseLines).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertReceiptSchema = createInsertSchema(receipts).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCaptureSchema = createInsertSchema(captures).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPrescriptionSchema = createInsertSchema(prescriptions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertReceiveInvoiceSchema = createInsertSchema(receiveInvoices).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserProfileSchema = createInsertSchema(userProfile).omit({\n  createdAt: true,\n});\n\nexport const insertReceiveItemSchema = createInsertSchema(receiveItems).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Document storage for AI analysis and retrieval with full-fidelity compliance\nexport const documents = pgTable(\"documents\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  enterpriseId: varchar(\"enterprise_id\").default(\"default\").notNull(), // For multi-tenant support\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  fileName: text(\"file_name\").notNull(),\n  docType: text(\"doc_type\").notNull(), // 'bill', 'prescription', 'invoice', 'other'\n  confirmedType: text(\"confirmed_type\"), // User-confirmed type for learning\n  confidence: doublePrecision(\"confidence\").notNull(),\n  rawText: text(\"raw_text\").notNull(), // COMPLETE OCR text with line-breaks\n  modelSummary: text(\"model_summary\").notNull(), // ≤150-word natural-language summary\n  header: jsonb(\"header\"), // { supplier, buyer, docNo, gstin, date }\n  lineItems: jsonb(\"line_items\"), // [{ name, qty, mrp, rate, gstPct, amount }]\n  totals: jsonb(\"totals\"), // { taxable, cgst, sgst, igst, net }\n  extractedData: jsonb(\"extracted_data\"), // Legacy compatibility\n  fileUrl: text(\"file_url\"), // S3/local storage path\n  processingTime: integer(\"processing_time\"),\n  ocrDurationMs: integer(\"ocr_duration_ms\"), // For audit logging\n  mongoWriteMs: integer(\"mongo_write_ms\"), // For audit logging\n  tags: text(\"tags\").array(), // For search and categorization\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// User learning patterns for improving AI accuracy\nexport const userLearningPatterns = pgTable(\"user_learning_patterns\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  documentFeatures: jsonb(\"document_features\"), // Features that led to classification\n  aiPrediction: text(\"ai_prediction\").notNull(),\n  userCorrection: text(\"user_correction\"),\n  confidenceScore: doublePrecision(\"confidence_score\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertDocumentSchema = createInsertSchema(documents).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUserLearningPatternSchema = createInsertSchema(userLearningPatterns).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type Stock = typeof stock.$inferSelect;\nexport type InsertStock = z.infer<typeof insertStockSchema>;\nexport type Sale = typeof sales.$inferSelect;\nexport type InsertSale = z.infer<typeof insertSaleSchema>;\nexport type Capture = typeof captures.$inferSelect;\nexport type InsertCapture = z.infer<typeof insertCaptureSchema>;\nexport type Prescription = typeof prescriptions.$inferSelect;\nexport type InsertPrescription = z.infer<typeof insertPrescriptionSchema>;\nexport type ReceiveInvoice = typeof receiveInvoices.$inferSelect;\nexport type InsertReceiveInvoice = z.infer<typeof insertReceiveInvoiceSchema>;\nexport type UserProfile = typeof userProfile.$inferSelect;\nexport type InsertUserProfile = z.infer<typeof insertUserProfileSchema>;\nexport type ReceiveItem = typeof receiveItems.$inferSelect;\nexport type InsertReceiveItem = z.infer<typeof insertReceiveItemSchema>;\nexport type Outbox = typeof outbox.$inferSelect;\nexport type InsertOutbox = z.infer<typeof insertOutboxSchema>;\nexport type AssistantBetaLead = typeof assistantBetaLeads.$inferSelect;\nexport type InsertAssistantBetaLead = z.infer<typeof insertAssistantBetaLeadSchema>;\n\n// Receiving types\nexport type Vendor = typeof vendors.$inferSelect;\nexport type InsertVendor = z.infer<typeof insertVendorSchema>;\nexport type PurchaseOrder = typeof purchaseOrders.$inferSelect;\nexport type InsertPurchaseOrder = z.infer<typeof insertPurchaseOrderSchema>;\nexport type PurchaseLine = typeof purchaseLines.$inferSelect;\nexport type InsertPurchaseLine = z.infer<typeof insertPurchaseLineSchema>;\nexport type Receipt = typeof receipts.$inferSelect;\nexport type InsertReceipt = z.infer<typeof insertReceiptSchema>;\n\n// Document types\nexport type Document = typeof documents.$inferSelect;\nexport type InsertDocument = z.infer<typeof insertDocumentSchema>;\nexport type UserLearningPattern = typeof userLearningPatterns.$inferSelect;\nexport type InsertUserLearningPattern = z.infer<typeof insertUserLearningPatternSchema>;\n","size_bytes":11768},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Inventory from \"@/pages/inventory\";\nimport Sales from \"@/pages/sales\";\nimport OpsScreen from \"@/pages/ops\";\nimport EnterPOScreen from \"@/pages/enter-po\";\nimport SalesLedgerScreen from \"@/pages/sales-ledger\";\nimport ReturnsScreen from \"@/pages/returns\";\nimport AdjustStockScreen from \"@/pages/adjust-stock\";\nimport BarcodeScannerScreen from \"@/pages/barcode-scan\";\nimport InvoiceScannerScreen from \"@/pages/scan-invoice\";\nimport QuickCaptureScreen from \"@/pages/quick-capture\";\nimport Settings from \"@/pages/settings\";\nimport PosScreen from \"@/pages/pos\";\nimport ReceiveStockScreen from \"@/pages/receive-stock\";\nimport ReportsScreen from \"@/pages/reports\";\nimport AIAssistantPage from \"@/pages/ai-assistant-fullscreen\";\nimport NotFound from \"@/pages/not-found\";\nimport { BottomNavigation } from \"@/components/bottom-navigation\";\n// import { PermissionPortal } from \"@/services/camera\"; // Removed - no longer needed\n\nfunction Router() {\n  return (\n    <div className=\"flex flex-col h-screen\">\n      <div className=\"flex-1 overflow-hidden\">\n        <Switch>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/products\" component={Inventory} />\n          <Route path=\"/inventory\" component={Inventory} />\n          <Route path=\"/sales\" component={Sales} />\n          <Route path=\"/ops\" component={OpsScreen} />\n          <Route path=\"/sales-ledger\" component={SalesLedgerScreen} />\n          <Route path=\"/returns\" component={ReturnsScreen} />\n          <Route path=\"/adjust-stock\" component={AdjustStockScreen} />\n          <Route path=\"/barcode-scan\" component={BarcodeScannerScreen} />\n          <Route path=\"/scan-invoice\" component={InvoiceScannerScreen} />\n          <Route path=\"/capture\" component={QuickCaptureScreen} />\n          <Route path=\"/enter-po\" component={EnterPOScreen} />\n          <Route path=\"/pos\" component={PosScreen} />\n          <Route path=\"/receive-stock\" component={ReceiveStockScreen} />\n          <Route path=\"/reports\" component={ReportsScreen} />\n          <Route path=\"/ai-assistant\" component={AIAssistantPage} />\n          <Route path=\"/bill-fast\" component={() => <div className=\"p-4 text-center text-muted-foreground\">Bill Fast feature coming in Iteration 1</div>} />\n          <Route path=\"/settings\" component={Settings} />\n          <Route component={NotFound} />\n        </Switch>\n      </div>\n      <BottomNavigation />\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2933},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@import url('https://fonts.googleapis.com/icon?family=Material+Icons');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(210, 100%, 40%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222.2, 84%, 4.9%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(210, 100%, 40%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.029, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2%, 50.9804%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-border: hsl(205, 25%, 90.5882%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: 'Inter', 'Open Sans', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 2px 4px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 4px 6px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 8px 10px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(203.7736, 87.6033%, 52.549%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195, 15.3846%, 94.902%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(205.7143, 70%, 7.8431%);\n  --accent-foreground: hsl(203.7736, 87.6033%, 52.549%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.902%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.029, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2%, 50.9804%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(202.8169, 89.1213%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736, 87.6033%, 52.549%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: 'Inter', 'Open Sans', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n.material-icons {\n  font-family: 'Material Icons';\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px;\n  line-height: 1;\n  letter-spacing: normal;\n  text-transform: none;\n  display: inline-block;\n  white-space: nowrap;\n  word-wrap: normal;\n  direction: ltr;\n  -webkit-font-feature-settings: 'liga';\n  -webkit-font-smoothing: antialiased;\n}\n\n.elevation-1 {\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);\n}\n\n.elevation-2 {\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\n}\n\n.app-bar {\n  background: linear-gradient(135deg, hsl(210, 100%, 40%) 0%, hsl(210, 100%, 35%) 100%);\n}\n\n.status-online {\n  background: hsl(120, 60%, 50%);\n}\n\n.status-offline {\n  background: hsl(0, 60%, 50%);\n}\n\n.status-syncing {\n  background: hsl(45, 100%, 50%);\n}\n\n@keyframes spin {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}\n\n.animate-spin {\n  animation: spin 1s linear infinite;\n}\n","size_bytes":5379},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"docs/tech/capability_matrix.md":{"content":"# Device Capability Matrix\n\nThis document outlines the device tier classification system and corresponding feature availability in Pharma-Empire OS.\n\n## Tier Classification\n\n### VALUE Tier\n**Hardware Requirements:**\n- RAM: < 4GB\n- CPU Cores: < 4 cores\n- WebGL: Not required\n\n**Target Devices:**\n- Entry-level smartphones (2-3GB RAM)\n- Basic tablets\n- Older devices (3+ years)\n\n**Features Enabled:**\n- ✅ Basic POS functionality\n- ✅ Manual product entry\n- ✅ Single-frame barcode capture\n- ✅ Cash payments\n- ✅ Offline inventory management\n- ❌ Continuous barcode scanning\n- ❌ Real-time camera preview animations\n- ❌ Advanced UI animations\n\n### MAINSTREAM Tier\n**Hardware Requirements:**\n- RAM: 4-7GB\n- CPU Cores: 4-5 cores\n- WebGL: Preferred\n\n**Target Devices:**\n- Mid-range smartphones (4-6GB RAM)\n- Standard tablets\n- Modern devices (1-3 years)\n\n**Features Enabled:**\n- ✅ All VALUE tier features\n- ✅ Continuous barcode scanning\n- ✅ 1080p camera preview\n- ✅ UPI Lite payments\n- ✅ Basic UI animations\n- ✅ Real-time stock updates\n- ❌ Advanced AI features\n\n### PREMIUM Tier\n**Hardware Requirements:**\n- RAM: ≥ 8GB\n- CPU Cores: ≥ 6 cores\n- WebGL: Required\n\n**Target Devices:**\n- High-end smartphones (8GB+ RAM)\n- Premium tablets\n- Latest flagship devices\n\n**Features Enabled:**\n- ✅ All MAINSTREAM tier features\n- ✅ Advanced UI animations\n- ✅ High refresh rate support\n- ✅ AI-powered inventory suggestions\n- ✅ OCR receipt scanning (future)\n- ✅ Voice commands (future)\n- ✅ Advanced analytics\n\n## Performance Targets\n\n| Tier | Cold Start | Scan Speed | Bill Generation |\n|------|-----------|------------|-----------------|\n| VALUE | ≤ 6s | Single capture | ≤ 15s |\n| MAINSTREAM | ≤ 4s | 2-3 fps | ≤ 10s |\n| PREMIUM | ≤ 3s | 5+ fps | ≤ 5s |\n\n## Feature Detection\n\n```typescript\nimport { capabilityService, DeviceTier } from '@/services/capability';\n\nconst tier = await capabilityService.getTier();\n\nif (tier === DeviceTier.VALUE) {\n  // Enable single-frame capture mode\n  enableSimpleScanning();\n} else {\n  // Enable continuous scanning\n  enableAdvancedScanning();\n}\n```\n\n## Progressive Enhancement\n\nThe system automatically detects device capabilities and enables features accordingly:\n\n1. **Runtime Detection**: Device specs are probed on first launch\n2. **Caching**: Results are cached for 24 hours to avoid repeated probing\n3. **Graceful Degradation**: Higher-tier features fail silently on lower-tier devices\n4. **User Preference**: Users can manually override tier detection in settings\n\n## Bundle Splitting Strategy\n\n- **Core Bundle**: Essential POS functionality (all tiers)\n- **Enhanced Bundle**: Camera and scanning features (MAINSTREAM+)\n- **Premium Bundle**: AI and advanced features (PREMIUM only)\n\nDynamic imports ensure only necessary code is loaded:\n\n```typescript\nif (await capabilityService.isPremiumTier()) {\n  const { AIAssistant } = await import('@/features/ai-assistant');\n  // Load premium features\n}\n```","size_bytes":2976},"docs/ux/pos_flow.md":{"content":"# POS Flow Documentation\n\n## Overview\n\nThe Point of Sale (POS) flow is designed for sub-15-second sales completion on VALUE tier devices, with progressive enhancement for higher-tier devices.\n\n## User Journey\n\n```\n[Home] → [POS Screen] → [Scan/Select] → [Review Bill] → [Payment] → [Receipt]\n  2s       3s            5s            2s          2s        1s\n```\n\n## Flow Sequence\n\n### 1. Entry Points\n- **Primary**: Bottom navigation POS tab\n- **Quick**: FAB button from home screen\n- **Gesture**: Swipe right on Bill Fast tile (mobile)\n\n### 2. Product Selection\n\n#### VALUE Tier (≤2GB RAM)\n```\n┌─────────────────┐\n│ Search Products │\n├─────────────────┤\n│ [Grid of Items] │\n│ ┌─────┬─────┐   │\n│ │Item1│Item2│   │\n│ └─────┴─────┘   │\n│ [Camera Button] │\n│  Single Capture │\n└─────────────────┘\n```\n\n#### MAINSTREAM/PREMIUM Tier (≥4GB RAM)\n```\n┌─────────────────┐\n│ Search Products │\n├─────────────────┤\n│ [Camera Preview]│\n│ ┌─────────────┐ │\n│ │ Live Video  │ │\n│ │ Scanning... │ │\n│ └─────────────┘ │\n│ [Product Grid]  │\n└─────────────────┘\n```\n\n### 3. Bill Management\n\n```\n┌─── Bill Drawer ───┐\n│ Item 1     ₹50.00 │\n│ [-] 2 [+]         │\n│ ─────────────────  │\n│ Item 2     ₹25.00 │\n│ [-] 1 [+]         │\n│ ─────────────────  │\n│ Total:     ₹75.00 │\n│ [Pay & Complete]  │\n└───────────────────┘\n```\n\n### 4. Payment Flow\n\n```\n┌─── Payment Modal ───┐\n│     ₹75.00          │\n│ ┌─────┬─────┐       │\n│ │ UPI │Cash │       │\n│ └─────┴─────┘       │\n│                     │\n│ [Pay ₹75.00]       │\n│ [Cancel]            │\n└─────────────────────┘\n```\n\n## Performance Targets\n\n| Action | VALUE | MAINSTREAM | PREMIUM |\n|--------|-------|------------|---------|\n| Screen Load | ≤3s | ≤2s | ≤1s |\n| Barcode Scan | Manual | ≤2s | ≤1s |\n| Add to Bill | ≤1s | ≤0.5s | ≤0.3s |\n| Payment | ≤2s | ≤1.5s | ≤1s |\n| **Total Sale** | **≤15s** | **≤10s** | **≤5s** |\n\n## FEFO Stock Logic\n\nFirst Expired, First Out (FEFO) is automatically applied:\n\n```typescript\n// Stock selection priority:\n1. Earliest expiry date\n2. Lowest stock quantity  \n3. Most recent batch\n```\n\n### Stock Scenarios\n\n#### Single Batch Available\n```\nProduct: Paracetamol 500mg\nBatch A: 50 units, Exp: 2025-12-01\n→ Use Batch A\n```\n\n#### Multiple Batches Available\n```\nProduct: Paracetamol 500mg  \nBatch A: 20 units, Exp: 2025-10-15\nBatch B: 80 units, Exp: 2025-12-01\n→ Use Batch A first (FEFO)\n```\n\n#### Insufficient Stock\n```\nProduct: Paracetamol 500mg\nBatch A: 5 units, Exp: 2025-10-15\nRequest: 10 units\n→ Error: \"Only 5 units available\"\n```\n\n## Error Handling\n\n### Network Errors\n- Offline mode: Queue in outbox\n- Auto-retry when online\n- User notification: \"Working offline\"\n\n### Camera Errors\n- Permission denied: Show manual entry\n- No camera: Fallback to product grid\n- Scan timeout: Manual barcode entry\n\n### Stock Errors\n- Out of stock: Show alert, suggest alternatives\n- Low stock: Warning but allow sale\n- Expired stock: Block sale, show warning\n\n## Accessibility\n\n### Keyboard Navigation\n- Tab order: Search → Scan → Products → Bill\n- Enter key: Add to bill / Checkout\n- Escape key: Close modals\n\n### Screen Reader Support\n- ARIA labels on all interactive elements\n- Live regions for dynamic content\n- Descriptive button text\n\n### Touch Targets\n- Minimum 44px touch targets\n- Swipe gestures for common actions\n- Long press for additional options\n\n## Testing Scenarios\n\n### Happy Path (≤15s)\n1. Open POS screen (3s)\n2. Scan barcode or tap product (5s)\n3. Review bill items (2s)\n4. Select payment method (2s)\n5. Complete payment (2s)\n6. Return to dashboard (1s)\n\n### Edge Cases\n- Multiple items with quantity changes\n- Payment method switching\n- Network interruption during sale\n- Camera permission denied\n- Low battery scanning\n\n## Analytics Events\n\n```typescript\n// Track performance metrics\ntrack('pos_sale_completed', {\n  duration_ms: 12000,\n  device_tier: 'VALUE',\n  items_count: 3,\n  payment_method: 'upi',\n  scan_method: 'manual'\n});\n```\n\n## Future Enhancements\n\n### Voice Commands (PREMIUM)\n- \"Add paracetamol to bill\"\n- \"Set quantity to 5\"\n- \"Checkout with UPI\"\n\n### AI Suggestions (PREMIUM)\n- Recommend frequently bought together\n- Suggest alternatives for out-of-stock\n- Predict next purchase\n\n### Bulk Operations (ALL)\n- Multi-select products\n- Bulk quantity adjustment\n- Quick preset combinations","size_bytes":5052},"client/src/components/bottom-navigation.tsx":{"content":"import { Link, useLocation } from 'wouter';\n\nexport function BottomNavigation() {\n  const [location] = useLocation();\n\n  const navItems = [\n    { path: '/', icon: 'home', label: 'Home' },\n    { path: '/inventory', icon: 'inventory_2', label: 'Products' },\n    { path: '/ops', icon: 'business_center', label: 'Ops' },\n    { path: '/ai-assistant', icon: 'smart_toy', label: 'AI' },\n    { path: '/settings', icon: 'settings', label: 'Settings' },\n  ];\n\n  return (\n    <nav className=\"bg-card border-t border-border px-4 py-2 elevation-2\" data-testid=\"bottom-navigation\">\n      <div className=\"flex justify-around\">\n        {navItems.map(({ path, icon, label }) => (\n          <Link key={path} href={path} data-testid={`nav-${label.toLowerCase()}`}>\n            <div className={`flex flex-col items-center space-y-1 py-2 px-4 transition-colors cursor-pointer ${\n              location === path ? 'text-primary' : 'text-muted-foreground hover:text-foreground'\n            }`}>\n              <span className=\"material-icons\">{icon}</span>\n              <span className=\"text-xs font-medium\">{label}</span>\n            </div>\n          </Link>\n        ))}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":1180},"client/src/components/camera-permission-modal.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface CameraPermissionModalProps {\n  isOpen: boolean;\n  onOpenSettings: () => void;\n  onCancel: () => void;\n  onRetry: () => void;\n}\n\nexport function CameraPermissionModal({ \n  isOpen, \n  onOpenSettings, \n  onCancel, \n  onRetry \n}: CameraPermissionModalProps) {\n  if (!isOpen) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onCancel}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <span className=\"material-icons text-amber-500\">videocam_off</span>\n            <span>Camera Permission Required</span>\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          <div className=\"flex items-start space-x-3\">\n            <span className=\"material-icons text-primary mt-1\">info</span>\n            <div className=\"text-sm space-y-2\">\n              <p>\n                Camera access is needed to scan barcodes for quick product lookup.\n              </p>\n              <p className=\"text-muted-foreground\">\n                You can still add products manually using the search function.\n              </p>\n            </div>\n          </div>\n\n          <div className=\"bg-muted/50 rounded-lg p-3\">\n            <h4 className=\"font-medium text-sm mb-2\">To enable camera:</h4>\n            <ol className=\"text-sm text-muted-foreground space-y-1\">\n              <li>1. Click \"Open Settings\" below</li>\n              <li>2. Find \"Camera\" or \"Permissions\"</li>\n              <li>3. Allow camera access for this site</li>\n              <li>4. Return and click \"Try Again\"</li>\n            </ol>\n          </div>\n        </div>\n\n        <DialogFooter className=\"flex-col sm:flex-row gap-2\">\n          <Button\n            variant=\"outline\"\n            onClick={onOpenSettings}\n            data-testid=\"open-camera-settings\"\n          >\n            <span className=\"material-icons mr-2 text-sm\">settings</span>\n            Open Settings\n          </Button>\n          <Button\n            variant=\"outline\"\n            onClick={onCancel}\n            className=\"w-full sm:w-auto\"\n            data-testid=\"continue-without-camera\"\n          >\n            Continue Without Camera\n          </Button>\n          <div className=\"flex gap-2 w-full sm:w-auto\">\n            <Button\n              variant=\"secondary\"\n              onClick={onOpenSettings}\n              className=\"flex-1 sm:flex-none\"\n              data-testid=\"open-settings\"\n            >\n              Open Settings\n            </Button>\n            <Button\n              onClick={onRetry}\n              className=\"flex-1 sm:flex-none\"\n              data-testid=\"retry-camera\"\n            >\n              Try Again\n            </Button>\n          </div>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":2981},"client/src/components/capability-badge.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { capabilityService, DeviceTier } from \"@/services/capability\";\n\nexport function CapabilityBadge() {\n  const [tier, setTier] = useState<DeviceTier | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const initTier = async () => {\n      try {\n        const detectedTier = await capabilityService.getTier();\n        setTier(detectedTier);\n        \n        // Log tier once and store in localStorage\n        const hasLogged = localStorage.getItem('capability_tier_logged');\n        if (!hasLogged) {\n          console.log(`Device capability tier: ${detectedTier}`);\n          localStorage.setItem('capability_tier_logged', 'true');\n          localStorage.setItem('device_tier', detectedTier);\n        }\n      } catch (error) {\n        console.error('Failed to detect device tier:', error);\n        setTier(DeviceTier.VALUE); // Fallback\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    initTier();\n  }, []);\n\n  if (loading || !tier) {\n    return null;\n  }\n\n  const getTierColor = (tier: DeviceTier) => {\n    switch (tier) {\n      case DeviceTier.PREMIUM:\n        return \"bg-purple-100 text-purple-800 border-purple-200\";\n      case DeviceTier.MAINSTREAM:\n        return \"bg-blue-100 text-blue-800 border-blue-200\";\n      case DeviceTier.VALUE:\n        return \"bg-gray-100 text-gray-800 border-gray-200\";\n      default:\n        return \"bg-gray-100 text-gray-800 border-gray-200\";\n    }\n  };\n\n  const getTierIcon = (tier: DeviceTier) => {\n    switch (tier) {\n      case DeviceTier.PREMIUM:\n        return \"diamond\";\n      case DeviceTier.MAINSTREAM:\n        return \"star\";\n      case DeviceTier.VALUE:\n        return \"circle\";\n      default:\n        return \"circle\";\n    }\n  };\n\n  return (\n    <Badge \n      variant=\"outline\" \n      className={`${getTierColor(tier)} text-xs flex items-center space-x-1`}\n      data-testid=\"capability-badge\"\n    >\n      <span className=\"material-icons text-xs\">{getTierIcon(tier)}</span>\n      <span>{tier}</span>\n    </Badge>\n  );\n}","size_bytes":2113},"client/src/components/credibility-ribbon.tsx":{"content":"export function CredibilityRibbon() {\n  return (\n    <div className=\"bg-muted/50 border-y border-border px-4 py-2\" data-testid=\"credibility-ribbon\">\n      <div className=\"flex items-center justify-center space-x-2 text-sm text-muted-foreground\">\n        <span className=\"text-yellow-500\">★</span>\n        <span className=\"font-medium\">4.8</span>\n        <span>(12,345 chemists)</span>\n        <span>•</span>\n        <span>Trusted since 2025</span>\n      </div>\n    </div>\n  );\n}","size_bytes":482},"client/src/components/offline-indicator.tsx":{"content":"import { useOffline } from '@/hooks/use-offline';\nimport { useEffect, useState } from 'react';\n\nexport function OfflineIndicator() {\n  const { isOffline } = useOffline();\n  const [show, setShow] = useState(false);\n\n  useEffect(() => {\n    if (isOffline) {\n      setShow(true);\n      // Hide after 3 seconds\n      const timeout = setTimeout(() => setShow(false), 3000);\n      return () => clearTimeout(timeout);\n    } else {\n      setShow(false);\n    }\n  }, [isOffline]);\n\n  if (!show) return null;\n\n  return (\n    <div \n      className=\"fixed top-16 left-4 right-4 bg-destructive text-destructive-foreground p-3 rounded-lg elevation-2 z-50\"\n      data-testid=\"offline-indicator\"\n    >\n      <div className=\"flex items-center space-x-2\">\n        <span className=\"material-icons\">cloud_off</span>\n        <span className=\"text-sm font-medium\">\n          You're offline. Changes will sync when connected.\n        </span>\n      </div>\n    </div>\n  );\n}\n","size_bytes":949},"client/src/components/receiving-fab.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link } from \"wouter\";\n\nexport function ReceivingFAB() {\n  const [isReceivingEnabled, setIsReceivingEnabled] = useState(false);\n\n  useEffect(() => {\n    // Check if receiving beta is enabled in settings\n    const receivingEnabled = localStorage.getItem('enableReceivingBeta');\n    setIsReceivingEnabled(receivingEnabled === 'true');\n  }, []);\n\n  // Don't render if receiving is not enabled\n  if (!isReceivingEnabled) {\n    return null;\n  }\n\n  return (\n    <Link href=\"/receive-stock\">\n      <button \n        className=\"fixed bottom-36 right-4 w-12 h-12 bg-blue-600 text-white rounded-full elevation-2 hover:elevation-3 transition-all duration-200 flex items-center justify-center\"\n        data-testid=\"fab-receiving\"\n        title=\"Receive Stock\"\n      >\n        <span className=\"material-icons\">inbox</span>\n      </button>\n    </Link>\n  );\n}","size_bytes":896},"client/src/components/sync-status.tsx":{"content":"import { useSyncStatus } from '@/hooks/use-sync-status';\nimport { CapabilityBadge } from '@/components/capability-badge';\n\nexport function SyncStatus() {\n  const { isOnline, pendingItems, forceSync } = useSyncStatus();\n\n  return (\n    <div className=\"flex items-center space-x-2\">\n      <div className=\"flex items-center space-x-1\">\n        <div \n          className={`w-2 h-2 rounded-full ${\n            isOnline ? 'status-online' : 'status-offline'\n          }`} \n          data-testid=\"connection-status-indicator\"\n        />\n        <span className=\"text-xs\" data-testid=\"connection-status-text\">\n          {isOnline ? 'Online' : 'Offline'}\n        </span>\n      </div>\n      {pendingItems > 0 && (\n        <span className=\"text-xs bg-yellow-100 text-yellow-800 px-2 py-1 rounded\" data-testid=\"pending-items\">\n          {pendingItems} pending\n        </span>\n      )}\n      <button \n        className=\"p-1 rounded-full hover:bg-white/10 transition-colors\" \n        onClick={forceSync}\n        data-testid=\"button-sync\"\n      >\n        <span className=\"material-icons text-sm\">sync</span>\n      </button>\n      <CapabilityBadge />\n    </div>\n  );\n}\n","size_bytes":1152},"client/src/components/urgency-badge.tsx":{"content":"export function UrgencyBadge() {\n  return (\n    <div className=\"mx-4 mb-4\" data-testid=\"urgency-badge\">\n      <div className=\"bg-gradient-to-r from-purple-500/20 to-pink-500/20 border border-purple-300 rounded-lg p-3 text-center\">\n        <div className=\"flex items-center justify-center space-x-2\">\n          <span className=\"text-purple-600 font-semibold\">Free 14-day trial</span>\n          <span className=\"text-muted-foreground\">•</span>\n          <span className=\"text-destructive font-medium\">Ends 30 Sep</span>\n          <span className=\"text-destructive\">▶</span>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":621},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-offline.ts":{"content":"import { useState, useEffect } from 'react';\n\nexport function useOffline() {\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n\n  useEffect(() => {\n    const handleOnline = () => setIsOnline(true);\n    const handleOffline = () => setIsOnline(false);\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  return {\n    isOnline,\n    isOffline: !isOnline\n  };\n}\n","size_bytes":584},"client/src/hooks/use-sync-status.ts":{"content":"import { useState, useEffect } from 'react';\nimport { syncWorker } from '@/lib/sync-worker';\n\nexport function useSyncStatus() {\n  const [syncStatus, setSyncStatus] = useState(() => syncWorker.getSyncStatus());\n\n  useEffect(() => {\n    const updateStatus = () => {\n      setSyncStatus(syncWorker.getSyncStatus());\n    };\n\n    // Update status every 5 seconds\n    const interval = setInterval(updateStatus, 5000);\n\n    // Listen for online/offline events\n    const handleOnline = () => updateStatus();\n    const handleOffline = () => updateStatus();\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    return () => {\n      clearInterval(interval);\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  const forceSync = async () => {\n    await syncWorker.forcSync();\n    setSyncStatus(syncWorker.getSyncStatus());\n  };\n\n  return {\n    ...syncStatus,\n    forceSync\n  };\n}\n","size_bytes":1015},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/ai-assistant.ts":{"content":"// AI Assistant hooks for future on-device LLM integration\nexport interface AIAssistantContext {\n  currentScreen?: string;\n  recentActions?: string[];\n  inventory?: any[];\n  currentSale?: any;\n}\n\nexport interface AIAssistant {\n  ask(text: string, context?: AIAssistantContext): Promise<string>;\n}\n\n// Stubbed local AI implementation\nexport class LocalAIAssistant implements AIAssistant {\n  async ask(text: string, context?: AIAssistantContext): Promise<string> {\n    // TODO: Implement on-device LLM integration\n    console.log('Local AI Assistant - Question:', text, 'Context:', context);\n    \n    // For now, return a placeholder response\n    return \"AI Assistant is not yet implemented. This will integrate with on-device LLM in future iterations.\";\n  }\n}\n\n// Remote OpenAI implementation\nexport class RemoteOpenAIAssistant implements AIAssistant {\n  private apiKey: string;\n\n  constructor() {\n    this.apiKey = import.meta.env.VITE_OPENAI_API_KEY || \"\";\n  }\n\n  async ask(text: string, context?: AIAssistantContext): Promise<string> {\n    console.log('Remote AI Assistant - Question:', text, 'Context:', context);\n    \n    try {\n      const systemPrompt = this.buildSystemPrompt(context);\n      \n      const response = await fetch('/api/ai/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          message: text,\n          systemPrompt,\n          context\n        })\n      });\n      \n      if (!response.ok) {\n        throw new Error(`API request failed: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      return data.response || 'Sorry, I couldn\\'t process your request.';\n      \n    } catch (error) {\n      console.error('AI Assistant error:', error);\n      return 'I\\'m having trouble connecting right now. Please try again in a moment.';\n    }\n  }\n  \n  private buildSystemPrompt(context?: AIAssistantContext): string {\n    let prompt = `You are an AI assistant for AushadiExpress, a pharmacy Point of Sale system. You help pharmacists with:\\n\\n- Medicine information and drug interactions\\n- Inventory management and stock levels\\n- Prescription validation and compliance\\n- Sales analytics and reporting\\n- OCR document processing insights\\n\\nProvide helpful, accurate, and professional responses. Keep answers concise and actionable.`;\n    \n    if (context) {\n      if (context.currentScreen) {\n        prompt += `\\n\\nUser is currently on: ${context.currentScreen} screen`;\n      }\n      if (context.inventory && context.inventory.length > 0) {\n        prompt += `\\n\\nCurrent inventory items: ${context.inventory.slice(0, 5).map(item => item.name).join(', ')}`;\n      }\n      if (context.currentSale) {\n        prompt += `\\n\\nCurrent sale in progress with ${context.currentSale.items?.length || 0} items`;\n      }\n      if (context.recentActions && context.recentActions.length > 0) {\n        prompt += `\\n\\nRecent actions: ${context.recentActions.slice(0, 3).join(', ')}`;\n      }\n    }\n    \n    return prompt;\n  }\n}\n\n// Voice recognition implementation\nexport class VoiceAssistant {\n  private recognition: any = null;\n  private isListening = false;\n  private onResult?: (text: string) => void;\n  private onError?: (error: any) => void;\n\n  async startListening(onResult?: (text: string) => void, onError?: (error: any) => void): Promise<void> {\n    console.log('Voice Assistant - Starting to listen...');\n    \n    if (!await this.isSupported()) {\n      throw new Error('Speech recognition not supported');\n    }\n    \n    this.onResult = onResult;\n    this.onError = onError;\n    \n    const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;\n    this.recognition = new SpeechRecognition();\n    \n    this.recognition.continuous = false;\n    this.recognition.interimResults = false;\n    this.recognition.lang = 'en-US';\n    \n    this.recognition.onstart = () => {\n      console.log('Voice recognition started');\n      this.isListening = true;\n    };\n    \n    this.recognition.onresult = (event: any) => {\n      const transcript = event.results[0][0].transcript;\n      console.log('Voice recognition result:', transcript);\n      if (this.onResult) {\n        this.onResult(transcript);\n      }\n    };\n    \n    this.recognition.onerror = (event: any) => {\n      console.error('Voice recognition error:', event.error);\n      this.isListening = false;\n      if (this.onError) {\n        this.onError(event.error);\n      }\n    };\n    \n    this.recognition.onend = () => {\n      console.log('Voice recognition ended');\n      this.isListening = false;\n    };\n    \n    this.recognition.start();\n  }\n\n  async stopListening(): Promise<void> {\n    console.log('Voice Assistant - Stopped listening');\n    if (this.recognition && this.isListening) {\n      this.recognition.stop();\n    }\n  }\n\n  async isSupported(): Promise<boolean> {\n    return 'webkitSpeechRecognition' in window || 'SpeechRecognition' in window;\n  }\n  \n  getListeningState(): boolean {\n    return this.isListening;\n  }\n}\n\n// OCR (Optical Character Recognition) implementation\nexport class OCRAssistant {\n  async scanText(imageData: string | File): Promise<string> {\n    console.log('OCR Assistant - Scanning image:', imageData);\n    \n    try {\n      // Use existing OCR infrastructure\n      const { ocrImage } = await import('../platform/ocr');\n      \n      let imageUri: string;\n      if (typeof imageData === 'string') {\n        imageUri = imageData;\n      } else {\n        // Convert File to data URL\n        imageUri = await this.fileToDataUrl(imageData);\n      }\n      \n      const extractedText = await ocrImage(imageUri);\n      console.log('OCR Assistant - Text extracted:', extractedText.length, 'characters');\n      \n      return extractedText;\n      \n    } catch (error) {\n      console.error('OCR Assistant - Scan failed:', error);\n      throw new Error(`OCR scan failed: ${error}`);\n    }\n  }\n\n  async scanBarcode(imageData: string | File): Promise<string> {\n    console.log('OCR Assistant - Scanning barcode:', imageData);\n    \n    try {\n      // First extract text using OCR\n      const text = await this.scanText(imageData);\n      \n      // Look for barcode patterns in the extracted text\n      const barcodePatterns = [\n        /\\b\\d{12,14}\\b/, // EAN-13, UPC-A\n        /\\b\\d{8}\\b/,     // EAN-8\n        /\\b[A-Z0-9]{6,}\\b/ // General alphanumeric codes\n      ];\n      \n      for (const pattern of barcodePatterns) {\n        const match = text.match(pattern);\n        if (match) {\n          console.log('OCR Assistant - Barcode found:', match[0]);\n          return match[0];\n        }\n      }\n      \n      throw new Error('No barcode pattern found in image');\n      \n    } catch (error) {\n      console.error('OCR Assistant - Barcode scan failed:', error);\n      throw new Error(`Barcode scan failed: ${error}`);\n    }\n  }\n  \n  private fileToDataUrl(file: File): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = (e) => resolve(e.target?.result as string);\n      reader.onerror = reject;\n      reader.readAsDataURL(file);\n    });\n  }\n}\n\n// Export instances\nexport const localAI = new LocalAIAssistant();\nexport const remoteAI = new RemoteOpenAIAssistant();\nexport const voiceAssistant = new VoiceAssistant();\nexport const ocrAssistant = new OCRAssistant();\n","size_bytes":7384},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/storage.ts":{"content":"// Local storage wrapper for offline data persistence\nexport interface LocalStorageData {\n  products: any[];\n  stock: any[];\n  sales: any[];\n  outbox: any[];\n}\n\nexport class LocalStorage {\n  private storageKey = 'pharma-empire-data';\n\n  getData(): LocalStorageData {\n    try {\n      const data = localStorage.getItem(this.storageKey);\n      if (!data || data === 'undefined' || data === 'null') {\n        return {\n          products: [],\n          stock: [],\n          sales: [],\n          outbox: []\n        };\n      }\n      return JSON.parse(data);\n    } catch (error) {\n      // Only log actual errors, not empty/null data\n      if (error instanceof SyntaxError) {\n        console.error('Failed to parse local storage data:', error);\n      }\n      return {\n        products: [],\n        stock: [],\n        sales: [],\n        outbox: []\n      };\n    }\n  }\n\n  setData(data: LocalStorageData): void {\n    try {\n      localStorage.setItem(this.storageKey, JSON.stringify(data));\n    } catch (error) {\n      console.error('Failed to save data to local storage:', error);\n    }\n  }\n\n  addToOutbox(tableName: string, rowId: string, operation: string, payload: any): void {\n    const data = this.getData();\n    const outboxItem = {\n      id: `${Date.now()}-${Math.random()}`,\n      tableName,\n      rowId,\n      operation,\n      payload: JSON.stringify(payload),\n      timestamp: new Date().toISOString(),\n      synced: false\n    };\n    \n    data.outbox.push(outboxItem);\n    this.setData(data);\n  }\n\n  getUnsyncedItems(): any[] {\n    const data = this.getData();\n    return data.outbox.filter(item => !item.synced);\n  }\n\n  markItemSynced(itemId: string): void {\n    const data = this.getData();\n    const item = data.outbox.find(item => item.id === itemId);\n    if (item) {\n      item.synced = true;\n      this.setData(data);\n    }\n  }\n\n  clearSyncedItems(): void {\n    const data = this.getData();\n    data.outbox = data.outbox.filter(item => !item.synced);\n    this.setData(data);\n  }\n}\n\nexport const localStorage = new LocalStorage();\n","size_bytes":2034},"client/src/lib/sync-worker.ts":{"content":"import { apiRequest } from \"./queryClient\";\nimport { localStorage } from \"./storage\";\n\nexport class SyncWorker {\n  private isOnline: boolean = navigator.onLine;\n  private syncInterval: number = 30000; // 30 seconds\n  private intervalId: number | null = null;\n\n  constructor() {\n    this.setupEventListeners();\n    this.startSyncWorker();\n  }\n\n  private setupEventListeners(): void {\n    window.addEventListener('online', () => {\n      this.isOnline = true;\n      console.log('Back online - resuming sync');\n      this.startSyncWorker();\n    });\n\n    window.addEventListener('offline', () => {\n      this.isOnline = false;\n      console.log('Gone offline - pausing sync');\n      this.stopSyncWorker();\n    });\n  }\n\n  private startSyncWorker(): void {\n    if (this.intervalId || !this.isOnline) return;\n\n    this.intervalId = window.setInterval(() => {\n      this.performSync();\n    }, this.syncInterval);\n\n    // Perform initial sync\n    this.performSync();\n  }\n\n  private stopSyncWorker(): void {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n      this.intervalId = null;\n    }\n  }\n\n  private async performSync(): Promise<void> {\n    if (!this.isOnline) return;\n\n    try {\n      const unsyncedItems = localStorage.getUnsyncedItems();\n      \n      if (unsyncedItems.length === 0) {\n        console.log('No items to sync');\n        return;\n      }\n\n      console.log(`Syncing ${unsyncedItems.length} items...`);\n\n      // Send batch sync request\n      const response = await apiRequest('POST', '/api/sync/batch', {\n        items: unsyncedItems\n      });\n\n      if (response.ok) {\n        // Mark items as synced\n        unsyncedItems.forEach(item => {\n          localStorage.markItemSynced(item.id);\n        });\n        \n        console.log(`Successfully synced ${unsyncedItems.length} items`);\n        \n        // Clean up synced items after successful sync\n        setTimeout(() => {\n          localStorage.clearSyncedItems();\n        }, 5000);\n      } else {\n        console.error('Sync failed:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Sync error:', error);\n    }\n  }\n\n  public forcSync(): Promise<void> {\n    return this.performSync();\n  }\n\n  public isWorkerRunning(): boolean {\n    return this.intervalId !== null;\n  }\n\n  public getSyncStatus() {\n    const unsyncedItems = localStorage.getUnsyncedItems();\n    return {\n      isOnline: this.isOnline,\n      pendingItems: unsyncedItems.length,\n      isWorkerRunning: this.isWorkerRunning(),\n      lastSync: new Date().toISOString()\n    };\n  }\n}\n\nexport const syncWorker = new SyncWorker();\n","size_bytes":2595},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useState, useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link, useLocation } from \"wouter\";\nimport { SyncStatus } from \"@/components/sync-status\";\nimport { OfflineIndicator } from \"@/components/offline-indicator\";\nimport { CredibilityRibbon } from \"@/components/credibility-ribbon\";\nimport { tw } from \"@/lib/theme\";\nimport { SmartActionFAB } from \"@/components/smart-action-fab\";\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n  const [trialBadgeHidden, setTrialBadgeHidden] = useState(false);\n  const [fabTipShown, setFabTipShown] = useState(false);\n  const [showFabTip, setShowFabTip] = useState(false);\n\n  // Check localStorage for persistent flags\n  useEffect(() => {\n    const hiddenFlag = localStorage.getItem('trialBadgeHidden');\n    const tipFlag = localStorage.getItem('fabTipShown');\n    setTrialBadgeHidden(hiddenFlag === 'true');\n    setFabTipShown(tipFlag === 'true');\n    \n    // Show FAB tip if not shown before\n    if (tipFlag !== 'true') {\n      const showTimer = setTimeout(() => setShowFabTip(true), 1000);\n      const hideTimer = setTimeout(() => {\n        setShowFabTip(false);\n        setFabTipShown(true);\n        localStorage.setItem('fabTipShown', 'true');\n      }, 4000);\n      \n      return () => {\n        clearTimeout(showTimer);\n        clearTimeout(hideTimer);\n      };\n    }\n  }, []);\n\n  const hideTrialBadge = () => {\n    setTrialBadgeHidden(true);\n    localStorage.setItem('trialBadgeHidden', 'true');\n  };\n\n  const hideFabTip = () => {\n    setShowFabTip(false);\n    setFabTipShown(true);\n    localStorage.setItem('fabTipShown', 'true');\n  };\n\n  const showCaptureActionSheet = () => {\n    // Get user role to determine default capture mode\n    const userRole = localStorage.getItem('userRole') || 'retailer';\n    \n    // For web, use a simple custom modal\n    const options = [\n      { label: 'Barcode (Quick Bill)', mode: 'barcode', icon: 'qr_code_scanner' },\n      { label: 'Invoice (Receive Stock)', mode: 'invoice', icon: 'receipt' },\n      { label: 'Prescription (Rx)', mode: 'prescription', icon: 'local_pharmacy' }\n    ];\n    \n    // Create action sheet overlay\n    const overlay = document.createElement('div');\n    overlay.style.cssText = `\n      position: fixed;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      background: rgba(0,0,0,0.5);\n      z-index: 9999;\n      display: flex;\n      align-items: flex-end;\n      justify-content: center;\n      padding: 20px;\n    `;\n    \n    const sheet = document.createElement('div');\n    sheet.style.cssText = `\n      background: white;\n      border-radius: 16px 16px 0 0;\n      width: 100%;\n      max-width: 400px;\n      padding: 20px;\n      box-shadow: 0 -8px 32px rgba(0,0,0,0.1);\n    `;\n    \n    const title = document.createElement('h3');\n    title.textContent = 'What would you like to capture?';\n    title.style.cssText = 'margin: 0 0 16px 0; font-size: 18px; font-weight: 600; text-align: center;';\n    sheet.appendChild(title);\n    \n    options.forEach(option => {\n      const button = document.createElement('button');\n      button.style.cssText = `\n        width: 100%;\n        padding: 16px;\n        margin-bottom: 8px;\n        border: none;\n        border-radius: 12px;\n        background: #f8f9fa;\n        color: #333;\n        font-size: 16px;\n        font-weight: 500;\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n        gap: 12px;\n        transition: background-color 0.2s;\n      `;\n      \n      button.innerHTML = `\n        <span class=\"material-icons\" style=\"font-size: 24px; color: #007bff;\">${option.icon}</span>\n        ${option.label}\n      `;\n      \n      button.addEventListener('mouseenter', () => {\n        button.style.backgroundColor = '#e9ecef';\n      });\n      \n      button.addEventListener('mouseleave', () => {\n        button.style.backgroundColor = '#f8f9fa';\n      });\n      \n      button.addEventListener('click', () => {\n        setLocation(`/capture?mode=${option.mode}`);\n        document.body.removeChild(overlay);\n      });\n      \n      sheet.appendChild(button);\n    });\n    \n    // Cancel button\n    const cancelButton = document.createElement('button');\n    cancelButton.textContent = 'Cancel';\n    cancelButton.style.cssText = `\n      width: 100%;\n      padding: 16px;\n      margin-top: 8px;\n      border: none;\n      border-radius: 12px;\n      background: #dc3545;\n      color: white;\n      font-size: 16px;\n      font-weight: 500;\n      cursor: pointer;\n    `;\n    \n    cancelButton.addEventListener('click', () => {\n      document.body.removeChild(overlay);\n    });\n    \n    sheet.appendChild(cancelButton);\n    overlay.appendChild(sheet);\n    \n    // Close on overlay click\n    overlay.addEventListener('click', (e) => {\n      if (e.target === overlay) {\n        document.body.removeChild(overlay);\n      }\n    });\n    \n    document.body.appendChild(overlay);\n  };\n\n  // Fetch data\n  const { data: products = [] } = useQuery({\n    queryKey: ['/api/products'],\n  });\n\n  const { data: stock = [] } = useQuery({\n    queryKey: ['/api/stock'],\n  });\n\n  const { data: sales = [] } = useQuery({\n    queryKey: ['/api/sales'],\n  });\n\n  const { data: todaysSales } = useQuery({\n    queryKey: ['/api/sales/today'],\n  });\n\n\n  // Calculate stats\n  const lowStockCount = Array.isArray(stock) ? stock.filter((s: any) => s.quantity < 10).length : 0;\n  const recentSales = Array.isArray(sales) ? sales.slice(0, 3) : [];\n\n  return (\n    <div className=\"flex flex-col h-screen overflow-hidden\">\n      <OfflineIndicator />\n      \n      {/* App Bar */}\n      <header className=\"app-bar text-primary-foreground px-4 py-3 elevation-2\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <span className=\"material-icons text-xl\">medication</span>\n            <h1 className={`${tw.headingLg} text-primary-foreground`} data-testid=\"app-title\">AushadiExpress</h1>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\" data-testid=\"headerOnline\">\n            <div className={tw.statusOnline}></div>\n            <span className={`${tw.bodySm} text-primary-foreground/80`}>Online</span>\n            <button className=\"text-primary-foreground/80 hover:text-primary-foreground transition-colors\">\n              <span className=\"material-icons text-lg\">refresh</span>\n            </button>\n          </div>\n        </div>\n      </header>\n\n      <CredibilityRibbon />\n\n      {/* Main Content */}\n      <main className=\"flex-1 overflow-y-auto space-y-6 p-4\">\n        \n        {/* Hero Action */}\n        <section>\n          <div \n            className=\"bg-gradient-to-r from-primary to-primary/80 text-primary-foreground p-6 rounded-xl elevation-2 hover:elevation-3 transition-all duration-200 cursor-pointer relative\" \n            data-testid=\"button-bill-fast\"\n            onClick={() => setLocation('/pos')}\n            onTouchStart={(e) => {\n              const touch = e.touches[0];\n              const startX = touch.clientX;\n              const startY = touch.clientY;\n              const startTime = Date.now();\n              \n              const handleTouchMove = (moveEvent: TouchEvent) => {\n                moveEvent.preventDefault();\n              };\n              \n              const handleTouchEnd = (endEvent: TouchEvent) => {\n                const endX = endEvent.changedTouches[0].clientX;\n                const endY = endEvent.changedTouches[0].clientY;\n                const endTime = Date.now();\n                \n                const deltaX = endX - startX;\n                const deltaY = Math.abs(endY - startY);\n                const deltaTime = endTime - startTime;\n                \n                // Swipe right detection\n                if (deltaX > 100 && deltaY < 50 && deltaTime < 300) {\n                  setLocation('/pos');\n                }\n                \n                document.removeEventListener('touchmove', handleTouchMove);\n                document.removeEventListener('touchend', handleTouchEnd);\n              };\n              \n              document.addEventListener('touchmove', handleTouchMove, { passive: false });\n              document.addEventListener('touchend', handleTouchEnd);\n            }}\n          >\n              {!trialBadgeHidden && (\n                <button \n                  className=\"absolute top-2 right-2 px-2 py-0.5 rounded-full bg-orange-500/90 text-white text-[10px] leading-none flex items-center gap-1\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    hideTrialBadge();\n                  }}\n                  data-testid=\"trial-badge\"\n                >\n                  <span>Free 14-day trial</span>\n                  <span className=\"text-[8px]\">✕</span>\n                </button>\n              )}\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"text-4xl\">📷</div>\n                <div className=\"flex-1\">\n                  <h2 className=\"text-xl font-bold mb-1\">Bill Fast</h2>\n                  <p className=\"text-primary-foreground/90 text-sm\">Offline in 15 s – No Internet, No Hassle</p>\n                </div>\n                <div className=\"flex flex-col items-center\">\n                  <span className=\"material-icons text-2xl opacity-75\">arrow_forward</span>\n                  <span className=\"text-xs opacity-60 mt-1\">swipe →</span>\n                </div>\n              </div>\n            </div>\n        </section>\n        \n        {/* Dashboard Stats */}\n        <section className=\"grid grid-cols-2 gap-4\">\n          <Card className=\"elevation-1\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className={`${tw.body} text-muted-foreground`}>Today's Sales</p>\n                  <p className={`${tw.headingLg} font-bold text-foreground`} data-testid=\"todays-sales\">\n                    ₹{(todaysSales as any)?.total?.toFixed(2) || '0.00'}\n                  </p>\n                </div>\n                <span className=\"material-icons text-primary\">trending_up</span>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"elevation-1\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className={`${tw.body} text-muted-foreground`}>Low Stock Items</p>\n                  <Link href=\"/products?filter=lowStock\">\n                    <div className={`${tw.headingLg} font-bold text-gray-800 hover:underline cursor-pointer flex items-center space-x-1`} data-testid=\"button-reorder-now\">\n                      <span className=\"material-icons text-red-600 text-lg\">error_outline</span>\n                      <span>{lowStockCount > 0 ? 'Reorder Now' : '0'}</span>\n                    </div>\n                  </Link>\n                </div>\n                <span className=\"material-icons text-destructive\">warning</span>\n              </div>\n            </CardContent>\n          </Card>\n        </section>\n        \n        {/* Recent Transactions */}\n        <Card className=\"elevation-1\">\n          <div className=\"p-4 border-b border-border\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className={`${tw.headingMd}`}>Recent Transactions</h2>\n              <Link href=\"/sales\">\n                <div className=\"text-primary text-sm font-medium cursor-pointer hover:underline\" data-testid=\"link-view-all\">\n                  View All\n                </div>\n              </Link>\n            </div>\n          </div>\n          \n          <div className=\"divide-y divide-border\">\n            {recentSales.length > 0 ? (\n              recentSales.map((sale: any) => (\n                <div key={sale.id} className=\"p-4 flex items-center justify-between hover:bg-muted/50 transition-colors\" data-testid={`transaction-${sale.id}`}>\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\n                      <span className=\"material-icons text-primary text-lg\">receipt</span>\n                    </div>\n                    <div>\n                      <p className=\"font-medium\">{sale.id.toUpperCase()}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {new Date(sale.date).toLocaleDateString()}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-semibold\">₹{sale.total.toFixed(2)}</p>\n                    <div className=\"flex items-center space-x-1\">\n                      <div className={`w-2 h-2 rounded-full ${sale.synced ? 'bg-green-500' : 'bg-yellow-500'}`}></div>\n                      <span className=\"text-xs text-muted-foreground\">\n                        {sale.synced ? 'Synced' : 'Pending'}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              ))\n            ) : (\n              <div className=\"p-4 text-center text-muted-foreground\">\n                No recent transactions\n              </div>\n            )}\n          </div>\n        </Card>\n        \n        \n        {/* Bottom spacing for FAB */}\n        <div className=\"h-20\"></div>\n      </main>\n\n      {/* Smart Action FAB */}\n      <SmartActionFAB \n        onAssistantOpen={() => toast({ title: \"AI Assistant\", description: \"Opening full-screen AI assistant...\" })}\n      />\n    </div>\n  );\n}\n","size_bytes":13904},"client/src/pages/inventory.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\";\nimport { ReceivingFAB } from \"@/components/receiving-fab\";\nimport { ActionSheet } from \"@/components/action-sheet\";\nimport { useState, useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\n\nexport default function Inventory() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [location] = useLocation();\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [demoToolsOpen, setDemoToolsOpen] = useState(false);\n  const [showActionSheet, setShowActionSheet] = useState(false);\n  \n  // Get filter from URL params\n  const urlParams = new URLSearchParams(window.location.search);\n  const filter = urlParams.get('filter');\n  \n  // Form state for adding products\n  const [productForm, setProductForm] = useState({\n    name: \"Aspirin 100mg\",\n    price: 15.00,\n    description: \"Pain relief medication\"\n  });\n\n  const [stockForm, setStockForm] = useState({\n    batchNumber: \"B2024003\",\n    quantity: 50,\n    expiryDate: \"2026-01-31\"\n  });\n  const { data: products = [], isLoading: productsLoading } = useQuery({\n    queryKey: ['/api/products'],\n  });\n\n  const { data: stock = [], isLoading: stockLoading } = useQuery({\n    queryKey: ['/api/stock'],\n  });\n\n  // Mutations for adding products\n  const createProduct = useMutation({\n    mutationFn: async (productData: any) => {\n      const response = await apiRequest('POST', '/api/products', productData);\n      return response.json();\n    },\n    onSuccess: (newProduct) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      toast({ title: \"Product created successfully\" });\n      \n      // Create stock entry for the product\n      createStock.mutate({\n        productId: newProduct.id,\n        ...stockForm,\n        expiryDate: new Date(stockForm.expiryDate).toISOString()\n      });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to create product\", \n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const createStock = useMutation({\n    mutationFn: async (stockData: any) => {\n      const response = await apiRequest('POST', '/api/stock', stockData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/stock'] });\n      toast({ title: \"Stock added successfully\" });\n      setShowAddForm(false);\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to add stock\", \n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleAddProduct = () => {\n    createProduct.mutate(productForm);\n  };\n\n  if (productsLoading || stockLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-screen\">\n        <div className=\"text-center\">\n          <span className=\"material-icons animate-spin text-4xl text-primary\">sync</span>\n          <p className=\"mt-2 text-muted-foreground\">Loading inventory...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const getProductStock = (productId: string) => {\n    return Array.isArray(stock) ? stock.filter((s: any) => s.productId === productId) : [];\n  };\n\n  const getTotalQuantity = (productId: string) => {\n    return getProductStock(productId).reduce((total: number, s: any) => total + s.quantity, 0);\n  };\n\n  // Filter products if low stock filter is applied\n  const filteredProducts = filter === 'lowStock' \n    ? (Array.isArray(products) ? products.filter((product: any) => getTotalQuantity(product.id) < 10) : [])\n    : (Array.isArray(products) ? products : []);\n\n  return (\n    <div className=\"p-4 space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold\" data-testid=\"inventory-title\">Products</h1>\n          {filter === 'lowStock' && (\n            <p className=\"text-sm text-destructive\">Showing low stock items</p>\n          )}\n        </div>\n        <span className=\"text-sm text-muted-foreground\" data-testid=\"product-count\">\n          {filteredProducts.length} products\n        </span>\n      </div>\n\n      <div className=\"space-y-4\">\n        {filteredProducts.length > 0 ? (\n          filteredProducts.map((product: any) => {\n            const productStock = getProductStock(product.id);\n            const totalQuantity = getTotalQuantity(product.id);\n            const isLowStock = totalQuantity < 10;\n\n            return (\n              <Card key={product.id} className=\"elevation-1\" data-testid={`product-${product.id}`}>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2 mb-2\">\n                        <h3 className=\"font-semibold text-lg\" data-testid={`product-name-${product.id}`}>\n                          {product.name}\n                        </h3>\n                        {isLowStock && (\n                          <Badge variant=\"destructive\" data-testid={`low-stock-badge-${product.id}`}>\n                            Low Stock\n                          </Badge>\n                        )}\n                      </div>\n                      \n                      <p className=\"text-muted-foreground mb-3\" data-testid={`product-description-${product.id}`}>\n                        {product.description}\n                      </p>\n                      \n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">Price</p>\n                          <p className=\"font-semibold text-primary\" data-testid={`product-price-${product.id}`}>\n                            ₹{product.price}\n                          </p>\n                        </div>\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">Total Quantity</p>\n                          <p className={`font-semibold ${isLowStock ? 'text-destructive' : 'text-foreground'}`} data-testid={`product-quantity-${product.id}`}>\n                            {totalQuantity}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {productStock.length > 0 && (\n                    <div className=\"mt-4 pt-4 border-t border-border\">\n                      <h4 className=\"text-sm font-medium text-muted-foreground mb-2\">Stock Batches</h4>\n                      <div className=\"space-y-2\">\n                        {productStock.map((s: any) => (\n                          <div key={s.id} className=\"flex items-center justify-between text-sm\" data-testid={`stock-${s.id}`}>\n                            <span className=\"font-medium\" data-testid={`batch-number-${s.id}`}>\n                              {s.batchNumber}\n                            </span>\n                            <div className=\"flex items-center space-x-4\">\n                              <span data-testid={`batch-quantity-${s.id}`}>\n                                Qty: {s.quantity}\n                              </span>\n                              <span className=\"text-muted-foreground\" data-testid={`batch-expiry-${s.id}`}>\n                                Exp: {new Date(s.expiryDate).toLocaleDateString()}\n                              </span>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            );\n          })\n        ) : (\n          <Card className=\"elevation-1\">\n            <CardContent className=\"p-8 text-center\">\n              <span className=\"material-icons text-6xl text-muted-foreground mb-4\">inventory_2</span>\n              <h3 className=\"text-lg font-semibold mb-2\">\n                {filter === 'lowStock' ? 'No low stock items' : 'No products yet'}\n              </h3>\n              <p className=\"text-muted-foreground\">\n                {filter === 'lowStock' \n                  ? 'Great! All products are well stocked.' \n                  : 'Add your first product using the + button below'}\n              </p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Demo Tools - Collapsible Section */}\n      <Collapsible open={demoToolsOpen} onOpenChange={setDemoToolsOpen}>\n        <Card className=\"elevation-1 border border-muted\">\n          <CollapsibleTrigger asChild>\n            <button className=\"w-full p-4 flex items-center justify-between hover:bg-muted/50 transition-colors\" data-testid=\"demo-tools-toggle\">\n              <h3 className=\"text-lg font-semibold text-muted-foreground\">Demo Tools</h3>\n              <span className={`material-icons transition-transform ${demoToolsOpen ? 'rotate-180' : ''}`}>\n                expand_more\n              </span>\n            </button>\n          </CollapsibleTrigger>\n          \n          <CollapsibleContent>\n            <div className=\"px-4 pb-4 border-t border-muted\">\n              <div className=\"pt-4 space-y-4\">\n                <div className=\"grid grid-cols-2 gap-3\">\n                  <div>\n                    <Label htmlFor=\"product-name\" className=\"text-sm font-medium text-muted-foreground mb-1\">Product Name</Label>\n                    <Input\n                      id=\"product-name\"\n                      value={productForm.name}\n                      onChange={(e) => setProductForm({...productForm, name: e.target.value})}\n                      placeholder=\"Enter product name\"\n                      data-testid=\"input-product-name\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"product-price\" className=\"text-sm font-medium text-muted-foreground mb-1\">Price (₹)</Label>\n                    <Input\n                      id=\"product-price\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={productForm.price}\n                      onChange={(e) => setProductForm({...productForm, price: parseFloat(e.target.value) || 0})}\n                      placeholder=\"0.00\"\n                      data-testid=\"input-product-price\"\n                    />\n                  </div>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"product-description\" className=\"text-sm font-medium text-muted-foreground mb-1\">Description</Label>\n                  <Input\n                    id=\"product-description\"\n                    value={productForm.description}\n                    onChange={(e) => setProductForm({...productForm, description: e.target.value})}\n                    placeholder=\"Product description\"\n                    data-testid=\"input-product-description\"\n                  />\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-3\">\n                  <div>\n                    <Label htmlFor=\"batch-number\" className=\"text-sm font-medium text-muted-foreground mb-1\">Batch Number</Label>\n                    <Input\n                      id=\"batch-number\"\n                      value={stockForm.batchNumber}\n                      onChange={(e) => setStockForm({...stockForm, batchNumber: e.target.value})}\n                      placeholder=\"Batch #\"\n                      data-testid=\"input-batch-number\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"quantity\" className=\"text-sm font-medium text-muted-foreground mb-1\">Quantity</Label>\n                    <Input\n                      id=\"quantity\"\n                      type=\"number\"\n                      value={stockForm.quantity}\n                      onChange={(e) => setStockForm({...stockForm, quantity: parseInt(e.target.value) || 0})}\n                      placeholder=\"0\"\n                      data-testid=\"input-quantity\"\n                    />\n                  </div>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"expiry-date\" className=\"text-sm font-medium text-muted-foreground mb-1\">Expiry Date</Label>\n                  <Input\n                    id=\"expiry-date\"\n                    type=\"date\"\n                    value={stockForm.expiryDate}\n                    onChange={(e) => setStockForm({...stockForm, expiryDate: e.target.value})}\n                    data-testid=\"input-expiry-date\"\n                  />\n                </div>\n                \n                <Button \n                  className=\"w-full py-3 elevation-1\" \n                  onClick={handleAddProduct}\n                  disabled={createProduct.isPending || createStock.isPending}\n                  data-testid=\"button-add-product\"\n                >\n                  <span className=\"flex items-center justify-center space-x-2\">\n                    <span className=\"material-icons\">add</span>\n                    <span>\n                      {createProduct.isPending || createStock.isPending ? 'Adding...' : 'Add Product & Stock'}\n                    </span>\n                  </span>\n                </Button>\n              </div>\n            </div>\n          </CollapsibleContent>\n        </Card>\n      </Collapsible>\n\n      {/* Single Floating Action Button */}\n      <button \n        className=\"fixed bottom-20 right-4 w-14 h-14 bg-primary text-primary-foreground rounded-full elevation-2 hover:elevation-3 transition-all duration-200 flex items-center justify-center\"\n        onClick={() => setShowActionSheet(true)}\n        data-testid=\"fab-products-menu\"\n      >\n        <span className=\"material-icons\">add</span>\n      </button>\n      \n      {/* Action Sheet */}\n      <ActionSheet\n        isOpen={showActionSheet}\n        onClose={() => setShowActionSheet(false)}\n        title=\"Add to Inventory\"\n        actions={[\n          {\n            label: \"Receive Stock\",\n            icon: \"inbox\",\n            onClick: () => {\n              // Navigate to ops with receive parameter\n              window.location.href = '/ops?initial=receive';\n            }\n          },\n          {\n            label: \"Add Product\",\n            icon: \"add_circle\",\n            onClick: () => {\n              setShowAddForm(true);\n            }\n          },\n          ...(process.env.NODE_ENV === 'development' ? [{\n            label: \"Quick Add Demo\",\n            icon: \"flash_on\",\n            onClick: () => {\n              setDemoToolsOpen(!demoToolsOpen);\n            }\n          }] : [])\n        ]}\n      />\n    </div>\n  );\n}\n","size_bytes":15103},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/pos.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { capabilityService, DeviceTier } from \"@/services/capability\";\nimport { CollectPaymentSheet } from \"@/components/payment/collect-payment-sheet\";\nimport { CameraPermissionModal } from \"@/components/camera-permission-modal\";\nimport type { Product, Stock } from \"@shared/schema\";\n\ninterface BillItem {\n  product: Product;\n  stock: Stock;\n  quantity: number;\n  price: number;\n}\n\ninterface BarcodeResult {\n  code: string;\n  productId?: string;\n}\n\nexport default function PosScreen() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, navigate] = useLocation();\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  \n  const [deviceTier, setDeviceTier] = useState<DeviceTier>(DeviceTier.VALUE);\n  const [billItems, setBillItems] = useState<BillItem[]>([]);\n  const [isScanning, setIsScanning] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [showBillDrawer, setShowBillDrawer] = useState(false);\n  const [cameraStream, setCameraStream] = useState<MediaStream | null>(null);\n  const [showPayment, setShowPayment] = useState(false);\n  const [showCameraPermission, setShowCameraPermission] = useState(false);\n  const [acceptOnlyCash, setAcceptOnlyCash] = useState(false);\n\n  // Fetch products and stock data\n  const { data: products = [] } = useQuery<Product[]>({\n    queryKey: ['/api/products']\n  });\n\n  const { data: stockData = [] } = useQuery<Stock[]>({\n    queryKey: ['/api/stock']\n  });\n\n  // Barcode lookup mutation\n  const barcodeLookup = useMutation({\n    mutationFn: async (barcode: string) => {\n      const response = await fetch('/api/barcode/lookup', {\n        method: 'POST',\n        body: JSON.stringify({ barcode }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n      return response.json();\n    },\n    onSuccess: (data: any) => {\n      if (data.productId) {\n        addProductToBill(data.productId);\n      } else {\n        toast({\n          title: \"Product not found\",\n          description: `No product found for barcode: ${data.barcode}`,\n          variant: \"destructive\"\n        });\n      }\n    },\n    onError: () => {\n      toast({\n        title: \"Scan failed\",\n        description: \"Unable to lookup barcode. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Complete sale mutation\n  const completeSale = useMutation({\n    mutationFn: async (saleData: any) => {\n      const response = await fetch('/api/sales', {\n        method: 'POST',\n        body: JSON.stringify(saleData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      setBillItems([]);\n      setShowBillDrawer(false);\n      toast({\n        title: \"Sale completed\",\n        description: \"Payment processed successfully\"\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/sales'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/stock'] });\n    }\n  });\n\n  // Initialize device capabilities and settings\n  useEffect(() => {\n    const initCapabilities = async () => {\n      const tier = await capabilityService.getTier();\n      setDeviceTier(tier);\n    };\n    \n    const cashOnlySettings = localStorage.getItem('acceptOnlyCash');\n    setAcceptOnlyCash(cashOnlySettings === 'true');\n    \n    initCapabilities();\n    \n    // Check for barcode result from scanner page\n    const urlParams = new URLSearchParams(window.location.search);\n    const productId = urlParams.get('productId');\n    const barcode = urlParams.get('barcode');\n    const productName = urlParams.get('productName');\n    \n    if (productId && barcode) {\n      // Clear URL params\n      window.history.replaceState({}, '', '/pos');\n      \n      // Add product to bill\n      addProductToBill(productId);\n      \n      toast({\n        title: \"Product scanned successfully!\",\n        description: `Added ${productName || 'product'} to your bill`,\n      });\n    }\n  }, []);\n\n  // Start camera for barcode scanning\n  const startCamera = async () => {\n    try {\n      const hasCamera = await capabilityService.hasCamera();\n      if (!hasCamera) {\n        toast({\n          title: \"Camera not available\",\n          description: \"No camera detected on this device\",\n          variant: \"destructive\"\n        });\n        return;\n      }\n\n      // Set video constraints based on device tier\n      const constraints = {\n        video: {\n          facingMode: 'environment',\n          width: deviceTier === DeviceTier.VALUE ? 720 : 1080,\n          height: deviceTier === DeviceTier.VALUE ? 480 : 720\n        }\n      };\n\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\n      setCameraStream(stream);\n      \n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n        videoRef.current.play();\n      }\n      \n      setIsScanning(true);\n      \n      // Start barcode detection\n      if (deviceTier !== DeviceTier.VALUE) {\n        startContinuousScanning();\n      }\n    } catch (error: any) {\n      console.error('Camera error:', error);\n      \n      if (error.name === 'NotAllowedError' || error.name === 'PermissionDeniedError') {\n        setShowCameraPermission(true);\n      } else {\n        toast({\n          title: \"Camera error\",\n          description: \"Unable to access camera. Please try again.\",\n          variant: \"destructive\"\n        });\n      }\n    }\n  };\n\n  const stopCamera = () => {\n    if (cameraStream) {\n      cameraStream.getTracks().forEach(track => track.stop());\n      setCameraStream(null);\n    }\n    setIsScanning(false);\n  };\n\n  const startContinuousScanning = () => {\n    // Simplified barcode detection for demo\n    // In production, this would use a library like ZXing or QuaggaJS\n    const detectBarcode = () => {\n      if (!isScanning || !videoRef.current || !canvasRef.current) return;\n\n      const video = videoRef.current;\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      if (ctx && video.readyState === video.HAVE_ENOUGH_DATA) {\n        canvas.width = video.videoWidth;\n        canvas.height = video.videoHeight;\n        ctx.drawImage(video, 0, 0);\n\n        // Simulate barcode detection (in real app, use proper barcode library)\n        // For demo, we'll simulate finding a barcode after 3 seconds\n        setTimeout(() => {\n          if (isScanning) {\n            const mockBarcode = \"1234567890123\";\n            barcodeLookup.mutate(mockBarcode);\n            stopCamera();\n          }\n        }, 3000);\n      }\n\n      if (isScanning) {\n        requestAnimationFrame(detectBarcode);\n      }\n    };\n\n    detectBarcode();\n  };\n\n  const captureFrame = () => {\n    // Single frame capture for VALUE tier devices\n    if (videoRef.current && canvasRef.current) {\n      const video = videoRef.current;\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      if (ctx) {\n        canvas.width = video.videoWidth;\n        canvas.height = video.videoHeight;\n        ctx.drawImage(video, 0, 0);\n\n        // Simulate barcode detection\n        const mockBarcode = \"1234567890123\";\n        barcodeLookup.mutate(mockBarcode);\n        stopCamera();\n      }\n    }\n  };\n\n  const addProductToBill = (productId: string) => {\n    const product = products.find(p => p.id === productId);\n    const availableStock = stockData.filter(s => s.productId === productId && s.quantity > 0);\n    \n    if (!product || availableStock.length === 0) {\n      toast({\n        title: \"Out of stock\",\n        description: \"This product is currently out of stock\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Use FEFO (First Expired, First Out) - find stock with earliest expiry\n    const stock = availableStock.sort((a, b) => {\n      const dateA = a.expiryDate ? new Date(a.expiryDate).getTime() : Infinity;\n      const dateB = b.expiryDate ? new Date(b.expiryDate).getTime() : Infinity;\n      return dateA - dateB;\n    })[0];\n\n    const existingItem = billItems.find(item => \n      item.product.id === productId && item.stock.id === stock.id\n    );\n\n    if (existingItem) {\n      if (existingItem.quantity < stock.quantity) {\n        setBillItems(items => \n          items.map(item =>\n            item.product.id === productId && item.stock.id === stock.id\n              ? { ...item, quantity: item.quantity + 1 }\n              : item\n          )\n        );\n      } else {\n        toast({\n          title: \"Insufficient stock\",\n          description: `Only ${stock.quantity} units available`,\n          variant: \"destructive\"\n        });\n      }\n    } else {\n      setBillItems(items => [...items, {\n        product,\n        stock,\n        quantity: 1,\n        price: product.price\n      }]);\n    }\n\n    setShowBillDrawer(true);\n  };\n\n  const updateQuantity = (productId: string, stockId: string, change: number) => {\n    setBillItems(items => \n      items.map(item => {\n        if (item.product.id === productId && item.stock.id === stockId) {\n          const newQuantity = Math.max(0, item.quantity + change);\n          const maxQuantity = item.stock.quantity;\n          \n          if (newQuantity > maxQuantity) {\n            toast({\n              title: \"Insufficient stock\",\n              description: `Only ${maxQuantity} units available`,\n              variant: \"destructive\"\n            });\n            return item;\n          }\n          \n          return { ...item, quantity: newQuantity };\n        }\n        return item;\n      }).filter(item => item.quantity > 0)\n    );\n  };\n\n  const getBillTotal = () => {\n    return billItems.reduce((total, item) => total + (item.price * item.quantity), 0);\n  };\n\n  const handleCheckout = () => {\n    setShowPayment(true);\n  };\n\n  const handlePaymentComplete = (method: 'cash' | 'upi' | 'card') => {\n    const saleData = {\n      total: getBillTotal(),\n      items: JSON.stringify(billItems.map(item => ({\n        productId: item.product.id,\n        stockId: item.stock.id,\n        quantity: item.quantity,\n        price: item.price,\n        paymentMethod: method\n      })))\n    };\n    \n    setShowPayment(false);\n    completeSale.mutate(saleData);\n  };\n\n  const handlePaymentCancel = () => {\n    setShowPayment(false);\n  };\n\n  const handleOpenCameraSettings = () => {\n    // Try to open system camera settings\n    if (typeof window !== 'undefined') {\n      // For browsers, we can't directly open camera settings\n      // but we can provide guidance\n      window.open('chrome://settings/content/camera', '_blank');\n    }\n  };\n\n  const handleCameraPermissionRetry = () => {\n    setShowCameraPermission(false);\n    // Small delay before retrying\n    setTimeout(() => {\n      startCamera();\n    }, 500);\n  };\n\n\n  const filteredProducts = products.filter(product =>\n    product.name.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  return (\n    <div className=\"h-screen flex flex-col\">\n      {/* Header */}\n      <div className=\"p-4 border-b border-border bg-card\">\n        <div className=\"flex items-center justify-between\">\n          <h1 className=\"text-xl font-bold\" data-testid=\"pos-title\">Point of Sale</h1>\n          <Badge variant=\"outline\" className=\"text-xs\">\n            {deviceTier} TIER\n          </Badge>\n        </div>\n      </div>\n\n      <div className=\"flex-1 flex\">\n        {/* Main Content */}\n        <div className=\"flex-1 flex flex-col\">\n          {/* Search and Scan Bar */}\n          <div className=\"p-4 border-b border-border\">\n            <div className=\"flex space-x-2\">\n              <Input\n                placeholder=\"Search products...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"flex-1\"\n                data-testid=\"search-products\"\n              />\n              <Button\n                onClick={() => {\n                  console.log('[POS] Camera button clicked - navigating to barcode capture');\n                  navigate('/capture?mode=barcode');\n                }}\n                variant=\"default\"\n                data-testid=\"scan-button\"\n              >\n                <span className=\"material-icons\">qr_code_scanner</span>\n              </Button>\n            </div>\n          </div>\n\n          {/* Camera View */}\n          {isScanning && (\n            <div className=\"p-4 bg-black\">\n              <div className=\"relative\">\n                <video\n                  ref={videoRef}\n                  className=\"w-full h-64 object-cover rounded\"\n                  autoPlay\n                  playsInline\n                  muted\n                />\n                <canvas ref={canvasRef} className=\"hidden\" />\n                \n                {deviceTier === DeviceTier.VALUE && (\n                  <Button\n                    className=\"absolute bottom-4 left-1/2 transform -translate-x-1/2\"\n                    onClick={captureFrame}\n                    data-testid=\"capture-frame\"\n                  >\n                    Capture\n                  </Button>\n                )}\n                \n                <div className=\"absolute top-4 right-4\">\n                  <Button\n                    size=\"sm\"\n                    variant=\"secondary\"\n                    onClick={stopCamera}\n                    data-testid=\"close-camera\"\n                  >\n                    <span className=\"material-icons\">close</span>\n                  </Button>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Product Grid */}\n          <div className=\"flex-1 p-4 overflow-y-auto pb-20\">\n            <div className=\"grid grid-cols-3 gap-3\">\n              {filteredProducts.map((product) => {\n                const availableStock = stockData.filter(s => s.productId === product.id && s.quantity > 0);\n                const totalStock = availableStock.reduce((sum, stock) => sum + stock.quantity, 0);\n                \n                return (\n                  <Card\n                    key={product.id}\n                    className=\"cursor-pointer hover:elevation-2 transition-all\"\n                    onClick={() => addProductToBill(product.id)}\n                    data-testid={`product-tile-${product.id}`}\n                  >\n                    <CardContent className=\"p-3\">\n                      <h3 className=\"font-semibold text-sm mb-1 line-clamp-2\">\n                        {product.name}\n                      </h3>\n                      <p className=\"text-lg font-bold text-primary\">\n                        ₹{product.price.toFixed(2)}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        Stock: {totalStock}\n                      </p>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n\n        {/* Bill Drawer */}\n        {showBillDrawer && (\n          <div className=\"w-80 max-w-[90%] md:max-w-80 border-l border-border bg-card flex flex-col\">\n            <div className=\"flex items-center justify-between mb-4 p-4 border-b border-border\">\n              <h2 className=\"text-lg font-semibold\">Current Bill</h2>\n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                onClick={() => setShowBillDrawer(false)}\n                data-testid=\"close-bill\"\n              >\n                <span className=\"material-icons\">close</span>\n              </Button>\n            </div>\n\n            <div className=\"flex-1 space-y-2 overflow-y-auto mb-4 p-4 pt-0\">\n              {billItems.map((item, index) => (\n                <Card key={`${item.product.id}-${item.stock.id}-${index}`} className=\"p-3\">\n                  <div className=\"flex justify-between items-start mb-2\">\n                    <h4 className=\"font-medium text-sm\">{item.product.name}</h4>\n                    <span className=\"text-sm font-bold\">\n                      ₹{(item.price * item.quantity).toFixed(2)}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => updateQuantity(item.product.id, item.stock.id, -1)}\n                        data-testid={`decrease-${item.product.id}`}\n                      >\n                        <span className=\"material-icons text-xs\">remove</span>\n                      </Button>\n                      <span className=\"text-sm font-medium w-8 text-center\">\n                        {item.quantity}\n                      </span>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => updateQuantity(item.product.id, item.stock.id, 1)}\n                        data-testid={`increase-${item.product.id}`}\n                      >\n                        <span className=\"material-icons text-xs\">add</span>\n                      </Button>\n                    </div>\n                    <span className=\"text-xs text-muted-foreground\">\n                      ₹{item.price.toFixed(2)} each\n                    </span>\n                  </div>\n                </Card>\n              ))}\n            </div>\n\n            <div className=\"border-t border-border pt-4 p-4\">\n              <div className=\"flex justify-between items-center mb-4\">\n                <span className=\"text-lg font-semibold\">Total:</span>\n                <span className=\"text-xl font-bold text-primary\">\n                  ₹{getBillTotal().toFixed(2)}\n                </span>\n              </div>\n              \n              <Button\n                className=\"w-full py-3\"\n                onClick={() => setShowPayment(true)}\n                disabled={billItems.length === 0}\n                data-testid=\"checkout-button\"\n              >\n                Pay & Complete\n              </Button>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Sticky Charge Bar - shows when bill has items but drawer is closed */}\n      {billItems.length > 0 && !showBillDrawer && (\n        <div className=\"fixed bottom-0 left-0 right-0 bg-card border-t border-border p-4 elevation-3\">\n          <div className=\"flex items-center justify-between max-w-md mx-auto\">\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-sm font-medium\">Total</span>\n              <span className=\"text-lg font-bold text-primary\">₹{getBillTotal().toFixed(2)}</span>\n            </div>\n            <Button \n              onClick={() => setShowPayment(true)}\n              className=\"px-6\"\n              data-testid=\"sticky-charge-button\"\n            >\n              Charge ₹{getBillTotal().toFixed(2)}\n            </Button>\n          </div>\n        </div>\n      )}\n\n      {/* Payment Modal */}\n      <CollectPaymentSheet\n        isOpen={showPayment}\n        amount={getBillTotal()}\n        onPaymentComplete={handlePaymentComplete}\n        onCancel={handlePaymentCancel}\n        acceptOnlyCash={acceptOnlyCash}\n      />\n\n      {/* Camera Permission Modal */}\n      <CameraPermissionModal\n        isOpen={showCameraPermission}\n        onRetry={handleCameraPermissionRetry}\n        onOpenSettings={handleOpenCameraSettings}\n        onCancel={() => setShowCameraPermission(false)}\n      />\n    </div>\n  );\n}","size_bytes":19848},"client/src/pages/receive-stock.tsx":{"content":"import React, { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { tw, getTint } from \"@/lib/theme\";\nimport { useLocation } from \"wouter\";\n\nexport default function ReceiveStockScreen() {\n  const [, navigate] = useLocation();\n  const [scanMode, setScanMode] = useState<'invoice' | 'po'>('invoice');\n  const [scannedData, setScannedData] = useState('');\n  \n  // Check for route params to auto-scroll and trigger actions\n  React.useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const action = params.get('action');\n    \n    if (action === 'scan') {\n      setScanMode('invoice');\n      // Auto-scroll to scan card and trigger it\n      setTimeout(() => {\n        const scanCard = document.querySelector('[data-testid=\"scan-invoice-card\"]');\n        scanCard?.scrollIntoView({ behavior: 'smooth' });\n      }, 100);\n    } else if (action === 'enter') {\n      setScanMode('po');\n      // Auto-scroll to PO card\n      setTimeout(() => {\n        const poCard = document.querySelector('[data-testid=\"enter-po-card\"]');\n        poCard?.scrollIntoView({ behavior: 'smooth' });\n      }, 100);\n    }\n  }, []);\n\n  const handleScanInvoice = () => {\n    // Placeholder for invoice scanning\n    console.log('Invoice scan initiated');\n    \n    // Analytics tracking\n    if (typeof window !== 'undefined' && (window as any).gtag) {\n      (window as any).gtag('event', 'receiving_beta_opened', {\n        scan_type: 'invoice'\n      });\n    }\n  };\n\n  const handleEnterPO = () => {\n    // Placeholder for PO entry\n    console.log('PO entry initiated');\n    \n    // Analytics tracking\n    if (typeof window !== 'undefined' && (window as any).gtag) {\n      (window as any).gtag('event', 'receiving_beta_opened', {\n        scan_type: 'po'\n      });\n    }\n  };\n\n  return (\n    <div className=\"h-screen overflow-y-auto\">\n      <div className=\"p-4 space-y-6\">\n      \n        {/* Header with Back Button */}\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-3\">\n            <button \n              onClick={() => navigate('/ops')}\n              className=\"text-muted-foreground hover:text-foreground\"\n              data-testid=\"back-to-ops\"\n            >\n              <span className=\"material-icons\">arrow_back</span>\n            </button>\n            <h1 className={`${tw.headingXl}`} data-testid=\"receive-stock-title\">Receive Stock</h1>\n          </div>\n          <div className=\"text-xs bg-orange-100 text-orange-800 px-2 py-1 rounded\">\n            BETA\n          </div>\n        </div>\n        \n        {/* Hero Banner - 72dp height */}\n        <div \n          className=\"rounded-lg p-6 mb-6 cursor-pointer\"\n          style={{ \n            height: '72px',\n            background: `linear-gradient(135deg, ${getTint(200)}, ${getTint(100)})` \n          }}\n          onClick={() => {\n            // Auto-scroll to action cards on banner click\n            const actionSection = document.querySelector('[data-testid=\"action-cards\"]');\n            actionSection?.scrollIntoView({ behavior: 'smooth' });\n          }}\n        >\n          <div className=\"flex items-center space-x-4 h-full\">\n            <div className=\"w-16 h-16 bg-white/80 rounded-xl flex items-center justify-center relative\">\n              <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                <span className=\"material-icons text-blue-600\">inbox</span>\n              </div>\n              <div className=\"absolute -top-1 -right-1 w-6 h-6 bg-white rounded-full flex items-center justify-center shadow-sm\">\n                <span className=\"material-icons text-xs text-blue-600\">add</span>\n              </div>\n            </div>\n            <div className=\"flex-1\">\n              <h2 className={`${tw.headingLg} font-bold text-blue-900 mb-1`}>Stock Inward made easy</h2>\n              <p className={`${tw.body} text-blue-700`}>Scan supplier invoices or enter purchase orders</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Action Cards Section */}\n        <div data-testid=\"action-cards\" className=\"grid grid-cols-2 gap-4 mb-6\">\n          <Card \n            className=\"elevation-1 cursor-pointer hover:elevation-2 transition-all\"\n            onClick={() => {\n              console.log('[RECEIVE-STOCK] Scan Invoice button clicked');\n              setScanMode('invoice');\n              navigate('/capture?mode=invoice');\n            }}\n            data-testid=\"scan-invoice-card\"\n          >\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"flex flex-col items-center space-y-3\">\n                <div className=\"w-16 h-16 bg-blue-50 rounded-xl flex items-center justify-center\">\n                  <span className=\"material-icons text-2xl text-blue-600\">document_scanner</span>\n                </div>\n                <div>\n                  <h3 className={`${tw.headingMd} font-semibold`}>Scan Invoice</h3>\n                  <p className={`${tw.bodySm} text-muted-foreground mt-1`}>Use camera to scan</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card \n            className=\"elevation-1 cursor-pointer hover:elevation-2 transition-all\"\n            onClick={() => {\n              setScanMode('po');\n              navigate('/enter-po');\n            }}\n            data-testid=\"enter-po-card\"\n          >\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"flex flex-col items-center space-y-3\">\n                <div className=\"w-16 h-16 bg-green-50 rounded-xl flex items-center justify-center\">\n                  <span className=\"material-icons text-2xl text-green-600\">receipt_long</span>\n                </div>\n                <div>\n                  <h3 className={`${tw.headingMd} font-semibold`}>Enter PO</h3>\n                  <p className={`${tw.bodySm} text-muted-foreground mt-1`}>Manual entry</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Progress Tracker */}\n        <Card className=\"elevation-1\">\n          <CardContent className=\"p-4\">\n            <h3 className={`${tw.headingMd} mb-4`}>Processing Status</h3>\n            <div className=\"flex space-x-4\">\n              <div className=\"flex-1 text-center\">\n                <div className={`${tw.headingXl} font-bold text-blue-600`}>0</div>\n                <p className={`${tw.bodySm} text-muted-foreground`}>Invoices pending sync</p>\n              </div>\n              <div className=\"w-px bg-border\"></div>\n              <div className=\"flex-1 text-center\">\n                <div className={`${tw.headingXl} font-bold text-green-600`}>0</div>\n                <p className={`${tw.bodySm} text-muted-foreground`}>POs open</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        {/* Empty State Illustration */}\n        <div className=\"flex flex-col items-center justify-center py-8 text-center\">\n          <svg width=\"120\" height=\"120\" viewBox=\"0 0 120 120\" className=\"mb-4 opacity-60\">\n            <rect x=\"20\" y=\"30\" width=\"80\" height=\"60\" rx=\"8\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\"/>\n            <rect x=\"30\" y=\"40\" width=\"60\" height=\"8\" rx=\"2\" fill=\"currentColor\" opacity=\"0.3\"/>\n            <rect x=\"30\" y=\"55\" width=\"40\" height=\"6\" rx=\"1\" fill=\"currentColor\" opacity=\"0.2\"/>\n            <rect x=\"30\" y=\"65\" width=\"50\" height=\"6\" rx=\"1\" fill=\"currentColor\" opacity=\"0.2\"/>\n            <circle cx=\"60\" cy=\"20\" r=\"8\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeDasharray=\"4 2\"/>\n            <path d=\"M56 20 L60 16 L64 20\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\"/>\n          </svg>\n          <h3 className={`${tw.headingMd} text-muted-foreground mb-2`}>Ready to receive stock</h3>\n          <p className={`${tw.body} text-muted-foreground max-w-sm`}>Start by scanning an invoice or entering a purchase order to begin the receiving process.</p>\n        </div>\n        \n        {/* Bottom spacing for navigation */}\n        <div className=\"h-16\"></div>\n      </div>\n    </div>\n  );\n}","size_bytes":8364},"client/src/pages/sales.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { SegmentedControl } from \"@/components/segmented-control\";\n\nexport default function Sales() {\n  const [activeTab, setActiveTab] = useState('sales');\n  \n  const { data: sales = [], isLoading } = useQuery({\n    queryKey: ['/api/sales'],\n  });\n\n  const { data: todaysSales } = useQuery({\n    queryKey: ['/api/sales/today'],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-screen\">\n        <div className=\"text-center\">\n          <span className=\"material-icons animate-spin text-4xl text-primary\">sync</span>\n          <p className=\"mt-2 text-muted-foreground\">Loading sales data...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-4 space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-2xl font-bold\" data-testid=\"sales-title\">Sales & Receiving</h1>\n        <div className=\"text-right\">\n          <p className=\"text-sm text-muted-foreground\">Today's Total</p>\n          <p className=\"text-xl font-bold text-primary\" data-testid=\"todays-total\">\n            ₹{todaysSales?.total?.toFixed(2) || '0.00'}\n          </p>\n        </div>\n      </div>\n\n      {/* Segmented Control */}\n      <SegmentedControl\n        segments={[\n          { value: 'sales', label: 'Sales', icon: 'receipt' },\n          { value: 'receiving', label: 'Receiving', icon: 'inbox' }\n        ]}\n        value={activeTab}\n        onChange={setActiveTab}\n        className=\"w-full max-w-sm\"\n      />\n\n      <div className=\"space-y-4\">\n        {sales.length > 0 ? (\n          sales.map((sale: any) => (\n            <Card key={sale.id} className=\"elevation-1\" data-testid={`sale-${sale.id}`}>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center\">\n                      <span className=\"material-icons text-primary\">receipt</span>\n                    </div>\n                    <div>\n                      <p className=\"font-semibold\" data-testid={`sale-id-${sale.id}`}>\n                        {sale.id.toUpperCase()}\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\" data-testid={`sale-date-${sale.id}`}>\n                        {new Date(sale.date).toLocaleDateString()} at {new Date(sale.date).toLocaleTimeString()}\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"text-right\">\n                    <p className=\"text-2xl font-bold\" data-testid={`sale-total-${sale.id}`}>\n                      ₹{sale.total.toFixed(2)}\n                    </p>\n                    <div className=\"flex items-center space-x-1 justify-end mt-1\">\n                      <div className={`w-2 h-2 rounded-full ${sale.synced ? 'bg-green-500' : 'bg-yellow-500'}`}></div>\n                      <span className=\"text-xs text-muted-foreground\" data-testid={`sale-sync-status-${sale.id}`}>\n                        {sale.synced ? 'Synced' : 'Pending Sync'}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n\n                {sale.items && (\n                  <div className=\"mt-4 pt-4 border-t border-border\">\n                    <h4 className=\"text-sm font-medium text-muted-foreground mb-2\">Items</h4>\n                    <div className=\"text-sm text-muted-foreground\">\n                      {/* Parse and display sale items if needed */}\n                      <pre className=\"whitespace-pre-wrap\">{sale.items}</pre>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          ))\n        ) : (\n          <Card className=\"elevation-1\">\n            <CardContent className=\"p-8 text-center\">\n              <span className=\"material-icons text-6xl text-muted-foreground mb-4\">assessment</span>\n              <h3 className=\"text-lg font-semibold mb-2\">No sales yet</h3>\n              <p className=\"text-muted-foreground\">\n                Start making sales to see them appear here\n              </p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":4474},"client/src/pages/settings.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Switch } from \"@/components/ui/switch\";\n\nexport default function Settings() {\n  const { toast } = useToast();\n  const [email, setEmail] = useState(\"\");\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [acceptOnlyCash, setAcceptOnlyCash] = useState(false);\n  const [enableReceivingBeta, setEnableReceivingBeta] = useState(false);\n  const [userRole, setUserRole] = useState(\"\");\n  const [currentTenantId, setCurrentTenantId] = useState(\"pharm_007\");\n  const [availableTenants, setAvailableTenants] = useState([\"pharm_007\", \"pharm_008\", \"pharm_009\", \"default\"]);\n\n  const handleBetaSignup = async () => {\n    if (!email.trim()) {\n      toast({\n        title: \"Email required\",\n        description: \"Please enter your email address\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailPattern.test(email)) {\n      toast({\n        title: \"Invalid email\",\n        description: \"Please enter a valid email address\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsSubmitting(true);\n    \n    try {\n      // Simulate API call - in real implementation this would save to assistantBetaLeads table\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      toast({\n        title: \"Success!\",\n        description: \"You've been added to the AI Assistant beta list\"\n      });\n      \n      setEmail(\"\");\n      setDialogOpen(false);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to join beta list. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  useEffect(() => {\n    // Load settings from localStorage\n    const cashOnlySettings = localStorage.getItem('acceptOnlyCash');\n    const receivingBetaSettings = localStorage.getItem('enableReceivingBeta');\n    const roleSettings = localStorage.getItem('userRole');\n    \n    setAcceptOnlyCash(cashOnlySettings === 'true');\n    setEnableReceivingBeta(receivingBetaSettings === 'true');\n    setUserRole(roleSettings || 'retailer');\n    \n    // Load tenant ID from localStorage or use default\n    const tenantSettings = localStorage.getItem('currentTenantId');\n    setCurrentTenantId(tenantSettings || 'pharm_007');\n  }, []);\n\n  const handleCashOnlyToggle = (enabled: boolean) => {\n    setAcceptOnlyCash(enabled);\n    localStorage.setItem('acceptOnlyCash', enabled.toString());\n    toast({\n      title: enabled ? \"Cash-only mode enabled\" : \"Digital payments enabled\",\n      description: enabled ? \"Only cash payments will be available\" : \"All payment methods are now available\"\n    });\n  };\n\n  const handleReceivingBetaToggle = (enabled: boolean) => {\n    setEnableReceivingBeta(enabled);\n    localStorage.setItem('enableReceivingBeta', enabled.toString());\n    toast({\n      title: enabled ? \"Receiving Beta enabled\" : \"Receiving Beta disabled\",\n      description: enabled ? \"Inbound stock features are now available\" : \"Receiving features have been hidden\"\n    });\n  };\n\n  const handleRoleChange = (role: string) => {\n    setUserRole(role);\n    localStorage.setItem('userRole', role);\n    toast({\n      title: \"Role Updated\",\n      description: `Your role has been set to ${role.charAt(0).toUpperCase() + role.slice(1)}`,\n    });\n  };\n  \n  const handleTenantChange = (tenantId: string) => {\n    setCurrentTenantId(tenantId);\n    localStorage.setItem('currentTenantId', tenantId);\n    \n    // Also update the intelligent agent's tenant ID\n    // This would require updating the intelligent-pharmacy-agent.ts to read from localStorage\n    \n    toast({\n      title: \"Tenant Updated\",\n      description: `Now viewing data for tenant: ${tenantId}`,\n    });\n  };\n\n  const settingsItems = [\n    {\n      id: \"role\",\n      icon: \"person\",\n      title: \"My Role\",\n      description: \"Select your business role (persisted offline)\",\n      disabled: false,\n      role: true,\n      selectedRole: userRole,\n      onRoleChange: handleRoleChange\n    },\n    {\n      id: \"tenant\",\n      icon: \"business\",\n      title: \"Enterprise/Tenant ID\",\n      description: \"Data scope for AI Assistant queries\",\n      disabled: false,\n      tenant: true,\n      currentTenant: currentTenantId,\n      availableTenants,\n      onTenantChange: handleTenantChange\n    },\n    {\n      id: \"profile\",\n      icon: \"person_outline\",\n      title: \"Profile\",\n      description: \"Manage your account settings\",\n      disabled: true\n    },\n    {\n      id: \"payments\",\n      icon: \"payments\",\n      title: \"Payment Settings\",\n      description: \"Configure payment methods\",\n      disabled: false,\n      toggle: true,\n      toggled: acceptOnlyCash,\n      toggleLabel: \"Cash-only mode\",\n      onToggle: handleCashOnlyToggle\n    },\n    {\n      id: \"receiving\",\n      icon: \"inbox\",\n      title: \"Receiving Beta\",\n      description: \"Enable inbound stock features\",\n      disabled: false,\n      toggle: true,\n      toggled: enableReceivingBeta,\n      toggleLabel: \"Enable receiving workflow\",\n      onToggle: handleReceivingBetaToggle,\n      beta: true\n    },\n    {\n      id: \"ai-assistant\",\n      icon: \"psychology\",\n      title: \"AI Assistant (Beta)\",\n      description: \"Join the beta for Q4 2025\",\n      disabled: false,\n      beta: true,\n      dialog: true\n    },\n    {\n      id: \"data\",\n      icon: \"storage\",\n      title: \"Data & Sync\",\n      description: \"Backup and sync settings\",\n      disabled: true\n    },\n    {\n      id: \"about\",\n      icon: \"info\",\n      title: \"About\",\n      description: \"Version 1.0.0\",\n      disabled: true\n    }\n  ];\n\n  return (\n    <div className=\"p-4 space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-2xl font-bold\" data-testid=\"settings-title\">Settings</h1>\n      </div>\n\n      <div className=\"space-y-3\">\n        {settingsItems.map((item) => (\n          <Card key={item.id} className={`elevation-1 ${item.disabled && !item.beta ? 'opacity-50' : ''}`}>\n            <CardContent className=\"p-0\">\n              {item.toggle ? (\n                <div className=\"p-4 flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\n                      <span className=\"material-icons text-primary\">{item.icon}</span>\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold flex items-center space-x-2\">\n                        <span>{item.title}</span>\n                        {item.beta && <span className=\"bg-orange-500 text-white text-xs px-2 py-0.5 rounded-full\">BETA</span>}\n                      </h3>\n                      <p className=\"text-sm text-muted-foreground\">{item.description}</p>\n                    </div>\n                  </div>\n                  <div className=\"flex flex-col items-end space-y-1\">\n                    <Switch \n                      checked={item.toggled}\n                      onCheckedChange={item.onToggle}\n                      data-testid={`toggle-${item.id}`}\n                    />\n                    <span className=\"text-xs text-muted-foreground\">{item.toggleLabel}</span>\n                  </div>\n                </div>\n              ) : item.role ? (\n                <div className=\"p-4 flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\n                      <span className=\"material-icons text-primary\">{item.icon}</span>\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold\">{item.title}</h3>\n                      <p className=\"text-sm text-muted-foreground\">{item.description}</p>\n                    </div>\n                  </div>\n                  <Select value={item.selectedRole} onValueChange={item.onRoleChange} data-testid=\"select-user-role\">\n                    <SelectTrigger className=\"w-32\">\n                      <SelectValue placeholder=\"Role\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"wholesaler\">Wholesaler</SelectItem>\n                      <SelectItem value=\"retailer\">Retailer</SelectItem>\n                      <SelectItem value=\"distributor\">Distributor</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              ) : item.tenant ? (\n                <div className=\"p-4 space-y-3\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\n                      <span className=\"material-icons text-primary\">{item.icon}</span>\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold\">{item.title}</h3>\n                      <p className=\"text-sm text-muted-foreground\">{item.description}</p>\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label className=\"text-sm font-medium\">Current Tenant ID</Label>\n                    <div className=\"p-2 bg-muted rounded text-sm font-mono\">\n                      {item.currentTenant}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      AI Assistant queries are scoped to this tenant/enterprise. All data is filtered by this ID.\n                    </div>\n                    <Label className=\"text-xs\">Switch tenant for testing:</Label>\n                    <Select value={item.currentTenant} onValueChange={item.onTenantChange} data-testid=\"select-tenant-id\">\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {item.availableTenants.map((tenant: string) => (\n                          <SelectItem key={tenant} value={tenant}>\n                            {tenant} {tenant === 'pharm_007' ? '(Primary)' : tenant === 'default' ? '(System Default)' : '(Test)'}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n              ) : item.dialog ? (\n                <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n                  <DialogTrigger asChild>\n                    <button \n                      className=\"w-full p-4 flex items-center justify-between hover:bg-muted/50 transition-colors text-left\"\n                      data-testid={`setting-${item.id}`}\n                    >\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\n                          <span className=\"material-icons text-primary\">{item.icon}</span>\n                        </div>\n                        <div>\n                          <h3 className=\"font-semibold flex items-center space-x-2\">\n                            <span>{item.title}</span>\n                            <span className=\"bg-orange-500 text-white text-xs px-2 py-0.5 rounded-full\">BETA</span>\n                          </h3>\n                          <p className=\"text-sm text-muted-foreground\">{item.description}</p>\n                        </div>\n                      </div>\n                      <span className=\"material-icons text-muted-foreground\">chevron_right</span>\n                    </button>\n                  </DialogTrigger>\n                  \n                  <DialogContent className=\"sm:max-w-md\">\n                    <DialogHeader>\n                      <DialogTitle>{item.title}</DialogTitle>\n                    </DialogHeader>\n                    <div className=\"space-y-4\">\n                      <p className=\"text-muted-foreground\">\n                        Our AI Assistant is coming Q4 2025. Join the beta to get early access and help shape the future of pharmacy management.\n                      </p>\n                      \n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"beta-email\">Email Address</Label>\n                        <Input\n                          id=\"beta-email\"\n                          type=\"email\"\n                          placeholder=\"your@email.com\"\n                          value={email}\n                          onChange={(e) => setEmail(e.target.value)}\n                          data-testid=\"input-beta-email\"\n                        />\n                      </div>\n                      \n                      <div className=\"flex space-x-2\">\n                        <Button\n                          onClick={handleBetaSignup}\n                          disabled={isSubmitting}\n                          className=\"flex-1\"\n                          data-testid=\"button-join-beta\"\n                        >\n                          {isSubmitting ? \"Joining...\" : \"Join Beta\"}\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          onClick={() => setDialogOpen(false)}\n                          data-testid=\"button-cancel-beta\"\n                        >\n                          Cancel\n                        </Button>\n                      </div>\n                    </div>\n                  </DialogContent>\n                </Dialog>\n              ) : (\n                <div \n                  className={`p-4 flex items-center justify-between ${item.disabled ? 'cursor-not-allowed' : 'hover:bg-muted/50 transition-colors cursor-pointer'}`}\n                  data-testid={`setting-${item.id}`}\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\n                      <span className=\"material-icons text-primary\">{item.icon}</span>\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold\">{item.title}</h3>\n                      <p className=\"text-sm text-muted-foreground\">{item.description}</p>\n                    </div>\n                  </div>\n                  {!item.disabled && (\n                    <span className=\"material-icons text-muted-foreground\">chevron_right</span>\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      <div className=\"pt-8 border-t border-border\">\n        <div className=\"text-center space-y-2\">\n          <p className=\"text-sm text-muted-foreground\">Pharma-Empire OS</p>\n          <p className=\"text-xs text-muted-foreground\">Version 1.0.0 • Build 2025.09.05</p>\n          <p className=\"text-xs text-muted-foreground\">Made for Indian pharmacies</p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":15661},"client/src/services/capability.ts":{"content":"export enum DeviceTier {\n  VALUE = 'VALUE',\n  MAINSTREAM = 'MAINSTREAM', \n  PREMIUM = 'PREMIUM'\n}\n\nexport interface CapabilityInfo {\n  tier: DeviceTier;\n  ram: number;\n  cores: number;\n  hasWebGL: boolean;\n  hasCamera: boolean;\n  isHighRefreshRate: boolean;\n  lastProbed: number;\n}\n\nclass CapabilityService {\n  private static instance: CapabilityService;\n  private capabilities: CapabilityInfo | null = null;\n  private readonly CACHE_KEY = 'pharma_device_capabilities';\n  private readonly CACHE_DURATION = 24 * 60 * 60 * 1000; // 24 hours\n\n  static getInstance(): CapabilityService {\n    if (!CapabilityService.instance) {\n      CapabilityService.instance = new CapabilityService();\n    }\n    return CapabilityService.instance;\n  }\n\n  async getCapabilities(): Promise<CapabilityInfo> {\n    // Check cache first\n    const cached = this.getCachedCapabilities();\n    if (cached && this.isCacheValid(cached)) {\n      this.capabilities = cached;\n      return cached;\n    }\n\n    // Probe device capabilities\n    const capabilities = await this.probeCapabilities();\n    \n    // Cache the result\n    this.cacheCapabilities(capabilities);\n    this.capabilities = capabilities;\n    \n    return capabilities;\n  }\n\n  private async probeCapabilities(): Promise<CapabilityInfo> {\n    const ram = this.estimateRAM();\n    const cores = this.getCoreCount();\n    const hasWebGL = this.detectWebGL();\n    const hasCamera = await this.detectCamera();\n    const isHighRefreshRate = this.detectHighRefreshRate();\n\n    const tier = this.calculateTier(ram, cores, hasWebGL);\n\n    return {\n      tier,\n      ram,\n      cores,\n      hasWebGL,\n      hasCamera,\n      isHighRefreshRate,\n      lastProbed: Date.now()\n    };\n  }\n\n  private estimateRAM(): number {\n    // Use navigator.deviceMemory if available (Chrome/Edge)\n    if ('deviceMemory' in navigator) {\n      return (navigator as any).deviceMemory;\n    }\n\n    // Fallback: estimate based on other factors\n    const ua = navigator.userAgent.toLowerCase();\n    \n    // Mobile devices typically have less RAM\n    if (/android|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(ua)) {\n      // Check for high-end mobile indicators\n      if (/iphone.*os 1[5-9]|android.*1[1-9]/i.test(ua)) {\n        return 6; // Modern mobile devices\n      }\n      return 3; // Older mobile devices\n    }\n\n    // Desktop/laptop estimation\n    const cores = this.getCoreCount();\n    if (cores >= 8) return 16;\n    if (cores >= 4) return 8;\n    return 4;\n  }\n\n  private getCoreCount(): number {\n    return navigator.hardwareConcurrency || 4;\n  }\n\n  private detectWebGL(): boolean {\n    try {\n      const canvas = document.createElement('canvas');\n      const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n      return !!gl;\n    } catch {\n      return false;\n    }\n  }\n\n  private async detectCamera(): Promise<boolean> {\n    try {\n      const devices = await navigator.mediaDevices.enumerateDevices();\n      return devices.some(device => device.kind === 'videoinput');\n    } catch {\n      return false;\n    }\n  }\n\n  private detectHighRefreshRate(): boolean {\n    // Check for high refresh rate display\n    if ('screen' in window && 'refreshRate' in (window.screen as any)) {\n      return (window.screen as any).refreshRate > 60;\n    }\n    return false;\n  }\n\n  private calculateTier(ram: number, cores: number, hasWebGL: boolean): DeviceTier {\n    // Premium tier: >=8GB RAM, >=6 cores, WebGL support\n    if (ram >= 8 && cores >= 6 && hasWebGL) {\n      return DeviceTier.PREMIUM;\n    }\n    \n    // Mainstream tier: >=4GB RAM, >=4 cores\n    if (ram >= 4 && cores >= 4) {\n      return DeviceTier.MAINSTREAM;\n    }\n    \n    // Value tier: everything else\n    return DeviceTier.VALUE;\n  }\n\n  private getCachedCapabilities(): CapabilityInfo | null {\n    try {\n      const cached = localStorage.getItem(this.CACHE_KEY);\n      return cached ? JSON.parse(cached) : null;\n    } catch {\n      return null;\n    }\n  }\n\n  private isCacheValid(capabilities: CapabilityInfo): boolean {\n    return Date.now() - capabilities.lastProbed < this.CACHE_DURATION;\n  }\n\n  private cacheCapabilities(capabilities: CapabilityInfo): void {\n    try {\n      localStorage.setItem(this.CACHE_KEY, JSON.stringify(capabilities));\n    } catch {\n      // Ignore storage errors\n    }\n  }\n\n  // Convenience methods\n  async getTier(): Promise<DeviceTier> {\n    const capabilities = await this.getCapabilities();\n    return capabilities.tier;\n  }\n\n  async isValueTier(): Promise<boolean> {\n    const tier = await this.getTier();\n    return tier === DeviceTier.VALUE;\n  }\n\n  async isPremiumTier(): Promise<boolean> {\n    const tier = await this.getTier();\n    return tier === DeviceTier.PREMIUM;\n  }\n\n  async hasCamera(): Promise<boolean> {\n    const capabilities = await this.getCapabilities();\n    return capabilities.hasCamera;\n  }\n\n  async getRAM(): Promise<number> {\n    const capabilities = await this.getCapabilities();\n    return capabilities.ram;\n  }\n}\n\n// Export singleton instance\nexport const capabilityService = CapabilityService.getInstance();\n\n// Export constants for easy access\nexport const Tiers = DeviceTier;","size_bytes":5126},"client/src/services/sales-engine.ts":{"content":"import type { Product, Stock, Sale, InsertSale } from \"@shared/schema\";\n\nexport interface SaleItem {\n  productId: string;\n  stockId: string;\n  quantity: number;\n  price: number;\n}\n\nexport interface StockUpdate {\n  stockId: string;\n  newQuantity: number;\n}\n\n/**\n * Sales Engine implementing FEFO (First Expired, First Out) stock management\n */\nexport class SalesEngine {\n  /**\n   * Apply FEFO logic to select stock for a product\n   * Returns stock items sorted by expiry date (earliest first)\n   */\n  static selectStockForProduct(\n    productId: string, \n    requestedQuantity: number, \n    availableStock: Stock[]\n  ): { selectedStock: Stock[], remainingQuantity: number } {\n    // Filter stock for this product with available quantity\n    const productStock = availableStock\n      .filter(stock => stock.productId === productId && stock.quantity > 0)\n      .sort((a, b) => {\n        // Sort by expiry date (earliest first) - FEFO\n        const dateA = a.expiryDate ? new Date(a.expiryDate).getTime() : Infinity;\n        const dateB = b.expiryDate ? new Date(b.expiryDate).getTime() : Infinity;\n        return dateA - dateB;\n      });\n\n    const selectedStock: Stock[] = [];\n    let remainingQuantity = requestedQuantity;\n\n    for (const stock of productStock) {\n      if (remainingQuantity <= 0) break;\n\n      const availableFromStock = Math.min(stock.quantity, remainingQuantity);\n      if (availableFromStock > 0) {\n        selectedStock.push({\n          ...stock,\n          quantity: availableFromStock\n        });\n        remainingQuantity -= availableFromStock;\n      }\n    }\n\n    return { selectedStock, remainingQuantity };\n  }\n\n  /**\n   * Validate if a sale can be fulfilled with current stock\n   */\n  static validateSale(saleItems: SaleItem[], availableStock: Stock[]): {\n    isValid: boolean;\n    errors: string[];\n    stockUpdates: StockUpdate[];\n  } {\n    const errors: string[] = [];\n    const stockUpdates: StockUpdate[] = [];\n\n    // Group sale items by product\n    const productQuantities = new Map<string, number>();\n    saleItems.forEach(item => {\n      const currentQty = productQuantities.get(item.productId) || 0;\n      productQuantities.set(item.productId, currentQty + item.quantity);\n    });\n\n    // Validate each product's availability using FEFO\n    for (const [productId, requestedQty] of Array.from(productQuantities.entries())) {\n      const { selectedStock, remainingQuantity } = this.selectStockForProduct(\n        productId,\n        requestedQty,\n        availableStock\n      );\n\n      if (remainingQuantity > 0) {\n        errors.push(`Insufficient stock for product ${productId}. Need ${remainingQuantity} more units.`);\n        continue;\n      }\n\n      // Calculate stock updates\n      selectedStock.forEach(stock => {\n        const originalStock = availableStock.find(s => s.id === stock.id);\n        if (originalStock) {\n          const newQuantity = originalStock.quantity - stock.quantity;\n          stockUpdates.push({\n            stockId: stock.id,\n            newQuantity: Math.max(0, newQuantity)\n          });\n        }\n      });\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      stockUpdates\n    };\n  }\n\n  /**\n   * Process a sale and generate stock updates\n   */\n  static processSale(saleItems: SaleItem[], availableStock: Stock[]): {\n    success: boolean;\n    sale?: Partial<InsertSale>;\n    stockUpdates: StockUpdate[];\n    errors: string[];\n  } {\n    const validation = this.validateSale(saleItems, availableStock);\n    \n    if (!validation.isValid) {\n      return {\n        success: false,\n        stockUpdates: [],\n        errors: validation.errors\n      };\n    }\n\n    // Calculate total\n    const total = saleItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);\n\n    // Create sale record\n    const sale: Partial<InsertSale> = {\n      total,\n      items: JSON.stringify(saleItems)\n    };\n\n    return {\n      success: true,\n      sale,\n      stockUpdates: validation.stockUpdates,\n      errors: []\n    };\n  }\n\n  /**\n   * Check for products nearing expiry (within 30 days)\n   */\n  static getNearExpiryProducts(stock: Stock[], daysThreshold: number = 30): Stock[] {\n    const thresholdDate = new Date();\n    thresholdDate.setDate(thresholdDate.getDate() + daysThreshold);\n\n    return stock.filter(item => {\n      if (!item.expiryDate) return false;\n      const expiryDate = new Date(item.expiryDate);\n      return expiryDate <= thresholdDate && item.quantity > 0;\n    }).sort((a, b) => {\n      const dateA = new Date(a.expiryDate!).getTime();\n      const dateB = new Date(b.expiryDate!).getTime();\n      return dateA - dateB;\n    });\n  }\n\n  /**\n   * Get low stock alerts\n   */\n  static getLowStockAlerts(stock: Stock[], threshold: number = 10): Stock[] {\n    return stock.filter(item => item.quantity <= threshold && item.quantity > 0);\n  }\n\n  /**\n   * Calculate stock value by product\n   */\n  static calculateStockValue(products: Product[], stock: Stock[]): {\n    totalValue: number;\n    productValues: Array<{ productId: string; value: number; quantity: number }>;\n  } {\n    const productMap = new Map(products.map(p => [p.id, p]));\n    const productValues: Array<{ productId: string; value: number; quantity: number }> = [];\n    let totalValue = 0;\n\n    // Group stock by product\n    const stockByProduct = new Map<string, Stock[]>();\n    stock.forEach(item => {\n      if (!stockByProduct.has(item.productId)) {\n        stockByProduct.set(item.productId, []);\n      }\n      stockByProduct.get(item.productId)!.push(item);\n    });\n\n    // Calculate value for each product\n    for (const [productId, stockItems] of Array.from(stockByProduct.entries())) {\n      const product = productMap.get(productId);\n      if (!product) continue;\n\n      const totalQuantity = stockItems.reduce((sum: number, item: Stock) => sum + item.quantity, 0);\n      const value = product.price * totalQuantity;\n      \n      productValues.push({\n        productId,\n        value,\n        quantity: totalQuantity\n      });\n      \n      totalValue += value;\n    }\n\n    return { totalValue, productValues };\n  }\n}","size_bytes":6075},"client/src/components/payment/collect-payment-sheet.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\n\ninterface CollectPaymentSheetProps {\n  amount: number;\n  onPaymentComplete: (method: 'cash' | 'upi' | 'card') => void;\n  onCancel: () => void;\n  isOpen: boolean;\n  acceptOnlyCash?: boolean;\n}\n\nexport function CollectPaymentSheet({ \n  amount, \n  onPaymentComplete, \n  onCancel, \n  isOpen,\n  acceptOnlyCash = false \n}: CollectPaymentSheetProps) {\n  const [selectedMethod, setSelectedMethod] = useState<'cash' | 'upi' | 'card'>('cash');\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const paymentMethods = [\n    {\n      id: 'cash' as const,\n      label: 'Cash',\n      icon: 'payments',\n      description: 'Cash payment',\n      available: true,\n      default: true\n    },\n    {\n      id: 'upi' as const,\n      label: 'UPI',\n      icon: 'smartphone',\n      description: 'UPI payment',\n      available: !acceptOnlyCash,\n      default: false\n    },\n    {\n      id: 'card' as const,\n      label: 'Card',\n      icon: 'credit_card',\n      description: 'Card payment',\n      available: !acceptOnlyCash,\n      default: false\n    }\n  ];\n\n  const handlePayment = async () => {\n    setIsProcessing(true);\n    \n    // Simulate payment processing\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    \n    setIsProcessing(false);\n    onPaymentComplete(selectedMethod);\n  };\n\n  const formatAmount = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      minimumFractionDigits: 2\n    }).format(amount);\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onCancel}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center justify-between\">\n            <span>Collect Payment</span>\n            <Badge variant=\"outline\" className=\"text-xs\">\n              OFFLINE\n            </Badge>\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-6\">\n          {/* Amount Display */}\n          <div className=\"text-center py-4 bg-muted/30 rounded-lg\">\n            <div className=\"text-3xl font-bold text-primary mb-1\">\n              {formatAmount(amount)}\n            </div>\n            <p className=\"text-sm text-muted-foreground\">Amount to collect</p>\n          </div>\n\n          {/* Payment Method Selection */}\n          <div className=\"space-y-3\">\n            <h3 className=\"text-sm font-medium text-muted-foreground\">Payment Method</h3>\n            <div className=\"grid gap-2\">\n              {paymentMethods.filter(method => method.available).map((method) => (\n                <button\n                  key={method.id}\n                  onClick={() => setSelectedMethod(method.id)}\n                  disabled={isProcessing}\n                  className={`w-full p-3 rounded-lg border-2 transition-all flex items-center justify-between ${\n                    selectedMethod === method.id\n                      ? 'border-primary bg-primary/5'\n                      : 'border-border hover:border-primary/50'\n                  }`}\n                  data-testid={`payment-method-${method.id}`}\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <span className=\"material-icons text-lg\">\n                      {method.icon}\n                    </span>\n                    <div className=\"text-left\">\n                      <div className=\"font-medium\">{method.label}</div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        {method.description}\n                      </div>\n                    </div>\n                  </div>\n                  \n                  {selectedMethod === method.id && (\n                    <div className=\"w-5 h-5 rounded-full bg-primary flex items-center justify-center\">\n                      <span className=\"material-icons text-white text-sm\">check</span>\n                    </div>\n                  )}\n                </button>\n              ))}\n            </div>\n          </div>\n\n          {/* Payment Method Specific Info */}\n          {selectedMethod === 'cash' && (\n            <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3\">\n              <div className=\"flex items-start space-x-2\">\n                <span className=\"material-icons text-blue-600 text-sm mt-0.5\">info</span>\n                <div className=\"text-sm\">\n                  <p className=\"font-medium text-blue-900\">Cash Payment</p>\n                  <p className=\"text-blue-700\">Ensure you have the correct change ready</p>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {selectedMethod === 'upi' && (\n            <div className=\"bg-green-50 border border-green-200 rounded-lg p-3\">\n              <div className=\"flex items-start space-x-2\">\n                <span className=\"material-icons text-green-600 text-sm mt-0.5\">smartphone</span>\n                <div className=\"text-sm\">\n                  <p className=\"font-medium text-green-900\">UPI Payment</p>\n                  <p className=\"text-green-700\">Customer will pay via UPI app</p>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {selectedMethod === 'card' && (\n            <div className=\"bg-purple-50 border border-purple-200 rounded-lg p-3\">\n              <div className=\"flex items-start space-x-2\">\n                <span className=\"material-icons text-purple-600 text-sm mt-0.5\">credit_card</span>\n                <div className=\"text-sm\">\n                  <p className=\"font-medium text-purple-900\">Card Payment</p>\n                  <p className=\"text-purple-700\">Swipe or insert customer's card</p>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Accept Only Cash Warning */}\n          {acceptOnlyCash && (\n            <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-3\">\n              <div className=\"flex items-start space-x-2\">\n                <span className=\"material-icons text-yellow-600 text-sm mt-0.5\">warning</span>\n                <div className=\"text-sm\">\n                  <p className=\"font-medium text-yellow-900\">Cash Only Mode</p>\n                  <p className=\"text-yellow-700\">Digital payments are disabled in settings</p>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"flex space-x-3\">\n            <Button\n              variant=\"outline\"\n              onClick={onCancel}\n              disabled={isProcessing}\n              className=\"flex-1\"\n              data-testid=\"cancel-payment\"\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handlePayment}\n              disabled={isProcessing}\n              className=\"flex-1\"\n              data-testid=\"confirm-payment\"\n            >\n              {isProcessing ? (\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                  <span>Processing...</span>\n                </div>\n              ) : (\n                `Collect ${formatAmount(amount)}`\n              )}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":7622},"client/src/components/payment/upi-lite-mock.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface UpiLiteMockProps {\n  amount: number;\n  onSuccess: () => void;\n  onCancel: () => void;\n}\n\nexport function UpiLiteMock({ amount, onSuccess, onCancel }: UpiLiteMockProps) {\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [paymentMethod, setPaymentMethod] = useState<'upi' | 'cash'>('upi');\n\n  const handlePayment = async () => {\n    setIsProcessing(true);\n    \n    // Simulate payment processing delay\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    setIsProcessing(false);\n    onSuccess();\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            Payment\n            <Badge variant=\"outline\">OFFLINE</Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"text-center\">\n            <div className=\"text-3xl font-bold text-primary mb-2\">\n              ₹{amount.toFixed(2)}\n            </div>\n            <p className=\"text-sm text-muted-foreground\">Amount to pay</p>\n          </div>\n\n          <div className=\"space-y-2\">\n            <label className=\"text-sm font-medium\">Payment Method</label>\n            <div className=\"grid grid-cols-2 gap-2\">\n              <Button\n                variant={paymentMethod === 'upi' ? 'default' : 'outline'}\n                onClick={() => setPaymentMethod('upi')}\n                className=\"flex items-center space-x-2\"\n                data-testid=\"payment-upi\"\n              >\n                <span className=\"material-icons text-sm\">smartphone</span>\n                <span>UPI</span>\n              </Button>\n              <Button\n                variant={paymentMethod === 'cash' ? 'default' : 'outline'}\n                onClick={() => setPaymentMethod('cash')}\n                className=\"flex items-center space-x-2\"\n                data-testid=\"payment-cash\"\n              >\n                <span className=\"material-icons text-sm\">payments</span>\n                <span>Cash</span>\n              </Button>\n            </div>\n          </div>\n\n          {paymentMethod === 'upi' && (\n            <div className=\"bg-muted p-4 rounded-lg\">\n              <div className=\"flex items-center space-x-2 mb-2\">\n                <span className=\"material-icons text-green-600\">check_circle</span>\n                <span className=\"text-sm font-medium\">UPI Lite Available</span>\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                Instant payment without PIN for amounts under ₹500\n              </p>\n            </div>\n          )}\n\n          {paymentMethod === 'cash' && (\n            <div className=\"bg-muted p-4 rounded-lg\">\n              <div className=\"flex items-center space-x-2 mb-2\">\n                <span className=\"material-icons text-blue-600\">info</span>\n                <span className=\"text-sm font-medium\">Cash Payment</span>\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                Make sure to provide correct change\n              </p>\n            </div>\n          )}\n\n          <div className=\"flex space-x-2\">\n            <Button\n              variant=\"outline\"\n              onClick={onCancel}\n              className=\"flex-1\"\n              disabled={isProcessing}\n              data-testid=\"cancel-payment\"\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handlePayment}\n              className=\"flex-1\"\n              disabled={isProcessing}\n              data-testid=\"confirm-payment\"\n            >\n              {isProcessing ? (\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                  <span>Processing...</span>\n                </div>\n              ) : (\n                `Pay ₹${amount.toFixed(2)}`\n              )}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":4368},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/services/__tests__/capability.test.ts":{"content":"import { capabilityService, DeviceTier } from '../capability';\n\n// Mock localStorage\nconst localStorageMock = (() => {\n  let store: Record<string, string> = {};\n  return {\n    getItem: (key: string) => store[key] || null,\n    setItem: (key: string, value: string) => {\n      store[key] = value.toString();\n    },\n    removeItem: (key: string) => {\n      delete store[key];\n    },\n    clear: () => {\n      store = {};\n    }\n  };\n})();\n\nObject.defineProperty(window, 'localStorage', {\n  value: localStorageMock\n});\n\n// Mock navigator\nconst mockNavigator = {\n  hardwareConcurrency: 4,\n  deviceMemory: 8,\n  userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n  mediaDevices: {\n    enumerateDevices: jest.fn().mockResolvedValue([\n      { kind: 'videoinput', deviceId: 'camera1' }\n    ])\n  }\n};\n\nObject.defineProperty(window, 'navigator', {\n  value: mockNavigator,\n  writable: true\n});\n\n// Mock canvas and WebGL\nconst mockCanvas = {\n  getContext: jest.fn().mockReturnValue({})\n};\n\nObject.defineProperty(document, 'createElement', {\n  value: jest.fn().mockReturnValue(mockCanvas)\n});\n\ndescribe('CapabilityService', () => {\n  beforeEach(() => {\n    localStorage.clear();\n    jest.clearAllMocks();\n  });\n\n  describe('Device Tier Detection', () => {\n    it('should detect PREMIUM tier for high-end devices', async () => {\n      // Mock high-end device specs\n      (navigator as any).deviceMemory = 16;\n      (navigator as any).hardwareConcurrency = 8;\n\n      const capabilities = await capabilityService.getCapabilities();\n      \n      expect(capabilities.tier).toBe(DeviceTier.PREMIUM);\n      expect(capabilities.ram).toBe(16);\n      expect(capabilities.cores).toBe(8);\n    });\n\n    it('should detect MAINSTREAM tier for mid-range devices', async () => {\n      // Mock mid-range device specs\n      (navigator as any).deviceMemory = 6;\n      (navigator as any).hardwareConcurrency = 4;\n\n      const capabilities = await capabilityService.getCapabilities();\n      \n      expect(capabilities.tier).toBe(DeviceTier.MAINSTREAM);\n      expect(capabilities.ram).toBe(6);\n      expect(capabilities.cores).toBe(4);\n    });\n\n    it('should detect VALUE tier for low-end devices', async () => {\n      // Mock low-end device specs\n      (navigator as any).deviceMemory = 2;\n      (navigator as any).hardwareConcurrency = 2;\n\n      const capabilities = await capabilityService.getCapabilities();\n      \n      expect(capabilities.tier).toBe(DeviceTier.VALUE);\n      expect(capabilities.ram).toBe(2);\n      expect(capabilities.cores).toBe(2);\n    });\n\n    it('should fallback to estimation when deviceMemory is not available', async () => {\n      // Remove deviceMemory\n      delete (navigator as any).deviceMemory;\n      (navigator as any).hardwareConcurrency = 8;\n\n      const capabilities = await capabilityService.getCapabilities();\n      \n      expect(capabilities.ram).toBe(16); // Estimated based on cores\n      expect(capabilities.tier).toBe(DeviceTier.PREMIUM);\n    });\n  });\n\n  describe('Camera Detection', () => {\n    it('should detect camera availability', async () => {\n      const capabilities = await capabilityService.getCapabilities();\n      expect(capabilities.hasCamera).toBe(true);\n    });\n\n    it('should handle camera detection failure', async () => {\n      (navigator.mediaDevices.enumerateDevices as jest.Mock)\n        .mockRejectedValue(new Error('Permission denied'));\n\n      const capabilities = await capabilityService.getCapabilities();\n      expect(capabilities.hasCamera).toBe(false);\n    });\n  });\n\n  describe('WebGL Detection', () => {\n    it('should detect WebGL support', async () => {\n      const capabilities = await capabilityService.getCapabilities();\n      expect(capabilities.hasWebGL).toBe(true);\n    });\n\n    it('should handle WebGL detection failure', async () => {\n      mockCanvas.getContext.mockReturnValue(null);\n\n      const capabilities = await capabilityService.getCapabilities();\n      expect(capabilities.hasWebGL).toBe(false);\n    });\n  });\n\n  describe('Caching', () => {\n    it('should cache capabilities in localStorage', async () => {\n      await capabilityService.getCapabilities();\n      \n      const cached = localStorage.getItem('pharma_device_capabilities');\n      expect(cached).toBeTruthy();\n      \n      const parsed = JSON.parse(cached!);\n      expect(parsed.tier).toBeDefined();\n      expect(parsed.lastProbed).toBeDefined();\n    });\n\n    it('should use cached data if still valid', async () => {\n      const mockCapabilities = {\n        tier: DeviceTier.PREMIUM,\n        ram: 16,\n        cores: 8,\n        hasWebGL: true,\n        hasCamera: true,\n        isHighRefreshRate: false,\n        lastProbed: Date.now()\n      };\n\n      localStorage.setItem('pharma_device_capabilities', JSON.stringify(mockCapabilities));\n\n      const capabilities = await capabilityService.getCapabilities();\n      expect(capabilities.tier).toBe(DeviceTier.PREMIUM);\n    });\n\n    it('should re-probe if cache is expired', async () => {\n      const expiredCapabilities = {\n        tier: DeviceTier.PREMIUM,\n        ram: 16,\n        cores: 8,\n        hasWebGL: true,\n        hasCamera: true,\n        isHighRefreshRate: false,\n        lastProbed: Date.now() - (25 * 60 * 60 * 1000) // 25 hours ago\n      };\n\n      localStorage.setItem('pharma_device_capabilities', JSON.stringify(expiredCapabilities));\n\n      const capabilities = await capabilityService.getCapabilities();\n      expect(capabilities.lastProbed).toBeGreaterThan(expiredCapabilities.lastProbed);\n    });\n  });\n\n  describe('Convenience Methods', () => {\n    it('should provide tier checking methods', async () => {\n      (navigator as any).deviceMemory = 2;\n      (navigator as any).hardwareConcurrency = 2;\n\n      const isValue = await capabilityService.isValueTier();\n      const isPremium = await capabilityService.isPremiumTier();\n      \n      expect(isValue).toBe(true);\n      expect(isPremium).toBe(false);\n    });\n\n    it('should provide RAM getter', async () => {\n      (navigator as any).deviceMemory = 8;\n\n      const ram = await capabilityService.getRAM();\n      expect(ram).toBe(8);\n    });\n  });\n});","size_bytes":6116},"client/src/components/action-sheet.tsx":{"content":"import { Dialog, DialogContent } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ActionSheetProps {\n  isOpen: boolean;\n  onClose: () => void;\n  title?: string;\n  actions: Array<{\n    label: string;\n    icon?: string;\n    onClick: () => void;\n    variant?: 'default' | 'destructive' | 'outline';\n    disabled?: boolean;\n  }>;\n}\n\nexport function ActionSheet({ isOpen, onClose, title, actions }: ActionSheetProps) {\n  if (!isOpen) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-sm p-0 gap-0\">\n        {title && (\n          <div className=\"p-4 border-b border-border\">\n            <h3 className=\"font-semibold text-center\">{title}</h3>\n          </div>\n        )}\n        <div className=\"p-2\">\n          {actions.map((action, index) => (\n            <Button\n              key={index}\n              variant={action.variant || 'ghost'}\n              className=\"w-full justify-start h-12 text-left\"\n              onClick={() => {\n                action.onClick();\n                onClose();\n              }}\n              disabled={action.disabled}\n              data-testid={`action-${action.label.toLowerCase().replace(/\\s+/g, '-')}`}\n            >\n              {action.icon && (\n                <span className=\"material-icons mr-3 text-lg\">{action.icon}</span>\n              )}\n              {action.label}\n            </Button>\n          ))}\n        </div>\n        <div className=\"p-2 pt-0\">\n          <Button\n            variant=\"outline\"\n            className=\"w-full\"\n            onClick={onClose}\n            data-testid=\"action-cancel\"\n          >\n            Cancel\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":1761},"client/src/components/segmented-control.tsx":{"content":"import { Button } from \"@/components/ui/button\";\n\ninterface SegmentedControlProps {\n  segments: Array<{\n    value: string;\n    label: string;\n    icon?: string;\n  }>;\n  value: string;\n  onChange: (value: string) => void;\n  className?: string;\n}\n\nexport function SegmentedControl({ segments, value, onChange, className = \"\" }: SegmentedControlProps) {\n  return (\n    <div className={`inline-flex bg-muted rounded-lg p-1 ${className}`}>\n      {segments.map((segment) => (\n        <Button\n          key={segment.value}\n          variant={value === segment.value ? \"default\" : \"ghost\"}\n          size=\"sm\"\n          onClick={() => onChange(segment.value)}\n          className={`rounded-md ${value === segment.value ? 'shadow-sm' : ''}`}\n          data-testid={`segment-${segment.value}`}\n        >\n          {segment.icon && (\n            <span className=\"material-icons text-sm mr-1\">{segment.icon}</span>\n          )}\n          {segment.label}\n        </Button>\n      ))}\n    </div>\n  );\n}","size_bytes":987},"client/src/components/snackbar.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface SnackbarProps {\n  message: string;\n  action?: {\n    label: string;\n    onClick: () => void;\n  };\n  onDismiss: () => void;\n  duration?: number;\n}\n\nexport function Snackbar({ message, action, onDismiss, duration = 5000 }: SnackbarProps) {\n  const [isVisible, setIsVisible] = useState(true);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setIsVisible(false);\n      setTimeout(onDismiss, 300); // Wait for fade out animation\n    }, duration);\n\n    return () => clearTimeout(timer);\n  }, [duration, onDismiss]);\n\n  if (!isVisible) return null;\n\n  return (\n    <div className={`fixed bottom-4 left-4 right-4 z-50 transform transition-all duration-300 ${isVisible ? 'translate-y-0 opacity-100' : 'translate-y-full opacity-0'}`}>\n      <div className=\"bg-card border border-border rounded-lg p-4 elevation-3 flex items-center justify-between max-w-md mx-auto\">\n        <span className=\"text-sm flex-1 mr-3\" data-testid=\"snackbar-message\">\n          {message}\n        </span>\n        <div className=\"flex items-center space-x-2\">\n          {action && (\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={action.onClick}\n              data-testid=\"snackbar-action\"\n            >\n              {action.label}\n            </Button>\n          )}\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={() => {\n              setIsVisible(false);\n              setTimeout(onDismiss, 300);\n            }}\n            data-testid=\"snackbar-dismiss\"\n          >\n            <span className=\"material-icons text-sm\">close</span>\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":1779},"client/src/pages/enter-po.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useLocation } from \"wouter\";\n\nexport default function EnterPOScreen() {\n  const [, navigate] = useLocation();\n  const [poData, setPOData] = useState({\n    poNumber: '',\n    vendor: '',\n    invoiceNumber: '',\n    invoiceDate: '',\n    totalAmount: ''\n  });\n\n  const handleInputChange = (field: string, value: string) => {\n    setPOData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const handleSubmit = () => {\n    // Placeholder for PO submission\n    console.log('PO Data:', poData);\n    \n    // Navigate back to ops\n    navigate('/ops');\n  };\n\n  const handleCancel = () => {\n    navigate('/ops');\n  };\n\n  return (\n    <div className=\"h-screen overflow-y-auto\">\n      <div className=\"p-4 space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold\" data-testid=\"enter-po-title\">\n              Enter Purchase Order\n            </h1>\n            <p className=\"text-sm text-muted-foreground\">\n              Manually enter PO and invoice details\n            </p>\n          </div>\n          <button \n            onClick={handleCancel}\n            className=\"text-muted-foreground hover:text-foreground\"\n            data-testid=\"cancel-po-entry\"\n          >\n            <span className=\"material-icons\">close</span>\n          </button>\n        </div>\n\n        {/* PO Entry Form */}\n        <Card className=\"elevation-1\">\n          <CardHeader>\n            <CardTitle>Purchase Order Details</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"poNumber\">PO Number</Label>\n              <Input\n                id=\"poNumber\"\n                placeholder=\"Enter PO number\"\n                value={poData.poNumber}\n                onChange={(e) => handleInputChange('poNumber', e.target.value)}\n                data-testid=\"input-po-number\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"vendor\">Vendor Name</Label>\n              <Input\n                id=\"vendor\"\n                placeholder=\"Enter vendor name\"\n                value={poData.vendor}\n                onChange={(e) => handleInputChange('vendor', e.target.value)}\n                data-testid=\"input-vendor\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"invoiceNumber\">Invoice Number</Label>\n              <Input\n                id=\"invoiceNumber\"\n                placeholder=\"Enter invoice number\"\n                value={poData.invoiceNumber}\n                onChange={(e) => handleInputChange('invoiceNumber', e.target.value)}\n                data-testid=\"input-invoice-number\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"invoiceDate\">Invoice Date</Label>\n              <Input\n                id=\"invoiceDate\"\n                type=\"date\"\n                value={poData.invoiceDate}\n                onChange={(e) => handleInputChange('invoiceDate', e.target.value)}\n                data-testid=\"input-invoice-date\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"totalAmount\">Total Amount</Label>\n              <Input\n                id=\"totalAmount\"\n                type=\"number\"\n                placeholder=\"Enter total amount\"\n                value={poData.totalAmount}\n                onChange={(e) => handleInputChange('totalAmount', e.target.value)}\n                data-testid=\"input-total-amount\"\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Action Buttons */}\n        <div className=\"flex space-x-3\">\n          <Button \n            variant=\"outline\" \n            className=\"flex-1\"\n            onClick={handleCancel}\n            data-testid=\"cancel-po-button\"\n          >\n            Cancel\n          </Button>\n          <Button \n            className=\"flex-1\"\n            onClick={handleSubmit}\n            disabled={!poData.poNumber || !poData.vendor}\n            data-testid=\"submit-po-button\"\n          >\n            Submit PO\n          </Button>\n        </div>\n\n        {/* Placeholder for future item entry */}\n        <Card className=\"elevation-1 bg-muted/30\">\n          <CardContent className=\"p-6 text-center\">\n            <span className=\"material-icons text-4xl text-muted-foreground mb-2\">inventory_2</span>\n            <h3 className=\"font-semibold text-muted-foreground\">Item Details Entry</h3>\n            <p className=\"text-sm text-muted-foreground mt-1\">\n              Individual item scanning and entry coming in Iteration 2\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":5058},"client/src/pages/ops.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Input } from '@/components/ui/input';\nimport { useToast } from '@/hooks/use-toast';\nimport { \n  Package, \n  AlertTriangle, \n  TrendingUp, \n  Users, \n  Calendar,\n  Search,\n  Filter,\n  Download,\n  RefreshCw,\n  PlusCircle,\n  Settings,\n  BarChart3,\n  FileText,\n  Truck\n} from 'lucide-react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useLocation } from 'wouter';\n\ninterface Product {\n  id: string;\n  name: string;\n  description: string;\n  price: number;\n}\n\ninterface Stock {\n  id: string;\n  productId: string;\n  batchNumber: string;\n  quantity: number;\n  expiryDate: string;\n}\n\ninterface Sale {\n  id: string;\n  total: number;\n  date: string;\n  items: string;\n}\n\ninterface Document {\n  id: string;\n  confirmedType: string;\n  createdAt: string;\n  totals?: {\n    net?: string;\n  };\n  lineItems?: Array<{ name: string; }>;\n  businessIntelligence?: any;\n}\n\ninterface InventoryItem {\n  product: Product;\n  stock: Stock[];\n  totalQuantity: number;\n  nearExpiry: number;\n  lowStock: boolean;\n}\n\nexport default function OpsScreen() {\n  const [, setLocation] = useLocation();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedTab, setSelectedTab] = useState('inventory');\n  const [userRole, setUserRole] = useState('retailer');\n  const { toast } = useToast();\n\n  useEffect(() => {\n    // Load user role from localStorage\n    const roleSettings = localStorage.getItem('userRole');\n    setUserRole(roleSettings || 'retailer');\n  }, []);\n\n  // Fetch data\n  const { data: products = [] } = useQuery<Product[]>({\n    queryKey: ['/api/products'],\n  });\n\n  const { data: stock = [] } = useQuery<Stock[]>({\n    queryKey: ['/api/stock'],\n  });\n\n  const { data: sales = [] } = useQuery<Sale[]>({\n    queryKey: ['/api/sales'],\n  });\n\n  const { data: todaysSales } = useQuery({\n    queryKey: ['/api/sales/today'],\n  });\n  \n  // Fetch scanned documents\n  const { data: documents = [] } = useQuery<Document[]>({\n    queryKey: ['/api/documents'],\n  });\n  \n  console.log('[OPS-DEBUG] Documents loaded:', documents.length);\n  if (documents.length > 0) {\n    console.log('[OPS-DEBUG] Sample document:', {\n      id: documents[0]?.id,\n      confirmedType: documents[0]?.confirmedType,\n      lineItemsCount: documents[0]?.lineItems?.length || 0,\n      hasBusinessIntelligence: !!documents[0]?.businessIntelligence\n    });\n  }\n\n  // Process inventory data\n  const inventoryItems: InventoryItem[] = products.map(product => {\n    const productStock = stock.filter(s => s.productId === product.id);\n    const totalQuantity = productStock.reduce((sum, s) => sum + s.quantity, 0);\n    \n    // Check for near expiry (within 30 days)\n    const thirtyDaysFromNow = new Date();\n    thirtyDaysFromNow.setDate(thirtyDaysFromNow.getDate() + 30);\n    \n    const nearExpiry = productStock.filter(s => \n      new Date(s.expiryDate) <= thirtyDaysFromNow\n    ).reduce((sum, s) => sum + s.quantity, 0);\n\n    const lowStock = totalQuantity < 20; // Low stock threshold\n\n    return {\n      product,\n      stock: productStock,\n      totalQuantity,\n      nearExpiry,\n      lowStock\n    };\n  });\n\n  // Filter inventory based on search\n  const filteredInventory = inventoryItems.filter(item =>\n    item.product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    item.product.description.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  // Get alerts\n  const lowStockItems = inventoryItems.filter(item => item.lowStock);\n  const nearExpiryItems = inventoryItems.filter(item => item.nearExpiry > 0);\n\n  // Calculate metrics\n  const totalProducts = products.length;\n  \n  // Calculate stock value based on actual invoice data (purchase cost)\n  const totalStockValue = documents\n    .filter((doc: any) => doc.confirmedType === 'invoice')\n    .reduce((totalValue: number, invoice: any) => {\n      if (!invoice.lineItems) return totalValue;\n      \n      return totalValue + invoice.lineItems.reduce((invoiceValue: number, item: any) => {\n        const qty = parseFloat(item.qty || '0');\n        const rate = parseFloat(item.rate || item.mrp || '0');\n        return invoiceValue + (qty * rate);\n      }, 0);\n    }, 0);\n  const todaysSalesAmount = (todaysSales as any)?.total || 0;\n  \n  // Document insights\n  const totalDocuments = documents.length;\n  const documentsToday = documents.filter((doc: any) => {\n    const docDate = new Date(doc.createdAt);\n    const today = new Date();\n    return docDate.toDateString() === today.toDateString();\n  }).length;\n  \n  const documentsByType = documents.reduce((acc: any, doc: any) => {\n    const type = doc.confirmedType || 'other';\n    acc[type] = (acc[type] || 0) + 1;\n    return acc;\n  }, {});\n  \n  // Calculate total value from invoices\n  const invoiceValue = documents\n    .filter((doc: any) => doc.confirmedType === 'invoice')\n    .reduce((sum: number, doc: any) => {\n      const total = parseFloat(doc.totals?.net || '0');\n      return sum + total;\n    }, 0);\n\n  // ROLE-BASED ANALYTICS CALCULATIONS\n  const getRoleBasedInsights = () => {\n    const now = new Date();\n    const thirtyDaysAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n    \n    // Calculate goods in/out based on role\n    const goodsIn = inventoryItems.reduce((sum, item) => sum + item.totalQuantity, 0);\n    const goodsOut = sales.length; // Simplified - should be actual quantities sold\n    \n    // Top/Bottom movers (by stock quantity - proxy for movement)\n    const sortedByMovement = [...inventoryItems].sort((a, b) => b.totalQuantity - a.totalQuantity);\n    const topMovers = sortedByMovement.slice(0, 10);\n    const bottomMovers = sortedByMovement.slice(-10).reverse();\n    \n    // Category analysis (basic grouping by medicine type)\n    const categoryStats: Record<string, { count: number; value: number }> = {};\n    inventoryItems.forEach(item => {\n      const category = item.product.name.includes('Tab') ? 'Tablets' : \n                      item.product.name.includes('Syrup') ? 'Syrups' : \n                      item.product.name.includes('Capsule') ? 'Capsules' : 'Others';\n      \n      if (!categoryStats[category]) categoryStats[category] = { count: 0, value: 0 };\n      categoryStats[category].count += item.totalQuantity;\n      categoryStats[category].value += item.totalQuantity * item.product.price;\n    });\n    \n    return {\n      goodsIn,\n      goodsOut,\n      topMovers,\n      bottomMovers,\n      categoryStats,\n      turnoverRatio: goodsOut > 0 ? (goodsIn / goodsOut).toFixed(2) : 'N/A'\n    };\n  };\n\n  const insights = getRoleBasedInsights();\n\n  const handleRefresh = () => {\n    window.location.reload();\n    toast({\n      title: 'Data Refreshed',\n      description: 'All data has been updated successfully',\n    });\n  };\n\n  const handleExport = () => {\n    toast({\n      title: 'Export Started',\n      description: 'Your data export is being prepared',\n    });\n  };\n\n  // Quick action widgets\n  const quickActions = [\n    {\n      id: 'sales-ledger',\n      title: 'Sales Ledger',\n      icon: <FileText className=\"w-6 h-6\" />,\n      description: 'View all sales transactions',\n      action: () => setLocation('/sales-ledger')\n    },\n    {\n      id: 'receive-stock',\n      title: 'Receive Stock',\n      icon: <Truck className=\"w-6 h-6\" />,\n      description: 'Process incoming inventory',\n      action: () => setLocation('/receive-stock')\n    },\n    {\n      id: 'reports',\n      title: 'Reports',\n      icon: <BarChart3 className=\"w-6 h-6\" />,\n      description: 'Generate business reports',\n      action: () => setLocation('/reports')\n    },\n    {\n      id: 'pos',\n      title: 'Point of Sale',\n      icon: <Package className=\"w-6 h-6\" />,\n      description: 'Process customer transactions',\n      action: () => setLocation('/pos')\n    }\n  ];\n\n  return (\n    <div className=\"p-4 space-y-6 h-full overflow-y-auto\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-4 sm:space-y-0\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"ops-title\">\n            Operations Dashboard\n          </h1>\n          <p className=\"text-muted-foreground\">Comprehensive pharmacy management center</p>\n        </div>\n        <div className=\"flex space-x-2\">\n          <Button variant=\"outline\" size=\"sm\" onClick={handleRefresh}>\n            <RefreshCw className=\"w-4 h-4 mr-2\" />\n            Refresh\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" onClick={handleExport}>\n            <Download className=\"w-4 h-4 mr-2\" />\n            Export\n          </Button>\n        </div>\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Products</CardTitle>\n            <Package className=\"w-4 h-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{totalProducts}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Active inventory items\n            </p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Stock Value (Purchase Cost)</CardTitle>\n            <TrendingUp className=\"w-4 h-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">₹{totalStockValue.toLocaleString()}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Based on invoice purchase rates\n            </p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Goods In ({userRole === 'wholesaler' ? 'Purchased' : 'Received'})</CardTitle>\n            <Truck className=\"w-4 h-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">{insights.goodsIn}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Items added to inventory\n            </p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Goods Out ({userRole === 'wholesaler' ? 'Distributed' : 'Sold'})</CardTitle>\n            <Package className=\"w-4 h-4 text-blue-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">{insights.goodsOut}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {userRole === 'wholesaler' ? 'Orders fulfilled' : 'Items sold'}\n            </p>\n          </CardContent>\n        </Card>\n\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Today's Sales</CardTitle>\n            <Calendar className=\"w-4 h-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"todays-total\">\n              ₹{todaysSalesAmount.toLocaleString()}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Revenue today\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Alerts</CardTitle>\n            <AlertTriangle className=\"w-4 h-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-600\">\n              {lowStockItems.length + nearExpiryItems.length}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Requires attention\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Documents Scanned</CardTitle>\n            <FileText className=\"w-4 h-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">{totalDocuments}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Total processed ({documentsToday} today)\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Invoice Value</CardTitle>\n            <TrendingUp className=\"w-4 h-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">₹{invoiceValue.toLocaleString()}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              From scanned invoices\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* ROLE-BASED BUSINESS INSIGHTS */}\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-xl font-semibold\">Business Intelligence - {userRole.charAt(0).toUpperCase() + userRole.slice(1)} View</h2>\n          <Badge variant=\"outline\">{userRole.toUpperCase()}</Badge>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          {/* Top 10 Product Movers */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <TrendingUp className=\"w-5 h-5 text-green-600\" />\n                <span>Top 10 Product Movers</span>\n              </CardTitle>\n              <CardDescription>Products with highest stock levels</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                {insights.topMovers.slice(0, 10).map((item, index) => (\n                  <div key={item.product.id} className=\"flex items-center justify-between text-sm\">\n                    <span className=\"font-medium\">{index + 1}. {item.product.name}</span>\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"text-green-600 font-semibold\">{item.totalQuantity}</span>\n                      <span className=\"text-muted-foreground\">units</span>\n                    </div>\n                  </div>\n                ))}\n                {insights.topMovers.length === 0 && (\n                  <p className=\"text-sm text-muted-foreground text-center py-4\">No movement data available</p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Bottom 10 Product Movers */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <AlertTriangle className=\"w-5 h-5 text-orange-600\" />\n                <span>Bottom 10 Product Movers</span>\n              </CardTitle>\n              <CardDescription>Products with lowest stock levels</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                {insights.bottomMovers.slice(0, 10).map((item, index) => (\n                  <div key={item.product.id} className=\"flex items-center justify-between text-sm\">\n                    <span className=\"font-medium\">{index + 1}. {item.product.name}</span>\n                    <div className=\"flex items-center space-x-2\">\n                      <span className={`font-semibold ${item.totalQuantity < 10 ? 'text-red-600' : 'text-orange-600'}`}>{item.totalQuantity}</span>\n                      <span className=\"text-muted-foreground\">units</span>\n                    </div>\n                  </div>\n                ))}\n                {insights.bottomMovers.length === 0 && (\n                  <p className=\"text-sm text-muted-foreground text-center py-4\">No movement data available</p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Category Analysis */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <BarChart3 className=\"w-5 h-5 text-blue-600\" />\n                <span>Category Analytics</span>\n              </CardTitle>\n              <CardDescription>Stock distribution by product type</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {Object.entries(insights.categoryStats).map(([category, stats]) => (\n                  <div key={category}>\n                    <div className=\"flex items-center justify-between mb-1\">\n                      <span className=\"font-medium text-sm\">{category}</span>\n                      <span className=\"text-sm text-muted-foreground\">{stats.count} units</span>\n                    </div>\n                    <div className=\"bg-muted rounded-full h-2 mb-1\">\n                      <div \n                        className=\"bg-blue-600 h-2 rounded-full\" \n                        style={{ width: `${Math.min((stats.value / totalStockValue) * 100, 100)}%` }}\n                      />\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">₹{stats.value.toFixed(0)} value</div>\n                  </div>\n                ))}\n                {Object.keys(insights.categoryStats).length === 0 && (\n                  <p className=\"text-sm text-muted-foreground text-center py-4\">No category data available</p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* ROLE-SPECIFIC PERFORMANCE METRICS */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Users className=\"w-5 h-5 text-purple-600\" />\n            <span>{userRole === 'wholesaler' ? 'Distribution' : userRole === 'distributor' ? 'Supply Chain' : 'Retail'} Performance</span>\n          </CardTitle>\n          <CardDescription>\n            Key metrics for {userRole} operations\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-purple-600\">{insights.turnoverRatio}</div>\n              <div className=\"text-xs text-muted-foreground\">Turnover Ratio</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-blue-600\">{lowStockItems.length}</div>\n              <div className=\"text-xs text-muted-foreground\">Low Stock Items</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-orange-600\">{nearExpiryItems.length}</div>\n              <div className=\"text-xs text-muted-foreground\">Near Expiry</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-green-600\">{Object.keys(insights.categoryStats).length}</div>\n              <div className=\"text-xs text-muted-foreground\">Active Categories</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Quick Actions */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Quick Actions</CardTitle>\n          <CardDescription>\n            Access key pharmacy operations and management tools\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            {quickActions.map((action) => (\n              <div\n                key={action.id}\n                className=\"p-4 border rounded-lg cursor-pointer hover:bg-muted/50 transition-colors\"\n                onClick={action.action}\n                data-testid={`widget-${action.id}`}\n              >\n                <div className=\"flex flex-col items-center text-center space-y-2\">\n                  <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center text-primary\">\n                    {action.icon}\n                  </div>\n                  <div>\n                    <h3 className=\"font-medium text-sm\">{action.title}</h3>\n                    <p className=\"text-xs text-muted-foreground\">{action.description}</p>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Main Content Tabs */}\n      <Tabs value={selectedTab} onValueChange={setSelectedTab} className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"inventory\">Inventory</TabsTrigger>\n          <TabsTrigger value=\"alerts\">Alerts</TabsTrigger>\n          <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n        </TabsList>\n\n        {/* Inventory Management */}\n        <TabsContent value=\"inventory\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-4 sm:space-y-0\">\n                <div>\n                  <CardTitle>Inventory Management</CardTitle>\n                  <CardDescription>\n                    Manage your pharmacy stock levels and product information\n                  </CardDescription>\n                </div>\n                <Button \n                  size=\"sm\" \n                  onClick={() => setLocation('/inventory')}\n                >\n                  <PlusCircle className=\"w-4 h-4 mr-2\" />\n                  Manage Products\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {/* Search */}\n              <div className=\"flex space-x-2\">\n                <div className=\"relative flex-1\">\n                  <Search className=\"absolute left-2 top-2.5 w-4 h-4 text-muted-foreground\" />\n                  <Input\n                    placeholder=\"Search products...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-8\"\n                  />\n                </div>\n                <Button variant=\"outline\" size=\"sm\">\n                  <Filter className=\"w-4 h-4 mr-2\" />\n                  Filter\n                </Button>\n              </div>\n\n              {/* Inventory List */}\n              <div className=\"space-y-2 max-h-80 overflow-y-auto\">\n                {filteredInventory.map((item) => (\n                  <div\n                    key={item.product.id}\n                    className=\"flex items-center justify-between p-4 border rounded-lg\"\n                  >\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2\">\n                        <h3 className=\"font-medium\">{item.product.name}</h3>\n                        {item.lowStock && (\n                          <Badge variant=\"destructive\" className=\"text-xs\">\n                            Low Stock\n                          </Badge>\n                        )}\n                        {item.nearExpiry > 0 && (\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            Near Expiry\n                          </Badge>\n                        )}\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {item.product.description}\n                      </p>\n                      <div className=\"flex items-center space-x-4 mt-1\">\n                        <span className=\"text-sm\">\n                          Qty: <strong>{item.totalQuantity}</strong>\n                        </span>\n                        <span className=\"text-sm\">\n                          Price: <strong>₹{item.product.price}</strong>\n                        </span>\n                        <span className=\"text-sm\">\n                          Batches: <strong>{item.stock.length}</strong>\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"flex space-x-2\">\n                      <Button variant=\"outline\" size=\"sm\">\n                        Edit\n                      </Button>\n                      <Button variant=\"outline\" size=\"sm\">\n                        <Settings className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Alerts */}\n        <TabsContent value=\"alerts\" className=\"space-y-4\">\n          <div className=\"grid gap-4\">\n            {/* Low Stock Alerts */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <AlertTriangle className=\"w-5 h-5 mr-2 text-red-500\" />\n                  Low Stock Alerts ({lowStockItems.length})\n                </CardTitle>\n                <CardDescription>\n                  Products with quantity below threshold (20 units)\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {lowStockItems.length === 0 ? (\n                  <p className=\"text-muted-foreground text-center py-4\">\n                    No low stock alerts\n                  </p>\n                ) : (\n                  <div className=\"space-y-2\">\n                    {lowStockItems.map((item) => (\n                      <div\n                        key={item.product.id}\n                        className=\"flex items-center justify-between p-3 bg-red-50 dark:bg-red-950/20 rounded-lg\"\n                      >\n                        <div>\n                          <h4 className=\"font-medium\">{item.product.name}</h4>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Current stock: {item.totalQuantity} units\n                          </p>\n                        </div>\n                        <Button \n                          size=\"sm\" \n                          onClick={() => setLocation('/receive-stock')}\n                        >\n                          Reorder\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Near Expiry Alerts */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Calendar className=\"w-5 h-5 mr-2 text-yellow-500\" />\n                  Near Expiry Alerts ({nearExpiryItems.length})\n                </CardTitle>\n                <CardDescription>\n                  Products expiring within 30 days\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {nearExpiryItems.length === 0 ? (\n                  <p className=\"text-muted-foreground text-center py-4\">\n                    No near expiry alerts\n                  </p>\n                ) : (\n                  <div className=\"space-y-2\">\n                    {nearExpiryItems.map((item) => (\n                      <div\n                        key={item.product.id}\n                        className=\"flex items-center justify-between p-3 bg-yellow-50 dark:bg-yellow-950/20 rounded-lg\"\n                      >\n                        <div>\n                          <h4 className=\"font-medium\">{item.product.name}</h4>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {item.nearExpiry} units expiring soon\n                          </p>\n                        </div>\n                        <Button size=\"sm\" variant=\"outline\">\n                          Discount\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Analytics */}\n        <TabsContent value=\"analytics\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Business Analytics</CardTitle>\n              <CardDescription>\n                Key performance indicators and trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                  <h4 className=\"font-medium\">Sales Performance</h4>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm\">Today's Sales</span>\n                      <span className=\"font-medium\">₹{todaysSalesAmount.toLocaleString()}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm\">This Week (Est.)</span>\n                      <span className=\"font-medium\">₹{(todaysSalesAmount * 7).toLocaleString()}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm\">This Month (Est.)</span>\n                      <span className=\"font-medium\">₹{(todaysSalesAmount * 30).toLocaleString()}</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <h4 className=\"font-medium\">Inventory Insights</h4>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm\">Total Products</span>\n                      <span className=\"font-medium\">{totalProducts}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm\">Low Stock Items</span>\n                      <span className=\"font-medium text-red-600\">{lowStockItems.length}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm\">Near Expiry</span>\n                      <span className=\"font-medium text-yellow-600\">{nearExpiryItems.length}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm\">Total Stock Value</span>\n                      <span className=\"font-medium\">₹{totalStockValue.toLocaleString()}</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":31499},"client/src/lib/theme.ts":{"content":"// Global design tokens following 8-pt baseline grid\nexport const colors = {\n  'primary-500': '#4D94FF',\n  'primary-400': '#267DFF',\n  'tint-200': '#D1E4FF',\n  'tint-100': '#E6F0FF',\n  'green': '#28A745',\n};\n\nexport const ramp = { xl: 24, lg: 20, md: 16, sm: 14, xs: 12 };\n\nexport const theme = {\n  // Spacing using 8-point baseline grid\n  spacing: {\n    xs: '4px',      // 0.5 * BASE\n    sm: '8px',      // 1 * BASE  \n    md: '16px',     // 2 * BASE\n    lg: '24px',     // 3 * BASE\n    xl: '32px',     // 4 * BASE\n    '2xl': '48px',  // 6 * BASE\n    '3xl': '64px',  // 8 * BASE\n  },\n\n  // Typography scale with line heights\n  typography: {\n    'heading-xl': {\n      fontSize: '24px',\n      lineHeight: '32px',\n      fontWeight: '700'\n    },\n    'heading-lg': {\n      fontSize: '20px', \n      lineHeight: '28px',\n      fontWeight: '600'\n    },\n    'heading-md': {\n      fontSize: '18px',\n      lineHeight: '24px', \n      fontWeight: '600'\n    },\n    'body-lg': {\n      fontSize: '16px',\n      lineHeight: '24px',\n      fontWeight: '400'\n    },\n    'body': {\n      fontSize: '14px',\n      lineHeight: '20px',\n      fontWeight: '400'\n    },\n    'body-sm': {\n      fontSize: '12px',\n      lineHeight: '16px',\n      fontWeight: '400'\n    }\n  },\n\n  // Icon sizes following 8-pt grid\n  iconSizes: {\n    xs: '16px',\n    sm: '20px', \n    md: '24px',\n    lg: '32px',\n    xl: '48px'\n  },\n\n  // Border radius\n  borderRadius: {\n    sm: '4px',\n    md: '8px',\n    lg: '12px',\n    xl: '16px'\n  }\n};\n\n// Tailwind helper classes for consistent styling\nexport const tw = {\n  // Typography helpers\n  headingXl: 'text-2xl leading-8 font-bold',\n  headingLg: 'text-xl leading-7 font-semibold', \n  headingMd: 'text-lg leading-6 font-semibold',\n  bodyLg: 'text-base leading-6',\n  body: 'text-sm leading-5',\n  bodySm: 'text-xs leading-4',\n\n  // Spacing helpers  \n  paddingXs: 'p-1',      // 4px\n  paddingSm: 'p-2',      // 8px\n  paddingMd: 'p-4',      // 16px\n  paddingLg: 'p-6',      // 24px\n  paddingXl: 'p-8',      // 32px\n\n  marginXs: 'm-1',       // 4px\n  marginSm: 'm-2',       // 8px\n  marginMd: 'm-4',       // 16px\n  marginLg: 'm-6',       // 24px\n  marginXl: 'm-8',       // 32px\n\n  // Icon size helpers\n  iconXs: 'w-4 h-4',     // 16px\n  iconSm: 'w-5 h-5',     // 20px  \n  iconMd: 'w-6 h-6',     // 24px\n  iconLg: 'w-8 h-8',     // 32px\n  iconXl: 'w-12 h-12',   // 48px\n\n  // Card styling\n  card: 'rounded-lg shadow-sm border border-border',\n  cardHover: 'hover:shadow-md transition-shadow duration-200',\n  \n  // Button styling\n  buttonPrimary: 'bg-primary text-primary-foreground rounded-lg px-4 py-2 font-medium',\n  buttonSecondary: 'bg-secondary text-secondary-foreground rounded-lg px-4 py-2 font-medium',\n  \n  // Status indicators\n  statusOnline: 'w-2 h-2 bg-green-500 rounded-full',\n  statusOffline: 'w-2 h-2 bg-gray-400 rounded-full',\n  statusSyncing: 'w-2 h-2 bg-yellow-500 rounded-full animate-pulse'\n};\n\n// Animation variants for fade in effects\nexport const fadeInVariants = {\n  hidden: { opacity: 0, y: 20 },\n  visible: { \n    opacity: 1, \n    y: 0,\n    transition: { duration: 0.3, ease: 'easeOut' }\n  }\n};\n\nexport const staggerContainer = {\n  hidden: { opacity: 0 },\n  visible: {\n    opacity: 1,\n    transition: {\n      staggerChildren: 0.1,\n      delayChildren: 0.1\n    }\n  }\n};\n\n// Color helper functions\nexport const getTint = (lvl: 100 | 200): string => {\n  return colors[`tint-${lvl}`];\n};\n\nexport const getPrimary = (level: 400 | 500): string => {\n  return colors[`primary-${level}`];\n};\n\nexport const getColor = (color: keyof typeof colors): string => {\n  return colors[color];\n};","size_bytes":3587},"client/src/components/smart-action-fab.tsx":{"content":"import { useLocation } from 'wouter';\n\ninterface SmartActionFABProps {\n  onAssistantOpen?: () => void;\n}\n\nexport function SmartActionFAB({ onAssistantOpen }: SmartActionFABProps) {\n  const [, setLocation] = useLocation();\n\n  // Handle click to open AI assistant in full screen\n  const handleClick = () => {\n    setLocation('/ai-assistant');\n    if (onAssistantOpen) {\n      onAssistantOpen();\n    }\n  };\n\n  return (\n    <div className=\"fixed bottom-20 right-4 z-40\">\n      <button\n        className=\"relative w-14 h-14 bg-gradient-to-br from-blue-500 to-purple-600 text-white rounded-full shadow-lg hover:shadow-xl transition-all duration-200 flex items-center justify-center group hover:scale-105\"\n        onClick={handleClick}\n        data-testid=\"ai-chat-fab\"\n        title=\"AI Assistant - Upload bills, prescriptions & invoices\"\n      >\n        {/* Human with brain icon */}\n        <span className=\"material-icons text-2xl\">psychology</span>\n        \n        {/* Upload indicator */}\n        <div className=\"absolute -top-1 -right-1 w-6 h-6 bg-green-500 rounded-full flex items-center justify-center\">\n          <span className=\"material-icons text-xs text-white\">upload</span>\n        </div>\n        \n        {/* Pulse animation for attention */}\n        <div className=\"absolute inset-0 rounded-full bg-gradient-to-br from-blue-500 to-purple-600 animate-pulse opacity-75\"></div>\n      </button>\n    </div>\n  );\n}","size_bytes":1419},"client/src/pages/adjust-stock.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { tw } from \"@/lib/theme\";\n\nexport default function AdjustStockScreen() {\n  const [, navigate] = useLocation();\n\n  return (\n    <div className=\"h-screen overflow-y-auto\">\n      <div className=\"p-4 space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <button \n              onClick={() => navigate('/ops')}\n              className=\"text-muted-foreground hover:text-foreground\"\n              data-testid=\"back-to-ops\"\n            >\n              <span className=\"material-icons\">arrow_back</span>\n            </button>\n            <h1 className={`${tw.headingXl}`} data-testid=\"adjust-stock-title\">Adjust Stock</h1>\n          </div>\n          <div className=\"text-xs bg-orange-100 text-orange-800 px-2 py-1 rounded\">\n            COMING SOON\n          </div>\n        </div>\n\n        {/* Placeholder Content */}\n        <div className=\"flex flex-col items-center justify-center py-16 text-center\">\n          <div className=\"w-24 h-24 bg-green-50 rounded-full flex items-center justify-center mb-6\">\n            <span className=\"material-icons text-4xl text-green-600\">edit</span>\n          </div>\n          <h2 className={`${tw.headingLg} mb-3`}>Stock Adjustments</h2>\n          <p className={`${tw.body} text-muted-foreground max-w-md mb-6`}>\n            Manually adjust inventory levels, handle damaged goods, and maintain accurate stock counts with audit trails.\n          </p>\n          <div className=\"bg-gradient-to-r from-green-50 to-emerald-50 p-4 rounded-lg max-w-md\">\n            <h3 className=\"font-semibold text-sm mb-2\">Coming in Iteration 2</h3>\n            <ul className=\"text-xs text-muted-foreground space-y-1 text-left\">\n              <li>• Manual stock adjustments</li>\n              <li>• Damage and expiry handling</li>\n              <li>• Audit trail tracking</li>\n              <li>• Batch adjustment tools</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":2074},"client/src/pages/returns.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { tw } from \"@/lib/theme\";\n\nexport default function ReturnsScreen() {\n  const [, navigate] = useLocation();\n\n  return (\n    <div className=\"h-screen overflow-y-auto\">\n      <div className=\"p-4 space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <button \n              onClick={() => navigate('/ops')}\n              className=\"text-muted-foreground hover:text-foreground\"\n              data-testid=\"back-to-ops\"\n            >\n              <span className=\"material-icons\">arrow_back</span>\n            </button>\n            <h1 className={`${tw.headingXl}`} data-testid=\"returns-title\">Returns</h1>\n          </div>\n          <div className=\"text-xs bg-orange-100 text-orange-800 px-2 py-1 rounded\">\n            COMING SOON\n          </div>\n        </div>\n\n        {/* Placeholder Content */}\n        <div className=\"flex flex-col items-center justify-center py-16 text-center\">\n          <div className=\"w-24 h-24 bg-blue-50 rounded-full flex items-center justify-center mb-6\">\n            <span className=\"material-icons text-4xl text-blue-600\">u_turn_left</span>\n          </div>\n          <h2 className={`${tw.headingLg} mb-3`}>Returns Management</h2>\n          <p className={`${tw.body} text-muted-foreground max-w-md mb-6`}>\n            Handle customer returns, process refunds, and manage return inventory with automated workflows.\n          </p>\n          <div className=\"bg-gradient-to-r from-blue-50 to-indigo-50 p-4 rounded-lg max-w-md\">\n            <h3 className=\"font-semibold text-sm mb-2\">Coming in Iteration 2</h3>\n            <ul className=\"text-xs text-muted-foreground space-y-1 text-left\">\n              <li>• Scan return receipts</li>\n              <li>• Process customer refunds</li>\n              <li>• Track returned inventory</li>\n              <li>• Generate return reports</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":2049},"client/src/pages/sales-ledger.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useLocation } from \"wouter\";\nimport { tw } from \"@/lib/theme\";\n\nexport default function SalesLedgerScreen() {\n  const [, navigate] = useLocation();\n  \n  const { data: sales = [], isLoading } = useQuery({\n    queryKey: ['/api/sales'],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-screen\">\n        <div className=\"text-center\">\n          <span className=\"material-icons animate-spin text-4xl text-primary\">sync</span>\n          <p className=\"mt-2 text-muted-foreground\">Loading sales data...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-screen overflow-y-auto\">\n      <div className=\"p-4 space-y-4\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <button \n              onClick={() => navigate('/ops')}\n              className=\"text-muted-foreground hover:text-foreground\"\n              data-testid=\"back-to-ops\"\n            >\n              <span className=\"material-icons\">arrow_back</span>\n            </button>\n            <h1 className={`${tw.headingXl}`} data-testid=\"sales-ledger-title\">Sales Ledger</h1>\n          </div>\n        </div>\n\n        {/* Sales List */}\n        <div className=\"space-y-4\">\n          {(sales as any[]).length > 0 ? (\n            (sales as any[]).map((sale: any) => (\n              <Card key={sale.id} className=\"elevation-1\" data-testid={`sale-${sale.id}`}>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center\">\n                        <span className=\"material-icons text-primary\">receipt</span>\n                      </div>\n                      <div>\n                        <p className=\"font-semibold\" data-testid={`sale-id-${sale.id}`}>\n                          {sale.id.toUpperCase()}\n                        </p>\n                        <p className=\"text-sm text-muted-foreground\" data-testid={`sale-date-${sale.id}`}>\n                          {new Date(sale.date).toLocaleDateString()} at {new Date(sale.date).toLocaleTimeString()}\n                        </p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"text-right\">\n                      <p className=\"text-2xl font-bold\" data-testid={`sale-total-${sale.id}`}>\n                        ₹{sale.total.toFixed(2)}\n                      </p>\n                      <div className=\"flex items-center space-x-1 justify-end mt-1\">\n                        <div className={`w-2 h-2 rounded-full ${sale.synced ? 'bg-green-500' : 'bg-yellow-500'}`}></div>\n                        <span className=\"text-xs text-muted-foreground\" data-testid={`sale-sync-status-${sale.id}`}>\n                          {sale.synced ? 'Synced' : 'Pending Sync'}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          ) : (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <span className=\"material-icons text-4xl mb-2\">receipt_long</span>\n              <p>No sales recorded yet</p>\n            </div>\n          )}\n        </div>\n        \n        {/* Bottom spacing */}\n        <div className=\"h-20\"></div>\n      </div>\n    </div>\n  );\n}","size_bytes":3680},"client/src/services/camera.ts":{"content":"import { push } from \"@/utils/dev-logger\";\n\n// Universal camera or file picker function\nexport async function getCameraOrPicker(): Promise<'camera' | string> {\n  try {\n    // Direct camera permission request\n    const stream = await navigator.mediaDevices.getUserMedia({ \n      video: { facingMode: 'environment' } \n    });\n    \n    if (stream) {\n      // Stop the stream immediately since we just wanted to check permission\n      stream.getTracks().forEach(track => track.stop());\n      push('Camera permission granted - returning camera mode');\n      return 'camera';\n    }\n  } catch (error) {\n    push(`Camera failed: ${error} - trying file picker`);\n    \n    // If we're on web and camera failed, show file picker\n    if (typeof window !== 'undefined') {\n      return new Promise((resolve, reject) => {\n        const input = document.createElement('input');\n        input.type = 'file';\n        input.accept = 'image/*';\n        input.style.display = 'none';\n        \n        input.onchange = (e) => {\n          const file = (e.target as HTMLInputElement).files?.[0];\n          if (file) {\n            const url = URL.createObjectURL(file);\n            push(`File selected: ${file.name}`);\n            resolve(url);\n          } else {\n            reject(new Error('NO_FILE'));\n          }\n          document.body.removeChild(input);\n        };\n        \n        input.oncancel = () => {\n          push('File picker cancelled');\n          reject(new Error('CANCELLED'));\n          document.body.removeChild(input);\n        };\n        \n        document.body.appendChild(input);\n        input.click();\n      });\n    }\n  }\n  \n  throw new Error('NO_CAM');\n}\n\n// Legacy function for compatibility - now just redirects to universal function\nexport async function ensureCamera(options: any): Promise<void> {\n  push('ensureCamera() called (legacy mode)');\n  \n  try {\n    const result = await getCameraOrPicker();\n    \n    if (result === 'camera') {\n      push('Camera granted - calling success callback');\n      // Call the appropriate success callback\n      if (options.onGranted) {\n        options.onGranted();\n      } else if (options.onOK) {\n        options.onOK();\n      }\n    } else {\n      push('File picker used - calling success callback with file');\n      // For file picker, also call success\n      if (options.onGranted) {\n        options.onGranted();\n      } else if (options.onOK) {\n        options.onOK();\n      }\n    }\n  } catch (error) {\n    push(`Camera/picker failed: ${error}`);\n    // Call the appropriate failure callback\n    if (options.onDenied) {\n      options.onDenied();\n    } else if (options.onFail) {\n      options.onFail();\n    }\n  }\n}\n\n// Web fallback: file input capture\nexport function createFileInputCapture(onCapture: (file: File) => void): HTMLInputElement {\n  const input = document.createElement('input');\n  input.type = 'file';\n  input.accept = 'image/*';\n  input.capture = 'environment' as any; // Use rear camera on mobile\n  input.style.display = 'none';\n  \n  input.addEventListener('change', (event) => {\n    const file = (event.target as HTMLInputElement).files?.[0];\n    if (file) {\n      onCapture(file);\n    }\n  });\n  \n  document.body.appendChild(input);\n  return input;\n}\n\n// Cleanup file input\nexport function removeFileInput(input: HTMLInputElement) {\n  if (input.parentNode) {\n    input.parentNode.removeChild(input);\n  }\n}","size_bytes":3368},"client/src/pages/barcode-scan.tsx":{"content":"import React, { useEffect, useRef, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { ensureCamera, createFileInputCapture, removeFileInput } from \"@/services/camera\";\nimport { capabilityService, DeviceTier } from \"@/services/capability\";\nimport { push } from \"@/utils/dev-logger\";\nimport type { Product, Stock } from \"@shared/schema\";\n\nexport default function BarcodeScannerScreen() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const fileInputRef = useRef<HTMLInputElement | null>(null);\n  \n  const [isScanning, setIsScanning] = useState(false);\n  const [cameraStream, setCameraStream] = useState<MediaStream | null>(null);\n  const [deviceTier, setDeviceTier] = useState<DeviceTier>(DeviceTier.VALUE);\n  const [showWebFallback, setShowWebFallback] = useState(false);\n\n  // Fetch products for barcode lookup\n  const { data: products = [] } = useQuery<Product[]>({\n    queryKey: ['/api/products']\n  });\n\n  const { data: stockData = [] } = useQuery<Stock[]>({\n    queryKey: ['/api/stock']\n  });\n\n  // Barcode lookup mutation\n  const barcodeLookup = useMutation({\n    mutationFn: async (barcode: string) => {\n      const response = await fetch('/api/barcode/lookup', {\n        method: 'POST',\n        body: JSON.stringify({ barcode }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n      return response.json();\n    },\n    onSuccess: (data: any) => {\n      if (data.productId) {\n        // Navigate back to POS with barcode result\n        navigate(`/pos?barcode=${data.barcode}&productId=${data.productId}&productName=${encodeURIComponent(data.productName || 'Unknown Product')}`);\n        toast({\n          title: \"Product found!\",\n          description: `Added ${data.productName || 'product'} to bill`,\n        });\n      } else {\n        toast({\n          title: \"Product not found\",\n          description: `No product found for barcode: ${data.barcode}`,\n          variant: \"destructive\"\n        });\n      }\n    },\n    onError: () => {\n      toast({\n        title: \"Scan failed\",\n        description: \"Unable to lookup barcode. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Initialize camera with self-test retry logic\n  useEffect(() => {\n    let attempts = 0;\n    const maxAttempts = 2;\n    \n    const tryCameraInit = async () => {\n      push(`BarcodeScannerScreen: Camera init attempt ${attempts + 1}/${maxAttempts}`);\n      const tier = await capabilityService.getTier();\n      setDeviceTier(tier);\n      \n      ensureCamera({\n        onGranted: () => {\n          push('Camera granted → starting barcode scanner');\n          startCameraStream();\n        },\n        onDenied: () => {\n          push('Camera still denied in barcode scanner');\n          attempts++;\n          if (attempts < maxAttempts) {\n            push(`Retrying camera init (${attempts}/${maxAttempts})`);\n            setTimeout(tryCameraInit, 1000);\n          } else {\n            push('Max camera attempts reached - showing fallback');\n            setShowWebFallback(true);\n            toast({\n              title: \"Camera blocked\",\n              description: \"You can still take photos using the capture button below\",\n              variant: \"default\"\n            });\n          }\n        }\n      });\n    };\n\n    tryCameraInit();\n\n    // Cleanup on unmount\n    return () => {\n      stopCamera();\n      if (fileInputRef.current) {\n        removeFileInput(fileInputRef.current);\n      }\n    };\n  }, [navigate]);\n\n  const startCameraStream = async () => {\n    try {\n      const constraints = {\n        video: {\n          facingMode: 'environment',\n          width: deviceTier === DeviceTier.VALUE ? 720 : 1080,\n          height: deviceTier === DeviceTier.VALUE ? 480 : 720\n        }\n      };\n\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\n      setCameraStream(stream);\n      \n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n        videoRef.current.play();\n      }\n      \n      setIsScanning(true);\n      \n      // Start barcode detection\n      if (deviceTier !== DeviceTier.VALUE) {\n        startContinuousScanning();\n      }\n    } catch (error: any) {\n      console.error('Camera stream error:', error);\n      setShowWebFallback(true);\n    }\n  };\n\n  const stopCamera = () => {\n    if (cameraStream) {\n      cameraStream.getTracks().forEach(track => track.stop());\n      setCameraStream(null);\n    }\n    setIsScanning(false);\n  };\n\n  const startContinuousScanning = () => {\n    const detectBarcode = () => {\n      if (!isScanning || !videoRef.current || !canvasRef.current) return;\n\n      const video = videoRef.current;\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      if (ctx && video.readyState === video.HAVE_ENOUGH_DATA) {\n        canvas.width = video.videoWidth;\n        canvas.height = video.videoHeight;\n        ctx.drawImage(video, 0, 0);\n\n        // Simulate barcode detection (in real app, use ZXing or QuaggaJS)\n        // For demo, we'll simulate finding a barcode after 2 seconds\n        setTimeout(() => {\n          if (isScanning) {\n            const mockBarcode = \"1234567890123\";\n            barcodeLookup.mutate(mockBarcode);\n            stopCamera();\n          }\n        }, 2000);\n      }\n\n      if (isScanning) {\n        requestAnimationFrame(detectBarcode);\n      }\n    };\n\n    detectBarcode();\n  };\n\n  const captureFrame = () => {\n    if (videoRef.current && canvasRef.current) {\n      const video = videoRef.current;\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      if (ctx) {\n        canvas.width = video.videoWidth;\n        canvas.height = video.videoHeight;\n        ctx.drawImage(video, 0, 0);\n\n        // Simulate barcode detection\n        const mockBarcode = \"1234567890123\";\n        barcodeLookup.mutate(mockBarcode);\n        stopCamera();\n      }\n    }\n  };\n\n  const handleWebFallback = () => {\n    if (!fileInputRef.current) {\n      fileInputRef.current = createFileInputCapture((file) => {\n        // Process the captured image file\n        const reader = new FileReader();\n        reader.onload = () => {\n          // In a real app, this would analyze the image for barcodes\n          // For demo, simulate finding a barcode\n          const mockBarcode = \"1234567890123\";\n          barcodeLookup.mutate(mockBarcode);\n        };\n        reader.readAsDataURL(file);\n      });\n    }\n    \n    fileInputRef.current.click();\n  };\n\n  return (\n    <div className=\"h-screen bg-black flex flex-col\">\n      {/* Header */}\n      <div className=\"p-4 bg-black/80 backdrop-blur-sm border-b border-white/10\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <Button\n              size=\"sm\"\n              variant=\"secondary\"\n              onClick={() => {\n                stopCamera();\n                navigate('/pos');\n              }}\n              className=\"bg-white/20 hover:bg-white/30 text-white border-white/30\"\n              data-testid=\"back-to-pos\"\n            >\n              <span className=\"material-icons\">arrow_back</span>\n            </Button>\n            <h1 className=\"text-white font-semibold\" data-testid=\"scanner-title\">\n              Barcode Scanner\n            </h1>\n          </div>\n          \n          {showWebFallback && (\n            <Button\n              size=\"sm\"\n              variant=\"secondary\"\n              onClick={handleWebFallback}\n              className=\"bg-white/20 hover:bg-white/30 text-white border-white/30\"\n              data-testid=\"capture-image\"\n            >\n              <span className=\"material-icons mr-2\">photo_camera</span>\n              Take Photo\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {/* Camera View */}\n      <div className=\"flex-1 relative\">\n        {isScanning && cameraStream ? (\n          <>\n            <video\n              ref={videoRef}\n              className=\"w-full h-full object-cover\"\n              autoPlay\n              playsInline\n              muted\n              data-testid=\"camera-video\"\n            />\n            <canvas ref={canvasRef} className=\"hidden\" />\n            \n            {/* Scanning Overlay */}\n            <div className=\"absolute inset-0 flex items-center justify-center\">\n              <div className=\"relative\">\n                {/* Scanning Frame */}\n                <div className=\"w-64 h-40 border-2 border-white rounded-lg relative\">\n                  <div className=\"absolute top-0 left-0 w-8 h-8 border-t-4 border-l-4 border-blue-400\"></div>\n                  <div className=\"absolute top-0 right-0 w-8 h-8 border-t-4 border-r-4 border-blue-400\"></div>\n                  <div className=\"absolute bottom-0 left-0 w-8 h-8 border-b-4 border-l-4 border-blue-400\"></div>\n                  <div className=\"absolute bottom-0 right-0 w-8 h-8 border-b-4 border-r-4 border-blue-400\"></div>\n                  \n                  {/* Scanning Line */}\n                  <div className=\"absolute top-0 left-0 right-0 h-0.5 bg-blue-400 animate-pulse\"></div>\n                </div>\n                \n                <p className=\"text-white text-center mt-4 text-sm\">\n                  Position barcode within the frame\n                </p>\n              </div>\n            </div>\n\n            {/* Capture Button for VALUE tier */}\n            {deviceTier === DeviceTier.VALUE && (\n              <div className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2\">\n                <Button\n                  size=\"lg\"\n                  onClick={captureFrame}\n                  className=\"rounded-full w-16 h-16\"\n                  data-testid=\"capture-frame\"\n                >\n                  <span className=\"material-icons text-2xl\">photo_camera</span>\n                </Button>\n              </div>\n            )}\n          </>\n        ) : (\n          <div className=\"flex-1 flex items-center justify-center\">\n            <div className=\"text-center text-white p-8\">\n              <span className=\"material-icons text-6xl mb-4 opacity-60\">qr_code_scanner</span>\n              <h2 className=\"text-xl font-semibold mb-2\">Starting Camera...</h2>\n              <p className=\"text-white/80\">Please allow camera access to scan barcodes</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":10670},"client/src/pages/scan-invoice.tsx":{"content":"import React, { useEffect, useRef, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { ensureCamera, createFileInputCapture, removeFileInput } from \"@/services/camera\";\nimport { capabilityService, DeviceTier } from \"@/services/capability\";\n\nexport default function InvoiceScannerScreen() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const fileInputRef = useRef<HTMLInputElement | null>(null);\n  \n  const [isScanning, setIsScanning] = useState(false);\n  const [cameraStream, setCameraStream] = useState<MediaStream | null>(null);\n  const [deviceTier, setDeviceTier] = useState<DeviceTier>(DeviceTier.VALUE);\n  const [showWebFallback, setShowWebFallback] = useState(false);\n  const [capturedImage, setCapturedImage] = useState<string | null>(null);\n\n  // Process invoice mutation\n  const processInvoice = useMutation({\n    mutationFn: async (imageData: string) => {\n      const response = await fetch('/api/invoices/process', {\n        method: 'POST',\n        body: JSON.stringify({ imageData }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n      return response.json();\n    },\n    onSuccess: (data: any) => {\n      toast({\n        title: \"Invoice processed!\",\n        description: `Found ${data.itemCount || 0} items in invoice`,\n      });\n      \n      // Navigate back to receive stock\n      navigate('/receive-stock');\n      \n      // Invalidate queries to refresh data\n      queryClient.invalidateQueries({ queryKey: ['/api/purchase-orders'] });\n    },\n    onError: () => {\n      toast({\n        title: \"Processing failed\",\n        description: \"Unable to process invoice. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Initialize camera on mount\n  useEffect(() => {\n    const initCamera = async () => {\n      const tier = await capabilityService.getTier();\n      setDeviceTier(tier);\n      \n      ensureCamera({\n        onOK: startCameraStream,\n        onFail: () => {\n          setShowWebFallback(true);\n          navigate('/receive-stock');\n        },\n        showPermissionModal: async () => {\n          return new Promise((resolve) => {\n            // Show browser-native permission dialog\n            setTimeout(() => resolve('settings'), 100);\n          });\n        }\n      });\n    };\n\n    initCamera();\n\n    // Cleanup on unmount\n    return () => {\n      stopCamera();\n      if (fileInputRef.current) {\n        removeFileInput(fileInputRef.current);\n      }\n    };\n  }, [navigate]);\n\n  const startCameraStream = async () => {\n    try {\n      const constraints = {\n        video: {\n          facingMode: 'environment',\n          width: deviceTier === DeviceTier.VALUE ? 720 : 1080,\n          height: deviceTier === DeviceTier.VALUE ? 480 : 720\n        }\n      };\n\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\n      setCameraStream(stream);\n      \n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n        videoRef.current.play();\n      }\n      \n      setIsScanning(true);\n    } catch (error: any) {\n      console.error('Camera stream error:', error);\n      setShowWebFallback(true);\n    }\n  };\n\n  const stopCamera = () => {\n    if (cameraStream) {\n      cameraStream.getTracks().forEach(track => track.stop());\n      setCameraStream(null);\n    }\n    setIsScanning(false);\n  };\n\n  const captureImage = async () => {\n    if (videoRef.current && canvasRef.current) {\n      const video = videoRef.current;\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      if (ctx) {\n        canvas.width = video.videoWidth;\n        canvas.height = video.videoHeight;\n        ctx.drawImage(video, 0, 0);\n\n        // Convert to base64\n        const imageData = canvas.toDataURL('image/jpeg', 0.8);\n        setCapturedImage(imageData);\n        \n        // Process the captured image\n        processInvoice.mutate(imageData);\n        stopCamera();\n      }\n    }\n  };\n\n  const handleWebFallback = () => {\n    if (!fileInputRef.current) {\n      fileInputRef.current = createFileInputCapture((file) => {\n        // Process the captured image file\n        const reader = new FileReader();\n        reader.onload = () => {\n          const imageData = reader.result as string;\n          setCapturedImage(imageData);\n          processInvoice.mutate(imageData);\n        };\n        reader.readAsDataURL(file);\n      });\n    }\n    \n    fileInputRef.current.click();\n  };\n\n  const retakePhoto = () => {\n    setCapturedImage(null);\n    startCameraStream();\n  };\n\n  return (\n    <div className=\"h-screen bg-black flex flex-col\">\n      {/* Header */}\n      <div className=\"p-4 bg-black/80 backdrop-blur-sm border-b border-white/10\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <Button\n              size=\"sm\"\n              variant=\"secondary\"\n              onClick={() => {\n                stopCamera();\n                navigate('/receive-stock');\n              }}\n              className=\"bg-white/20 hover:bg-white/30 text-white border-white/30\"\n              data-testid=\"back-to-receive-stock\"\n            >\n              <span className=\"material-icons\">arrow_back</span>\n            </Button>\n            <h1 className=\"text-white font-semibold\" data-testid=\"scanner-title\">\n              Invoice Scanner\n            </h1>\n          </div>\n          \n          {showWebFallback && (\n            <Button\n              size=\"sm\"\n              variant=\"secondary\"\n              onClick={handleWebFallback}\n              className=\"bg-white/20 hover:bg-white/30 text-white border-white/30\"\n              data-testid=\"capture-image\"\n            >\n              <span className=\"material-icons mr-2\">photo_camera</span>\n              Take Photo\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {/* Camera View or Captured Image */}\n      <div className=\"flex-1 relative\">\n        {capturedImage ? (\n          // Show captured image with options\n          <div className=\"flex-1 flex flex-col\">\n            <img \n              src={capturedImage} \n              alt=\"Captured invoice\" \n              className=\"flex-1 object-contain\"\n              data-testid=\"captured-image\"\n            />\n            \n            <div className=\"p-4 bg-black/80 border-t border-white/10\">\n              <div className=\"flex space-x-3\">\n                <Button\n                  variant=\"secondary\"\n                  onClick={retakePhoto}\n                  className=\"flex-1 bg-white/20 hover:bg-white/30 text-white border-white/30\"\n                  data-testid=\"retake-photo\"\n                >\n                  <span className=\"material-icons mr-2\">refresh</span>\n                  Retake\n                </Button>\n                \n                <Button\n                  onClick={() => processInvoice.mutate(capturedImage)}\n                  disabled={processInvoice.isPending}\n                  className=\"flex-1\"\n                  data-testid=\"process-invoice\"\n                >\n                  {processInvoice.isPending ? (\n                    <>\n                      <span className=\"material-icons mr-2 animate-spin\">sync</span>\n                      Processing...\n                    </>\n                  ) : (\n                    <>\n                      <span className=\"material-icons mr-2\">send</span>\n                      Process Invoice\n                    </>\n                  )}\n                </Button>\n              </div>\n            </div>\n          </div>\n        ) : isScanning && cameraStream ? (\n          <>\n            <video\n              ref={videoRef}\n              className=\"w-full h-full object-cover\"\n              autoPlay\n              playsInline\n              muted\n              data-testid=\"camera-video\"\n            />\n            <canvas ref={canvasRef} className=\"hidden\" />\n            \n            {/* Invoice Capture Overlay */}\n            <div className=\"absolute inset-0 flex items-center justify-center\">\n              <div className=\"relative\">\n                {/* Document Frame */}\n                <div className=\"w-80 h-56 border-2 border-white rounded-lg relative\">\n                  <div className=\"absolute top-0 left-0 w-12 h-12 border-t-4 border-l-4 border-blue-400\"></div>\n                  <div className=\"absolute top-0 right-0 w-12 h-12 border-t-4 border-r-4 border-blue-400\"></div>\n                  <div className=\"absolute bottom-0 left-0 w-12 h-12 border-b-4 border-l-4 border-blue-400\"></div>\n                  <div className=\"absolute bottom-0 right-0 w-12 h-12 border-b-4 border-r-4 border-blue-400\"></div>\n                  \n                  {/* Document Icon */}\n                  <div className=\"absolute inset-0 flex items-center justify-center\">\n                    <span className=\"material-icons text-white text-4xl opacity-30\">description</span>\n                  </div>\n                </div>\n                \n                <p className=\"text-white text-center mt-4 text-sm\">\n                  Position invoice within the frame\n                </p>\n                <p className=\"text-white/80 text-center mt-1 text-xs\">\n                  Ensure all text is clearly visible\n                </p>\n              </div>\n            </div>\n\n            {/* Capture Button */}\n            <div className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2\">\n              <Button\n                size=\"lg\"\n                onClick={captureImage}\n                className=\"rounded-full w-16 h-16\"\n                data-testid=\"capture-invoice\"\n              >\n                <span className=\"material-icons text-2xl\">photo_camera</span>\n              </Button>\n            </div>\n          </>\n        ) : (\n          <div className=\"flex-1 flex items-center justify-center\">\n            <div className=\"text-center text-white p-8\">\n              <span className=\"material-icons text-6xl mb-4 opacity-60\">document_scanner</span>\n              <h2 className=\"text-xl font-semibold mb-2\">Starting Camera...</h2>\n              <p className=\"text-white/80\">Please allow camera access to scan invoices</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":10533},"client/src/components/ui/permission-modal.tsx":{"content":"import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\n\ntype Props = {\n  visible: boolean;\n  onAction: (action: 'settings' | 'retry' | 'cancel') => void;\n};\n\nexport default function PermissionModal({ visible, onAction }: Props) {\n  return (\n    <Dialog open={visible} onOpenChange={(open) => !open && onAction('cancel')}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <span className=\"material-icons text-orange-500\">camera_alt</span>\n            <span>Camera Permission Needed</span>\n          </DialogTitle>\n          <DialogDescription className=\"text-left space-y-3\">\n            <p>We need camera access to scan barcodes and invoices for you.</p>\n            <p className=\"text-sm text-muted-foreground\">\n              Please enable camera access in your browser settings, then try again.\n            </p>\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"flex flex-col space-y-2 pt-4\">\n          <Button\n            onClick={() => onAction('settings')}\n            className=\"w-full\"\n            data-testid=\"button-open-settings\"\n          >\n            <span className=\"material-icons mr-2\">settings</span>\n            Open Browser Settings\n          </Button>\n\n          <Button\n            variant=\"outline\"\n            onClick={() => onAction('retry')}\n            className=\"w-full\"\n            data-testid=\"button-retry-camera\"\n          >\n            <span className=\"material-icons mr-2\">refresh</span>\n            Try Again\n          </Button>\n\n          <Button\n            variant=\"ghost\"\n            onClick={() => onAction('cancel')}\n            className=\"w-full\"\n            data-testid=\"button-cancel-camera\"\n          >\n            Cancel\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":2017},"client/src/utils/dev-logger.ts":{"content":"// Dev-only camera flow debugging logger - console only\n\nexport const log = (...args: any[]) => {\n  if (process.env.NODE_ENV !== 'development') return;\n  console.log('[CAMERA]', ...args);\n};\n\n// Alias so existing push calls still work\nexport const push = log;\n\n// Clear logs utility for testing\nexport const clearLogs = () => {\n  if (process.env.NODE_ENV !== 'development') return;\n  log('Logs cleared');\n};","size_bytes":407},"scripts/dev-cam-test.ts":{"content":"// Headless camera permission self-test script\n// This tests the camera flow in isolation to ensure proper retry behavior\n\nimport { ensureCamera } from '../client/src/services/camera';\nimport { push, clearLogs } from '../client/src/utils/dev-logger';\n\n// Mock navigator.mediaDevices for testing\nconst originalUserMedia = global.navigator?.mediaDevices?.getUserMedia;\n\ninterface TestScenario {\n  name: string;\n  mockBehavior: () => Promise<MediaStream | void>;\n  expectedLogs: string[];\n  expectedRetries: number;\n}\n\nconst scenarios: TestScenario[] = [\n  {\n    name: \"Permission denied → 2 retries\",\n    mockBehavior: async () => {\n      throw new Error('NotAllowedError');\n    },\n    expectedLogs: [\n      'ensureCamera() called',\n      'Initial permission status:',\n      'Camera permission request failed: Error',\n      'Showing permission modal to user'\n    ],\n    expectedRetries: 2\n  },\n  {\n    name: \"Granted on 1st retry\",\n    mockBehavior: async () => {\n      // Mock successful stream\n      return {\n        getTracks: () => [{ stop: () => {} }]\n      } as any;\n    },\n    expectedLogs: [\n      'ensureCamera() called',\n      'Camera permission granted on request'\n    ],\n    expectedRetries: 0\n  }\n];\n\nasync function runTest(scenario: TestScenario): Promise<boolean> {\n  console.log(`\\n🧪 Testing: ${scenario.name}`);\n  clearLogs();\n  \n  // Mock getUserMedia\n  if (global.navigator?.mediaDevices) {\n    global.navigator.mediaDevices.getUserMedia = scenario.mockBehavior;\n  }\n  \n  let retryCount = 0;\n  let success = false;\n  \n  const mockSuccessCallback = () => {\n    push('Camera granted → starting');\n    success = true;\n  };\n  \n  const mockFailCallback = () => {\n    push('Camera still denied');\n    retryCount++;\n  };\n  \n  try {\n    await ensureCamera({\n      onGranted: mockSuccessCallback,\n      onDenied: mockFailCallback\n    });\n  } catch (error) {\n    console.log(`❌ Test failed with error: ${error}`);\n    return false;\n  }\n  \n  // Verify expected behavior\n  const expectedRetries = scenario.expectedRetries;\n  const actualRetries = retryCount;\n  \n  if (actualRetries !== expectedRetries) {\n    console.log(`❌ Expected ${expectedRetries} retries, got ${actualRetries}`);\n    return false;\n  }\n  \n  console.log(`✅ Test passed: ${actualRetries} retries as expected`);\n  return true;\n}\n\nasync function runAllTests() {\n  console.log('🚀 Starting camera permission self-tests...\\n');\n  \n  let passed = 0;\n  let total = scenarios.length;\n  \n  for (const scenario of scenarios) {\n    const result = await runTest(scenario);\n    if (result) passed++;\n  }\n  \n  console.log(`\\n📊 Test Results: ${passed}/${total} passed`);\n  \n  if (passed === total) {\n    console.log('✅ All camera tests passed!');\n    process.exit(0);\n  } else {\n    console.log('❌ Some camera tests failed');\n    process.exit(1);\n  }\n}\n\n// Restore original after tests\nprocess.on('exit', () => {\n  if (global.navigator?.mediaDevices && originalUserMedia) {\n    global.navigator.mediaDevices.getUserMedia = originalUserMedia;\n  }\n});\n\n// Run tests if called directly\nif (require.main === module) {\n  runAllTests().catch(console.error);\n}\n\nexport { runAllTests };","size_bytes":3160},"client/src/pages/quick-capture.tsx":{"content":"import React, { useRef, useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { createFileInputCapture, removeFileInput } from \"@/services/camera\";\nimport { cameraCapture } from \"@/services/camera-capture\";\nimport { push } from \"@/utils/dev-logger\";\nimport type { Product } from \"@shared/schema\";\n\ninterface QuickCaptureProps {\n  mode: 'barcode' | 'invoice' | 'prescription';\n  saleId?: string;\n}\n\nexport default function QuickCaptureScreen() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const fileInputRef = useRef<HTMLInputElement | null>(null);\n  \n  // Get mode from URL params\n  const urlParams = new URLSearchParams(window.location.search);\n  const mode = (urlParams.get('mode') || 'barcode') as 'barcode' | 'invoice' | 'prescription';\n  const saleId = urlParams.get('saleId') || undefined;\n  \n  const [isScanning, setIsScanning] = useState(false);\n  const [cameraStream, setCameraStream] = useState<MediaStream | null>(null);\n  const [showWebFallback, setShowWebFallback] = useState(false);\n\n  // Mock user context - in real app this would come from auth\n  const user = {\n    id: 'user-1',\n    role: localStorage.getItem('userRole') || 'retailer'\n  };\n\n  // Save capture mutation\n  const saveCapture = useMutation({\n    mutationFn: async (captureData: {\n      uri: string;\n      mode: string;\n      ownerId: string;\n      persona: string;\n      saleId?: string;\n    }) => {\n      push(`Saving capture: ${captureData.mode}`);\n      const response = await fetch('/api/captures', {\n        method: 'POST',\n        body: JSON.stringify(captureData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Failed to save capture: ${response.statusText}`);\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      push(`Capture saved successfully: ${data.id}`);\n      queryClient.invalidateQueries({ queryKey: ['/api/captures'] });\n    }\n  });\n\n  // Process barcode data\n  const processBarcode = async (data: string) => {\n    push(`Processing barcode: ${data}`);\n    await persistCapture(`BARCODE:${data}`, data);\n  };\n\n  // Handle photo capture\n  const handleCapture = async () => {\n    if (!videoRef.current || !canvasRef.current) return;\n    \n    push(`Taking ${mode} photo`);\n    \n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    \n    if (!context) return;\n    \n    // Set canvas size to match video\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n    \n    // Draw current video frame to canvas\n    context.drawImage(video, 0, 0);\n    \n    // Convert to data URL\n    const dataUrl = canvas.toDataURL('image/jpeg', 0.8);\n    \n    // Save with enhanced feedback\n    await persistCapture(dataUrl);\n  };\n\n  // Handle file input capture (fallback)\n  const handleFileCapture = (file: File) => {\n    push(`File capture: ${file.name}`);\n    \n    const reader = new FileReader();\n    reader.onload = async (e) => {\n      const dataUrl = e.target?.result as string;\n      await persistCapture(dataUrl);\n    };\n    reader.readAsDataURL(file);\n  };\n\n  // Universal capture persistence with proper feedback\n  const persistCapture = async (uri: string, barcodeData?: string) => {\n    try {\n      // Save the main capture\n      const captureResult = await saveCapture.mutateAsync({\n        uri,\n        mode,\n        ownerId: user.id,\n        persona: user.role,\n        saleId\n      });\n      \n      // Handle mode-specific actions with success feedback\n      if (mode === 'barcode' && barcodeData) {\n        push(`Barcode captured: ${barcodeData}`);\n        toast({\n          title: \"Barcode Scanned ✅\",\n          description: `Product barcode captured successfully`,\n        });\n        // Navigate to POS with barcode data after brief delay\n        setTimeout(() => navigate(`/pos?barcode=${barcodeData}&source=capture`), 500);\n        return;\n      }\n      \n      if (mode === 'invoice') {\n        push('Invoice capture saved for receiving');\n        toast({\n          title: \"Invoice Captured ✅\",\n          description: \"Invoice saved for stock receiving\",\n        });\n      }\n      \n      if (mode === 'prescription') {\n        push('Prescription capture saved for compliance');\n        toast({\n          title: \"Prescription Captured ✅\", \n          description: \"Prescription saved for compliance\",\n        });\n      }\n      \n      // Navigate back after showing success toast\n      setTimeout(() => {\n        window.history.back();\n      }, 800);\n      \n    } catch (error) {\n      push(`Capture persistence failed: ${error}`);\n      toast({\n        title: \"Capture Failed\",\n        description: \"Failed to save capture. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  // Start camera stream\n  const startCameraStream = async () => {\n    try {\n      push('Starting camera stream for capture');\n      \n      const constraints = {\n        video: {\n          facingMode: 'environment',\n          width: 1080,\n          height: 720\n        }\n      };\n\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\n      setCameraStream(stream);\n      \n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n        videoRef.current.play();\n      }\n      \n      setIsScanning(true);\n      \n      // Auto barcode scanning for barcode mode\n      if (mode === 'barcode') {\n        startBarcodeDetection();\n      }\n    } catch (error) {\n      push(`Camera stream failed: ${error}`);\n      setShowWebFallback(true);\n    }\n  };\n\n  // Simple barcode detection simulation\n  const startBarcodeDetection = () => {\n    // In real app, this would use a barcode scanning library\n    // For now, we'll just show the capture button\n  };\n\n  // Stop camera\n  const stopCamera = () => {\n    if (cameraStream) {\n      cameraStream.getTracks().forEach(track => track.stop());\n      setCameraStream(null);\n    }\n    setIsScanning(false);\n  };\n\n  // Enhanced camera initialization using universal service\n  useEffect(() => {\n    console.log(`[QUICK-CAPTURE] Initializing ${mode} capture`);\n    push(`[QUICK-CAPTURE] Initializing ${mode} capture`);\n    \n    const initCapture = async () => {\n      try {\n        // Use simplified capture service for seamless experience\n        console.log(`[QUICK-CAPTURE] Using simplified capture service...`);\n        \n        if (mode === 'barcode') {\n          // For barcode mode, show the web fallback UI instead of direct capture\n          // since barcode scanning needs the camera stream for real-time detection\n          console.log(`[QUICK-CAPTURE] Barcode mode - showing camera UI`);\n          setShowWebFallback(true);\n          setIsScanning(false);\n        } else {\n          // For invoice/prescription, use direct OCR capture\n          // Use enhanced capture service for document processing\n          const { enhancedCapture } = await import('@/services/enhanced-capture');\n          await SimpleCaptureService.capture(mode as 'invoice' | 'prescription');\n          \n          // Navigate back after successful capture\n          console.log(`[QUICK-CAPTURE] ${mode} capture completed - navigating back`);\n          push(`[QUICK-CAPTURE] ${mode} capture completed - navigating back`);\n          setTimeout(() => window.history.back(), 800);\n        }\n      } catch (error) {\n        console.error(`[QUICK-CAPTURE] Capture failed:`, error);\n        push(`[QUICK-CAPTURE] Capture failed: ${error}`);\n        \n        // Always show fallback UI as last resort\n        setShowWebFallback(true);\n        setIsScanning(false);\n      }\n    };\n    \n    initCapture();\n\n    // Cleanup on unmount\n    return () => {\n      stopCamera();\n      if (fileInputRef.current) {\n        removeFileInput(fileInputRef.current);\n      }\n    };\n  }, [mode]);\n\n  // Set up file input fallback\n  useEffect(() => {\n    if (showWebFallback && !fileInputRef.current) {\n      fileInputRef.current = createFileInputCapture(handleFileCapture);\n    }\n  }, [showWebFallback]);\n\n  const getModeTitle = () => {\n    switch (mode) {\n      case 'barcode': return 'Scan Barcode';\n      case 'invoice': return 'Capture Invoice';\n      case 'prescription': return 'Capture Prescription';\n      default: return 'Quick Capture';\n    }\n  };\n\n  const getModeDescription = () => {\n    switch (mode) {\n      case 'barcode': return 'Point camera at product barcode';\n      case 'invoice': return 'Capture supplier invoice for receiving';\n      case 'prescription': return 'Capture prescription for compliance';\n      default: return 'Capture document';\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col h-screen bg-black text-white relative overflow-hidden\">\n      {/* Header */}\n      <header className=\"flex items-center justify-between p-4 bg-black/80 backdrop-blur-sm z-10\">\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => {\n            push('QuickCapture: Back button clicked');\n            window.history.back();\n          }}\n          className=\"text-white hover:bg-white/20\"\n          data-testid=\"button-back\"\n        >\n          <span className=\"material-icons mr-2\">arrow_back</span>\n          Back\n        </Button>\n        <div className=\"text-center\">\n          <h1 className=\"font-semibold\">{getModeTitle()}</h1>\n          <p className=\"text-sm text-white/60\">{getModeDescription()}</p>\n        </div>\n        <div className=\"w-20\"></div>\n      </header>\n\n      {/* Camera View */}\n      <div className=\"flex-1 relative\">\n        {isScanning ? (\n          <>\n            <video\n              ref={videoRef}\n              className=\"w-full h-full object-cover\"\n              autoPlay\n              playsInline\n              muted\n            />\n            <canvas\n              ref={canvasRef}\n              className=\"hidden\"\n            />\n            \n            {/* Capture overlay */}\n            <div className=\"absolute inset-0 flex items-center justify-center pointer-events-none\">\n              <div className=\"border-2 border-white rounded-lg w-64 h-64 opacity-50\"></div>\n            </div>\n          </>\n        ) : showWebFallback ? (\n          <div className=\"absolute inset-0 flex items-center justify-center bg-black\">\n            <div className=\"text-center space-y-6\">\n              <span className=\"material-icons text-white text-6xl mb-4\">photo_camera</span>\n              <p className=\"text-lg font-medium\">Camera not available</p>\n              <p className=\"text-sm text-white/60\">Use file upload to capture images</p>\n              \n              {/* Always show upload button in fallback mode */}\n              <Button\n                onClick={() => fileInputRef.current?.click()}\n                className=\"bg-white text-black hover:bg-gray-100 px-8 py-3\"\n                data-testid=\"button-upload-fallback\"\n              >\n                <span className=\"material-icons mr-2\">upload</span>\n                Upload Image\n              </Button>\n            </div>\n          </div>\n        ) : (\n          <div className=\"absolute inset-0 flex items-center justify-center bg-black\">\n            <div className=\"text-center space-y-4\">\n              <div className=\"w-12 h-12 border-2 border-white border-t-transparent rounded-full animate-spin mx-auto\"></div>\n              <p className=\"text-lg font-medium\">Initializing camera...</p>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Controls - only show for camera mode */}\n      {isScanning && (\n        <div className=\"absolute bottom-0 left-0 right-0 p-6 bg-gradient-to-t from-black/80 to-transparent\">\n          <div className=\"flex justify-center space-x-4\">\n            <Button\n              onClick={handleCapture}\n              size=\"lg\"\n              className=\"bg-white text-black hover:bg-white/90 px-8\"\n              data-testid=\"button-capture\"\n              disabled={saveCapture.isPending}\n            >\n              <span className=\"material-icons mr-2\">camera_alt</span>\n              {mode === 'barcode' ? 'Scan Barcode' : 'Take Photo'}\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":12501},"client/src/components/category-selector.tsx":{"content":"// Category selector for document capture\nimport { cn } from '@/lib/utils';\n\ninterface CategorySelectorProps {\n  selected: 'invoice' | 'prescription' | 'bill';\n  onSelect: (category: 'invoice' | 'prescription' | 'bill') => void;\n  className?: string;\n}\n\nconst categories = [\n  { \n    id: 'invoice' as const, \n    label: 'Invoice', \n    icon: '📄',\n    description: 'Supplier invoices & bills'\n  },\n  { \n    id: 'prescription' as const, \n    label: 'Prescription', \n    icon: '💊',\n    description: 'Medical prescriptions'\n  },\n  { \n    id: 'bill' as const, \n    label: 'Bill', \n    icon: '🧾',\n    description: 'Purchase receipts'\n  }\n];\n\nexport function CategorySelector({ selected, onSelect, className }: CategorySelectorProps) {\n  return (\n    <div className={cn('flex flex-col space-y-2', className)}>\n      <div className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n        Document Type\n      </div>\n      \n      <div className=\"flex space-x-2\">\n        {categories.map((category) => (\n          <button\n            key={category.id}\n            onClick={() => onSelect(category.id)}\n            className={cn(\n              'flex-1 flex flex-col items-center p-3 rounded-lg border transition-all',\n              'text-sm font-medium',\n              selected === category.id\n                ? 'bg-blue-50 border-blue-500 text-blue-900 dark:bg-blue-900/20 dark:border-blue-400 dark:text-blue-100'\n                : 'bg-white border-gray-200 text-gray-700 hover:bg-gray-50 dark:bg-gray-800 dark:border-gray-600 dark:text-gray-300 dark:hover:bg-gray-700'\n            )}\n            data-testid={`category-${category.id}`}\n          >\n            <span className=\"text-2xl mb-1\">{category.icon}</span>\n            <span className=\"font-medium\">{category.label}</span>\n            <span className=\"text-xs text-gray-500 dark:text-gray-400 text-center mt-1\">\n              {category.description}\n            </span>\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n}","size_bytes":2001},"client/src/lib/db.ts":{"content":"// Offline-first database with IndexedDB for document capture\nimport Dexie, { Table } from 'dexie';\n\nexport interface Capture {\n  id: string;\n  fileUri: string;\n  text: string;\n  category: 'invoice' | 'prescription' | 'bill';\n  createdAt: number;\n}\n\nexport interface Invoice {\n  id: string;\n  captureId: string;\n  invoiceNo: string;\n  vendor: string;\n  date: string;\n  total: number;\n  createdAt: number;\n}\n\nexport interface InvoiceLine {\n  id: string;\n  invoiceId: string;\n  name: string;\n  quantity: number;\n  rate: number;\n  amount: number;\n}\n\nexport interface Prescription {\n  id: string;\n  captureId: string;\n  patientName: string;\n  doctorName: string;\n  date: string;\n  medications: string[];\n  createdAt: number;\n}\n\nexport interface Bill {\n  id: string;\n  captureId: string;\n  billNo: string;\n  vendor: string;\n  date: string;\n  total: number;\n  createdAt: number;\n}\n\nexport class OfflineDatabase extends Dexie {\n  captures!: Table<Capture>;\n  invoices!: Table<Invoice>;\n  invoiceLines!: Table<InvoiceLine>;\n  prescriptions!: Table<Prescription>;\n  bills!: Table<Bill>;\n  \n  // Image storage tables (blob storage)\n  invoiceImages!: Table<{ id: string; blob: Blob }, string>;\n  prescriptionImages!: Table<{ id: string; blob: Blob }, string>;\n  billImages!: Table<{ id: string; blob: Blob }, string>;\n\n  constructor() {\n    super('AushadiExpressDB');\n    \n    this.version(4).stores({\n      captures: 'id, category, createdAt',\n      invoices: 'id, captureId, createdAt',\n      invoiceLines: 'id, invoiceId',\n      prescriptions: 'id, captureId, createdAt',\n      bills: 'id, captureId, createdAt',\n      invoiceImages: 'id',\n      prescriptionImages: 'id', \n      billImages: 'id'\n    });\n\n    console.log('[OFFLINE-DB] Database initialized with IndexedDB');\n  }\n\n  // Helper to get image table by category\n  getImageTable(category: string) {\n    switch (category) {\n      case 'invoice': return this.invoiceImages;\n      case 'prescription': return this.prescriptionImages;\n      case 'bill': return this.billImages;\n      default: throw new Error(`Unknown category: ${category}`);\n    }\n  }\n}\n\nexport const db = new OfflineDatabase();","size_bytes":2143},"client/src/pages/offline-test.tsx":{"content":"// Simple test page for offline document capture functionality\nimport React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { CategorySelector } from '@/components/category-selector';\nimport { captureDocument, getCapturesByCategory, getCaptureStats } from '@/services/offline-capture';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function OfflineTestPage() {\n  const [category, setCategory] = useState<'invoice' | 'prescription' | 'bill'>('invoice');\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [captures, setCaptures] = useState<any[]>([]);\n  const [stats, setStats] = useState<any>(null);\n  const { toast } = useToast();\n\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    setIsProcessing(true);\n    \n    try {\n      // Create object URL for the file\n      const imageUri = URL.createObjectURL(file);\n      \n      console.log('[OFFLINE-TEST] Processing file:', file.name);\n      \n      // Use offline capture service\n      const result = await captureDocument(imageUri, category);\n      \n      toast({\n        title: `${category.charAt(0).toUpperCase() + category.slice(1)} Processed ✅`,\n        description: `Document saved offline with ID: ${result.captureId.slice(0, 8)}...`,\n      });\n      \n      // Refresh captures list\n      await loadCaptures();\n      await loadStats();\n      \n    } catch (error) {\n      console.error('[OFFLINE-TEST] Processing failed:', error);\n      toast({\n        title: 'Processing Failed',\n        description: String(error),\n        variant: 'destructive'\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const loadCaptures = async () => {\n    try {\n      const captures = await getCapturesByCategory(category);\n      setCaptures(captures);\n    } catch (error) {\n      console.error('Failed to load captures:', error);\n    }\n  };\n\n  const loadStats = async () => {\n    try {\n      const stats = await getCaptureStats();\n      setStats(stats);\n    } catch (error) {\n      console.error('Failed to load stats:', error);\n    }\n  };\n\n  React.useEffect(() => {\n    loadCaptures();\n    loadStats();\n  }, [category]);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 p-4\">\n      <div className=\"max-w-2xl mx-auto\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">\n            Offline Document Capture Test\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-300\">\n            Test offline image-to-text processing with IndexedDB storage\n          </p>\n        </div>\n\n        {/* Category Selector */}\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg p-6 mb-6\">\n          <CategorySelector\n            selected={category}\n            onSelect={setCategory}\n          />\n        </div>\n\n        {/* Upload Section */}\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg p-6 mb-6\">\n          <h2 className=\"text-lg font-semibold mb-4\">Upload Document</h2>\n          \n          <input\n            type=\"file\"\n            accept=\"image/*\"\n            onChange={handleFileUpload}\n            disabled={isProcessing}\n            className=\"block w-full text-sm text-gray-500 dark:text-gray-400\n              file:mr-4 file:py-2 file:px-4\n              file:rounded-lg file:border-0\n              file:text-sm file:font-medium\n              file:bg-blue-50 file:text-blue-700\n              hover:file:bg-blue-100\n              dark:file:bg-blue-900 dark:file:text-blue-300\"\n          />\n          \n          {isProcessing && (\n            <div className=\"mt-4 text-center\">\n              <div className=\"inline-flex items-center space-x-2\">\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600\"></div>\n                <span className=\"text-sm text-gray-600 dark:text-gray-300\">\n                  Processing with OCR...\n                </span>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Stats Section */}\n        {stats && (\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg p-6 mb-6\">\n            <h2 className=\"text-lg font-semibold mb-4\">Storage Stats</h2>\n            <div className=\"grid grid-cols-4 gap-4\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-600\">{stats.invoice}</div>\n                <div className=\"text-sm text-gray-500\">Invoices</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-green-600\">{stats.prescription}</div>\n                <div className=\"text-sm text-gray-500\">Prescriptions</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-purple-600\">{stats.bill}</div>\n                <div className=\"text-sm text-gray-500\">Bills</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-gray-600\">{stats.total}</div>\n                <div className=\"text-sm text-gray-500\">Total</div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Captures List */}\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg p-6\">\n          <h2 className=\"text-lg font-semibold mb-4\">\n            Recent {category.charAt(0).toUpperCase() + category.slice(1)} Captures\n          </h2>\n          \n          {captures.length === 0 ? (\n            <p className=\"text-gray-500 text-center py-8\">\n              No {category} captures found. Upload a document to get started.\n            </p>\n          ) : (\n            <div className=\"space-y-3\">\n              {captures.slice(0, 5).map((capture) => (\n                <div\n                  key={capture.id}\n                  className=\"border border-gray-200 dark:border-gray-600 rounded-lg p-4\"\n                >\n                  <div className=\"flex justify-between items-start\">\n                    <div>\n                      <div className=\"font-medium text-gray-900 dark:text-white\">\n                        {capture.id.slice(0, 8)}...\n                      </div>\n                      <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n                        {new Date(capture.createdAt).toLocaleString()}\n                      </div>\n                      <div className=\"text-xs text-gray-400 dark:text-gray-500 mt-1\">\n                        Text: {capture.text.substring(0, 100)}...\n                      </div>\n                    </div>\n                    <div className=\"text-xs bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded\">\n                      {capture.category}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n          \n          {captures.length > 5 && (\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={loadCaptures}\n              className=\"w-full mt-4\"\n            >\n              Load More\n            </Button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7255},"client/src/platform/file-storage.ts":{"content":"// Cross-platform file storage abstraction\nimport { db } from '@/lib/db';\n\nexport async function saveImageLocal(\n  srcUri: string,\n  category: 'invoice' | 'prescription' | 'bill'\n): Promise<string> {\n  const id = crypto.randomUUID();\n  const filename = `${category}-${id}.jpg`;\n\n  console.log(`[FILE-STORAGE] Saving image for category: ${category}`);\n\n  if (typeof window !== 'undefined') {\n    // WEB: Use IndexedDB for blob storage\n    try {\n      console.log('[FILE-STORAGE] Web platform - using IndexedDB');\n      \n      let blob: Blob;\n      \n      // Handle different URI types\n      if (srcUri.startsWith('blob:')) {\n        // Direct blob URL from file picker\n        const response = await fetch(srcUri);\n        blob = await response.blob();\n      } else if (srcUri.startsWith('data:')) {\n        // Data URL from canvas\n        const response = await fetch(srcUri);\n        blob = await response.blob();\n      } else {\n        // File or other URL\n        const response = await fetch(srcUri);\n        blob = await response.blob();\n      }\n\n      // Store in appropriate image table\n      const imageTable = db.getImageTable(category);\n      await imageTable.put({ id: filename, blob });\n      \n      const uri = `idb://${category}Images/${filename}`;\n      console.log('[FILE-STORAGE] Image saved to IndexedDB:', uri);\n      return uri;\n      \n    } catch (error) {\n      console.error('[FILE-STORAGE] Failed to save image:', error);\n      throw new Error(`Failed to save ${category} image: ${error}`);\n    }\n  } else {\n    // REACT NATIVE: Use file system (not implemented in web environment)\n    console.log('[FILE-STORAGE] React Native platform - using file system');\n    throw new Error('React Native file system not available in web environment');\n  }\n}\n\nexport async function loadImageLocal(uri: string): Promise<string> {\n  console.log('[FILE-STORAGE] Loading image from:', uri);\n  \n  if (uri.startsWith('idb://')) {\n    // IndexedDB blob storage\n    const [, tableAndPath] = uri.split('idb://');\n    const [tableName, filename] = tableAndPath.split('/');\n    \n    const imageTable = db.getImageTable(tableName.replace('Images', ''));\n    const record = await imageTable.get(filename);\n    \n    if (!record) {\n      throw new Error(`Image not found: ${uri}`);\n    }\n    \n    // Convert blob to object URL\n    const objectUrl = URL.createObjectURL(record.blob);\n    console.log('[FILE-STORAGE] Image loaded from IndexedDB');\n    return objectUrl;\n    \n  } else if (uri.startsWith('file://')) {\n    // File system (React Native)\n    console.log('[FILE-STORAGE] Loading from file system');\n    return uri;\n    \n  } else {\n    // Direct URL\n    return uri;\n  }\n}","size_bytes":2677},"client/src/platform/ocr.ts":{"content":"// On-device OCR using Tesseract.js\nimport { createWorker } from 'tesseract.js';\n\nlet worker: any = null;\n\nasync function initWorker() {\n  if (worker) return worker;\n  \n  console.log('[OCR] Initializing Tesseract worker...');\n  worker = await createWorker('eng');\n  console.log('[OCR] Tesseract worker ready');\n  return worker;\n}\n\nexport async function ocrImage(imageUri: string): Promise<string> {\n  console.log('[OCR] Starting OCR processing for:', imageUri);\n  \n  try {\n    const ocrWorker = await initWorker();\n    \n    // For IndexedDB URIs, we need to load the blob first\n    let imageSource = imageUri;\n    if (imageUri.startsWith('idb://')) {\n      const { loadImageLocal } = await import('./file-storage');\n      imageSource = await loadImageLocal(imageUri);\n    }\n    \n    console.log('[OCR] Processing image with Tesseract...');\n    const { data: { text } } = await ocrWorker.recognize(imageSource);\n    \n    console.log('[OCR] Text extracted, length:', text.length);\n    console.log('[OCR] Preview:', text.substring(0, 100) + '...');\n    \n    return text;\n    \n  } catch (error) {\n    console.error('[OCR] Processing failed:', error);\n    throw new Error(`OCR processing failed: ${error}`);\n  }\n}\n\nexport async function terminateWorker() {\n  if (worker) {\n    console.log('[OCR] Terminating Tesseract worker');\n    await worker.terminate();\n    worker = null;\n  }\n}","size_bytes":1377},"client/src/utils/document-parsers.ts":{"content":"// Category-specific document parsers\nexport interface InvoiceParseResult {\n  header: {\n    invoiceNo: string;\n    vendor: string;\n    date: string;\n    total: number;\n  };\n  lines: Array<{\n    name: string;\n    quantity: number;\n    rate: number;\n    amount: number;\n  }>;\n}\n\nexport interface PrescriptionParseResult {\n  id: string;\n  patientName: string;\n  doctorName: string;\n  date: string;\n  medications: string[];\n}\n\nexport interface BillParseResult {\n  id: string;\n  billNo: string;\n  vendor: string;\n  date: string;\n  total: number;\n}\n\nexport async function parseInvoice(rawText: string): Promise<InvoiceParseResult> {\n  console.log('[PARSER] Parsing invoice text:', rawText.substring(0, 50) + '...');\n  \n  // Extract invoice number\n  const invoiceNoMatch = rawText.match(/(?:invoice|inv|bill)[\\s#:]*([A-Z0-9-]+)/i);\n  const invoiceNo = invoiceNoMatch?.[1] || `INV-${Date.now()}`;\n  \n  // Extract vendor\n  const lines = rawText.split('\\\\n').map(l => l.trim()).filter(l => l.length > 0);\n  const vendor = lines[0] || 'Unknown Vendor';\n  \n  // Extract date\n  const dateMatch = rawText.match(/(\\\\d{1,2}[/-]\\\\d{1,2}[/-]\\\\d{2,4})/);\n  const date = dateMatch?.[1] || new Date().toLocaleDateString();\n  \n  // Extract total\n  const totalMatch = rawText.match(/(?:total|amount|sum)[\\\\s:]*₹?\\\\s*([\\\\d,]+(?:\\\\.\\\\d{2})?)/i);\n  const total = totalMatch ? parseFloat(totalMatch[1].replace(/,/g, '')) : 0;\n  \n  // Extract line items using enhanced parser from previous implementation\n  const { parseInvoiceText } = await import('./invoice-parser');\n  const lineItems = parseInvoiceText(rawText);\n  \n  const result: InvoiceParseResult = {\n    header: {\n      invoiceNo,\n      vendor,\n      date,\n      total\n    },\n    lines: lineItems.map((item: any) => ({\n      name: item.name,\n      quantity: item.qty,\n      rate: item.mrp,\n      amount: item.qty * item.mrp\n    }))\n  };\n  \n  console.log('[PARSER] Invoice parsed:', result.header);\n  return result;\n}\n\nexport function parsePrescription(rawText: string): PrescriptionParseResult {\n  console.log('[PARSER] Parsing prescription text:', rawText.substring(0, 50) + '...');\n  \n  // Extract patient name\n  const patientMatch = rawText.match(/(?:patient|name)[\\\\s:]*([A-Za-z\\\\s]+)/i);\n  const patientName = patientMatch?.[1]?.trim() || 'Unknown Patient';\n  \n  // Extract doctor name\n  const doctorMatch = rawText.match(/(?:dr|doctor)[\\\\s:]*([A-Za-z\\\\s]+)/i);\n  const doctorName = doctorMatch?.[1]?.trim() || 'Unknown Doctor';\n  \n  // Extract date\n  const dateMatch = rawText.match(/(\\\\d{1,2}[/-]\\\\d{1,2}[/-]\\\\d{2,4})/);\n  const date = dateMatch?.[1] || new Date().toLocaleDateString();\n  \n  // Extract medications (simple pattern matching)\n  const medicationLines = rawText\n    .split('\\\\n')\n    .map(line => line.trim())\n    .filter(line => \n      line.length > 5 && \n      /(?:tab|cap|mg|ml|syrup|tablet|capsule)/i.test(line) &&\n      !/(?:doctor|patient|date|clinic)/i.test(line)\n    )\n    .slice(0, 10); // Limit to reasonable number\n  \n  const result: PrescriptionParseResult = {\n    id: `RX-${Date.now()}`,\n    patientName,\n    doctorName, \n    date,\n    medications: medicationLines\n  };\n  \n  console.log('[PARSER] Prescription parsed:', result);\n  return result;\n}\n\nexport function parseBill(rawText: string): BillParseResult {\n  console.log('[PARSER] Parsing bill text:', rawText.substring(0, 50) + '...');\n  \n  // Extract bill number\n  const billNoMatch = rawText.match(/(?:bill|receipt|ref)[\\s#:]*([A-Z0-9-]+)/i);\n  const billNo = billNoMatch?.[1] || `BILL-${Date.now()}`;\n  \n  // Extract vendor\n  const lines = rawText.split('\\\\n').map(l => l.trim()).filter(l => l.length > 0);\n  const vendor = lines[0] || 'Unknown Vendor';\n  \n  // Extract date\n  const dateMatch = rawText.match(/(\\\\d{1,2}[/-]\\\\d{1,2}[/-]\\\\d{2,4})/);\n  const date = dateMatch?.[1] || new Date().toLocaleDateString();\n  \n  // Extract total\n  const totalMatch = rawText.match(/(?:total|amount|sum)[\\\\s:]*₹?\\\\s*([\\\\d,]+(?:\\\\.\\\\d{2})?)/i);\n  const total = totalMatch ? parseFloat(totalMatch[1].replace(/,/g, '')) : 0;\n  \n  const result: BillParseResult = {\n    id: `BILL-${Date.now()}`,\n    billNo,\n    vendor,\n    date,\n    total\n  };\n  \n  console.log('[PARSER] Bill parsed:', result);\n  return result;\n}","size_bytes":4224},"client/src/utils/invoice-parser.ts":{"content":"// Invoice OCR text parser for extracting line items\nexport interface InvoiceLine {\n  name: string;\n  batch: string;\n  qty: number;\n  exp: string;\n  mrp: number;\n}\n\nexport function parseInvoiceText(text: string): InvoiceLine[] {\n  console.log('[INVOICE-PARSER] Processing text:', text.substring(0, 100) + '...');\n  \n  // Split into lines and clean up\n  const lines = text\n    .split(/\\n/)\n    .map(line => line.trim())\n    .filter(line => line.length > 5); // Remove short lines\n  \n  console.log('[INVOICE-PARSER] Found potential lines:', lines.length);\n  \n  const results: InvoiceLine[] = [];\n  \n  for (const line of lines) {\n    // Indian pharma invoice pattern with pipes and brackets\n    // Example: \"MOXEL-D 3000 I'S |ETS415016 127.10] 500] 0.0 81.70] 4.00] 12 4.085.00\"\n    // Pattern: PRODUCT |BATCH PRICE] QTY] ... MRP] DISCOUNT] TAX AMOUNT\n    \n    const patterns = [\n      // Pattern 1: Indian pharma format with pipes and brackets\n      /^([A-Z0-9\\s\\-\\.\\/]+?)\\s*\\|([A-Z0-9]+)\\s+([\\d\\.]+)\\]\\s*(\\d+)\\]/i,\n      \n      // Pattern 2: Tab-separated columns (common format)\n      /^([A-Z0-9\\s\\-\\.\\/]+?)\\s+([A-Z0-9]+)\\s+([\\d\\.]+)\\s+(\\d+)/i,\n      \n      // Pattern 3: Space-separated with clear medicine names\n      /^([A-Z][A-Z0-9\\s\\-\\.\\/]{3,}?)\\s+([A-Z0-9]{4,})\\s+.*?(\\d+\\.\\d+).*?(\\d+)/i,\n      \n      // Pattern 4: Simple medicine name with quantity\n      /^([A-Z][A-Z0-9\\s\\-\\.\\/]{4,})\\s+.*?(\\d+)\\s*$/i\n    ];\n    \n    for (const pattern of patterns) {\n      const match = line.match(pattern);\n      if (match) {\n        let name: string, batch: string, qty: number, exp: string, mrp: number;\n        \n        if (pattern === patterns[0] || pattern === patterns[1] || pattern === patterns[2]) {\n          // Full pattern match with all fields\n          name = match[1];\n          batch = match[2] || 'B' + Date.now().toString().slice(-6);\n          mrp = parseFloat(match[3]);\n          qty = parseInt(match[4]);\n          exp = '2025-12-31'; // Default expiry\n        } else {\n          // Simple pattern - extract what we can\n          name = match[1];\n          qty = parseInt(match[2]);\n          mrp = 10.0; // Default price\n          batch = 'B' + Date.now().toString().slice(-6);\n          exp = '2025-12-31';\n        }\n        \n        // Clean up product name - remove common prefixes and suffixes\n        name = name\n          .replace(/^(AL|m3|TK|ALIV)\\s+\\d+\\s*/, '') // Remove code prefixes\n          .replace(/\\s*(I'S|IS)\\s*$/, '') // Remove I'S suffix\n          .replace(/\\s+/g, ' ')\n          .trim();\n        \n        // Validate extracted data\n        if (name && name.length > 2 && qty > 0 && qty < 10000 && mrp > 0 && mrp < 10000) {\n          results.push({\n            name,\n            batch: batch || 'UNKNOWN',\n            qty,\n            exp,\n            mrp\n          });\n          console.log('[INVOICE-PARSER] Extracted:', { name, batch, qty, exp, mrp });\n          break; // Found a match, move to next line\n        }\n      }\n    }\n  }\n  \n  console.log('[INVOICE-PARSER] Total extracted items:', results.length);\n  return results;\n}","size_bytes":3068},"client/src/pages/reports.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { enhancedCapture } from '@/services/enhanced-capture';\nimport { documentStorage, type StoredDocument } from '@/services/document-storage';\nimport { remoteAI } from '@/lib/ai-assistant';\nimport { createModuleLogger } from '@/utils/app-logger';\nimport { useToast } from '@/hooks/use-toast';\nimport { BarChart3, FileText, Calendar, Search, Sparkles, Download, Trash2 } from 'lucide-react';\n\nconst log = createModuleLogger('Reports');\n\ninterface DocumentStats {\n  totalDocuments: number;\n  documentsByType: Record<string, number>;\n  unsyncedCount: number;\n  totalSize: number;\n}\n\ninterface AIReport {\n  id: string;\n  title: string;\n  content: string;\n  timestamp: Date;\n  type: 'summary' | 'analysis' | 'insights';\n}\n\nexport default function ReportsScreen() {\n  const [documents, setDocuments] = useState<StoredDocument[]>([]);\n  const [stats, setStats] = useState<DocumentStats>({ \n    totalDocuments: 0, \n    documentsByType: {}, \n    unsyncedCount: 0, \n    totalSize: 0 \n  });\n  const [selectedType, setSelectedType] = useState<string>('all');\n  const [searchText, setSearchText] = useState<string>('');\n  const [isGeneratingReport, setIsGeneratingReport] = useState(false);\n  const [aiReports, setAiReports] = useState<AIReport[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  \n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadDocumentsAndStats();\n  }, [selectedType, searchText]);\n\n  const loadDocumentsAndStats = async () => {\n    try {\n      setIsLoading(true);\n      log.info('Loading documents and stats', { selectedType, searchText });\n\n      // Load documents based on filters\n      const filter = {\n        type: selectedType === 'all' ? undefined : selectedType as any,\n        searchText: searchText || undefined\n      };\n\n      const [docsData, statsData] = await Promise.all([\n        documentStorage.searchDocuments(filter),\n        documentStorage.getStorageStats()\n      ]);\n\n      setDocuments(docsData);\n      setStats(statsData);\n      \n      log.info('Documents and stats loaded', { \n        documentsCount: docsData.length, \n        totalSize: statsData.totalSize \n      });\n\n    } catch (error) {\n      log.error('Failed to load documents and stats', error as Error);\n      toast({\n        title: 'Loading Error',\n        description: 'Failed to load document data',\n        variant: 'destructive'\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const generateAIReport = async (reportType: 'summary' | 'analysis' | 'insights') => {\n    try {\n      setIsGeneratingReport(true);\n      log.info('Generating AI report', { reportType });\n\n      // Get recent documents for context\n      const recentDocs = await enhancedCapture.getRecentDocuments(20);\n      \n      // Prepare data for AI analysis\n      const documentSummary = recentDocs.map(doc => ({\n        type: doc.type,\n        date: doc.createdAt,\n        medicines: doc.analysis.extractedData.medicines?.map(m => m.name) || [],\n        total: doc.analysis.extractedData.total,\n        summary: doc.analysis.rawText.substring(0, 300)\n      }));\n\n      let prompt = '';\n      let reportTitle = '';\n\n      switch (reportType) {\n        case 'summary':\n          prompt = `Generate a comprehensive summary report for our pharmacy document analysis system. \n            \n            Here's the data from ${documentSummary.length} recent documents:\n            ${JSON.stringify(documentSummary, null, 2)}\n            \n            Please provide:\n            1. Overall document processing summary\n            2. Most common document types and patterns\n            3. Key medicines and trends identified\n            4. Total transactions processed\n            5. Notable insights or recommendations\n            \n            Format as a professional pharmacy management report.`;\n          reportTitle = 'Document Processing Summary';\n          break;\n\n        case 'analysis':\n          prompt = `Analyze the pharmacy document data for business insights:\n            \n            Document Data: ${JSON.stringify(documentSummary, null, 2)}\n            \n            Provide analysis on:\n            1. Medicine popularity and demand patterns\n            2. Revenue trends from bills and invoices\n            3. Prescription patterns and compliance\n            4. Inventory recommendations based on document patterns\n            5. Operational efficiency insights\n            \n            Focus on actionable business intelligence.`;\n          reportTitle = 'Business Intelligence Analysis';\n          break;\n\n        case 'insights':\n          prompt = `Generate strategic insights from our pharmacy document processing:\n            \n            Data: ${JSON.stringify(documentSummary, null, 2)}\n            \n            Provide insights on:\n            1. Market trends visible in the processed documents\n            2. Customer behavior patterns\n            3. Seasonal or temporal patterns in medicine demands\n            4. Recommendations for inventory optimization\n            5. Process improvements for document handling\n            \n            Think like a pharmacy business consultant.`;\n          reportTitle = 'Strategic Insights & Recommendations';\n          break;\n      }\n\n      const aiResponse = await remoteAI.ask(prompt, {\n        currentScreen: 'Reports',\n        recentActions: ['Generate AI Report']\n      });\n\n      const newReport: AIReport = {\n        id: crypto.randomUUID(),\n        title: reportTitle,\n        content: aiResponse,\n        timestamp: new Date(),\n        type: reportType\n      };\n\n      setAiReports(prev => [newReport, ...prev]);\n      \n      toast({\n        title: 'Report Generated',\n        description: `${reportTitle} created successfully`,\n        variant: 'default'\n      });\n\n      log.info('AI report generated successfully', { reportType, reportId: newReport.id });\n\n    } catch (error) {\n      log.error('Failed to generate AI report', error as Error);\n      toast({\n        title: 'Report Generation Failed',\n        description: 'Could not generate AI report. Please try again.',\n        variant: 'destructive'\n      });\n    } finally {\n      setIsGeneratingReport(false);\n    }\n  };\n\n  const deleteDocument = async (documentId: string) => {\n    try {\n      log.info('Deleting document', { documentId });\n      \n      const success = await enhancedCapture.deleteDocument(documentId);\n      \n      if (success) {\n        setDocuments(prev => prev.filter(doc => doc.id !== documentId));\n        toast({\n          title: 'Document Deleted',\n          description: 'Document removed successfully',\n          variant: 'default'\n        });\n        \n        // Refresh stats\n        loadDocumentsAndStats();\n      } else {\n        throw new Error('Delete operation failed');\n      }\n    } catch (error) {\n      log.error('Failed to delete document', error as Error);\n      toast({\n        title: 'Delete Failed',\n        description: 'Could not delete document',\n        variant: 'destructive'\n      });\n    }\n  };\n\n  const formatFileSize = (bytes: number): string => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const formatDate = (date: Date): string => {\n    return new Intl.DateTimeFormat('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    }).format(date);\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'bill': return '🧾';\n      case 'prescription': return '💊';\n      case 'invoice': return '📄';\n      default: return '📋';\n    }\n  };\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case 'bill': return 'bg-yellow-100 text-yellow-800';\n      case 'prescription': return 'bg-green-100 text-green-800';\n      case 'invoice': return 'bg-blue-100 text-blue-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col h-screen bg-background\">\n      {/* Header */}\n      <header className=\"flex items-center justify-between p-4 border-b border-border\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-foreground\">AI-Powered Reports</h1>\n          <p className=\"text-sm text-muted-foreground\">Document analysis and business insights</p>\n        </div>\n        <Button \n          onClick={() => generateAIReport('summary')}\n          disabled={isGeneratingReport}\n          className=\"ml-4\"\n          data-testid=\"generate-report-button\"\n        >\n          <Sparkles className=\"w-4 h-4 mr-2\" />\n          {isGeneratingReport ? 'Generating...' : 'Generate Report'}\n        </Button>\n      </header>\n\n      <div className=\"flex-1 p-4 space-y-6 overflow-y-auto\">\n        {/* Stats Overview */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-primary\">{stats.totalDocuments}</div>\n              <div className=\"text-sm text-muted-foreground flex items-center justify-center\">\n                <FileText className=\"w-4 h-4 mr-1\" />\n                Total Documents\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-blue-600\">{stats.documentsByType.bill || 0}</div>\n              <div className=\"text-sm text-muted-foreground\">🧾 Bills</div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-green-600\">{stats.documentsByType.prescription || 0}</div>\n              <div className=\"text-sm text-muted-foreground\">💊 Prescriptions</div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-yellow-600\">{stats.documentsByType.invoice || 0}</div>\n              <div className=\"text-sm text-muted-foreground\">📄 Invoices</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* AI Report Generation */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Sparkles className=\"w-5 h-5 mr-2\" />\n              AI-Generated Reports\n            </CardTitle>\n            <CardDescription>\n              Generate intelligent reports and insights from your document data\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex flex-wrap gap-2 mb-4\">\n              <Button \n                onClick={() => generateAIReport('summary')}\n                disabled={isGeneratingReport}\n                variant=\"outline\"\n                size=\"sm\"\n                data-testid=\"report-summary\"\n              >\n                <BarChart3 className=\"w-4 h-4 mr-2\" />\n                Summary Report\n              </Button>\n              <Button \n                onClick={() => generateAIReport('analysis')}\n                disabled={isGeneratingReport}\n                variant=\"outline\"\n                size=\"sm\"\n                data-testid=\"report-analysis\"\n              >\n                <Search className=\"w-4 h-4 mr-2\" />\n                Business Analysis\n              </Button>\n              <Button \n                onClick={() => generateAIReport('insights')}\n                disabled={isGeneratingReport}\n                variant=\"outline\"\n                size=\"sm\"\n                data-testid=\"report-insights\"\n              >\n                <Calendar className=\"w-4 h-4 mr-2\" />\n                Strategic Insights\n              </Button>\n            </div>\n\n            {/* Display AI Reports */}\n            {aiReports.length > 0 && (\n              <div className=\"space-y-4\">\n                <h4 className=\"font-medium\">Generated Reports</h4>\n                {aiReports.map(report => (\n                  <Card key={report.id} className=\"border-l-4 border-l-primary\">\n                    <CardHeader className=\"pb-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <CardTitle className=\"text-base\">{report.title}</CardTitle>\n                        <Badge variant={\n                          report.type === 'summary' ? 'default' :\n                          report.type === 'analysis' ? 'secondary' : 'outline'\n                        }>\n                          {report.type}\n                        </Badge>\n                      </div>\n                      <CardDescription>{formatDate(report.timestamp)}</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"prose prose-sm max-w-none\">\n                        <pre className=\"whitespace-pre-wrap text-sm\">{report.content}</pre>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Document Search and Filter */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Document Management</CardTitle>\n            <CardDescription>Search and manage analyzed documents</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex gap-4 mb-4\">\n              <div className=\"flex-1\">\n                <Input\n                  placeholder=\"Search documents...\"\n                  value={searchText}\n                  onChange={(e) => setSearchText(e.target.value)}\n                  className=\"w-full\"\n                  data-testid=\"search-documents\"\n                />\n              </div>\n              <Select value={selectedType} onValueChange={setSelectedType}>\n                <SelectTrigger className=\"w-[180px]\" data-testid=\"filter-type\">\n                  <SelectValue placeholder=\"All Types\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Types</SelectItem>\n                  <SelectItem value=\"bill\">Bills</SelectItem>\n                  <SelectItem value=\"prescription\">Prescriptions</SelectItem>\n                  <SelectItem value=\"invoice\">Invoices</SelectItem>\n                  <SelectItem value=\"other\">Other</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Documents List */}\n            {isLoading ? (\n              <div className=\"text-center py-8\">\n                <div className=\"text-muted-foreground\">Loading documents...</div>\n              </div>\n            ) : documents.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <FileText className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground\" />\n                <h3 className=\"text-lg font-medium mb-2\">No documents found</h3>\n                <p className=\"text-muted-foreground\">\n                  {searchText || selectedType !== 'all' \n                    ? 'Try adjusting your search or filter criteria'\n                    : 'Start capturing documents with the Smart Action button'\n                  }\n                </p>\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {documents.map(doc => (\n                  <Card key={doc.id} className=\"hover:shadow-md transition-shadow\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex items-center space-x-3 flex-1\">\n                          <div className=\"text-2xl\">{getTypeIcon(doc.type)}</div>\n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"flex items-center space-x-2 mb-1\">\n                              <Badge className={getTypeColor(doc.type)}>\n                                {doc.type}\n                              </Badge>\n                              <span className=\"text-sm text-muted-foreground\">\n                                {formatDate(doc.createdAt)}\n                              </span>\n                              {!doc.synced && (\n                                <Badge variant=\"outline\" className=\"text-xs\">Offline</Badge>\n                              )}\n                            </div>\n                            <h4 className=\"font-medium text-sm truncate\">{doc.originalFileName}</h4>\n                            <p className=\"text-xs text-muted-foreground mt-1 line-clamp-2\">\n                              {doc.analysis.rawText.substring(0, 150)}...\n                            </p>\n                            {doc.analysis.extractedData.medicines && doc.analysis.extractedData.medicines.length > 0 && (\n                              <div className=\"mt-2\">\n                                <span className=\"text-xs text-muted-foreground\">Medicines: </span>\n                                <span className=\"text-xs\">\n                                  {doc.analysis.extractedData.medicines.slice(0, 3).map(m => m.name).join(', ')}\n                                  {doc.analysis.extractedData.medicines.length > 3 && ` +${doc.analysis.extractedData.medicines.length - 3} more`}\n                                </span>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => deleteDocument(doc.id)}\n                          className=\"text-destructive hover:text-destructive\"\n                          data-testid={`delete-document-${doc.id}`}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Storage Stats */}\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between text-sm\">\n              <span className=\"text-muted-foreground\">Storage Used:</span>\n              <span className=\"font-medium\">{formatFileSize(stats.totalSize)}</span>\n            </div>\n            {stats.unsyncedCount > 0 && (\n              <div className=\"flex items-center justify-between text-sm mt-2\">\n                <span className=\"text-muted-foreground\">Unsynced Documents:</span>\n                <Badge variant=\"outline\">{stats.unsyncedCount}</Badge>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":19304},"client/src/components/ai-assistant-dialog.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { remoteAI, voiceAssistant, ocrAssistant, type AIAssistantContext } from '@/lib/ai-assistant';\nimport { documentStorage } from '@/services/document-storage';\nimport { enhancedCapture } from '@/services/enhanced-capture';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface Message {\n  id: string;\n  role: 'user' | 'assistant';\n  content: string;\n  timestamp: number;\n}\n\ninterface AIAssistantDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  context?: AIAssistantContext;\n}\n\nexport function AIAssistantDialog({ isOpen, onClose, context }: AIAssistantDialogProps) {\n  const { toast } = useToast();\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [inputText, setInputText] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isListening, setIsListening] = useState(false);\n  const [voiceSupported, setVoiceSupported] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    checkVoiceSupport();\n    if (isOpen && messages.length === 0) {\n      addWelcomeMessage();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const checkVoiceSupport = async () => {\n    const supported = await voiceAssistant.isSupported();\n    setVoiceSupported(supported);\n  };\n\n  const addWelcomeMessage = () => {\n    const welcomeMessage: Message = {\n      id: crypto.randomUUID(),\n      role: 'assistant',\n      content: `Hello! I'm your AI assistant for AushadiExpress. I can help you with:\\n\\n• Medicine information and drug interactions\\n• Inventory management\\n• Prescription validation\\n• Document analysis\\n• Sales insights\\n\\nHow can I assist you today?`,\n      timestamp: Date.now()\n    };\n    setMessages([welcomeMessage]);\n  };\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  const addMessage = (role: 'user' | 'assistant', content: string) => {\n    const message: Message = {\n      id: crypto.randomUUID(),\n      role,\n      content,\n      timestamp: Date.now()\n    };\n    setMessages(prev => [...prev, message]);\n  };\n\n  const handleSendMessage = async (message: string) => {\n    if (!message.trim()) return;\n\n    addMessage('user', message);\n    setIsLoading(true);\n\n    try {\n      // Enhance context with document data for AI queries\n      const enhancedContext = await enhanceContextWithDocuments(message, context);\n      const response = await remoteAI.ask(message, enhancedContext);\n      addMessage('assistant', response);\n    } catch (error) {\n      console.error('AI Assistant error:', error);\n      addMessage('assistant', 'Sorry, I encountered an error. Please try again.');\n      toast({\n        title: 'Assistant Error',\n        description: 'Failed to get AI response',\n        variant: 'destructive'\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const enhanceContextWithDocuments = async (message: string, currentContext?: AIAssistantContext) => {\n    try {\n      // Get recent documents for context\n      const recentDocs = await enhancedCapture.getRecentDocuments(5);\n      \n      // Search for relevant documents based on the message\n      const relevantDocs = message.toLowerCase().includes('document') || message.toLowerCase().includes('recent')\n        ? await enhancedCapture.searchDocuments(message, undefined)\n        : [];\n\n      return {\n        ...currentContext,\n        userData: {\n          ...currentContext?.userData,\n          recentDocuments: recentDocs.map(doc => ({\n            id: doc.id,\n            type: doc.type,\n            date: doc.createdAt,\n            medicines: doc.analysis.extractedData.medicines || [],\n            summary: doc.analysis.rawText.substring(0, 200)\n          })),\n          relevantDocuments: relevantDocs.slice(0, 3).map(doc => ({\n            type: doc.type,\n            medicines: doc.analysis.extractedData.medicines || [],\n            total: doc.analysis.extractedData.total\n          }))\n        }\n      };\n    } catch (error) {\n      console.warn('Failed to enhance context with documents:', error);\n      return currentContext;\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    const message = inputText;\n    setInputText('');\n    await handleSendMessage(message);\n  };\n\n  const handleVoiceInput = async () => {\n    if (isListening) {\n      await voiceAssistant.stopListening();\n      setIsListening(false);\n      return;\n    }\n\n    try {\n      setIsListening(true);\n      await voiceAssistant.startListening(\n        async (transcript) => {\n          setIsListening(false);\n          setInputText(transcript);\n          // Auto-send voice input\n          await handleSendMessage(transcript);\n        },\n        (error) => {\n          setIsListening(false);\n          console.error('Voice input error:', error);\n          toast({\n            title: 'Voice Input Failed',\n            description: error === 'not-allowed' ? 'Microphone permission required' : 'Voice recognition failed',\n            variant: 'destructive'\n          });\n        }\n      );\n    } catch (error) {\n      setIsListening(false);\n      toast({\n        title: 'Voice Not Supported',\n        description: 'Voice input is not available on this device',\n        variant: 'destructive'\n      });\n    }\n  };\n\n  const handleImageUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    setIsLoading(true);\n    addMessage('user', `📷 Analyzing image: ${file.name}`);\n\n    try {\n      const extractedText = await ocrAssistant.scanText(file);\n      \n      if (extractedText.trim()) {\n        const analysisPrompt = `Please analyze this document text and provide insights:\\n\\n${extractedText}`;\n        const analysis = await remoteAI.ask(analysisPrompt, context);\n        addMessage('assistant', `📄 **Document Analysis:**\\n\\n${analysis}\\n\\n**Extracted Text:**\\n${extractedText.substring(0, 500)}${extractedText.length > 500 ? '...' : ''}`);\n      } else {\n        addMessage('assistant', 'I couldn\\'t extract any readable text from this image. Please try a clearer image or different document.');\n      }\n    } catch (error) {\n      console.error('Image analysis error:', error);\n      addMessage('assistant', 'Sorry, I couldn\\'t analyze that image. Please try again with a clearer photo.');\n      toast({\n        title: 'Image Analysis Failed',\n        description: 'Could not process the uploaded image',\n        variant: 'destructive'\n      });\n    } finally {\n      setIsLoading(false);\n      // Clear the file input\n      if (fileInputRef.current) {\n        fileInputRef.current.value = '';\n      }\n    }\n  };\n\n  const quickActions = [\n    { label: 'Check Drug Interactions', action: () => handleSendMessage('Help me check for drug interactions') },\n    { label: 'Recent Documents', action: () => handleSendMessage('Show me recent documents and their analysis') },\n    { label: 'Sales Summary', action: () => handleSendMessage('Give me today\\'s sales summary') },\n    { label: 'Document Report', action: () => handleSendMessage('Generate a report of analyzed documents') }\n  ];\n\n  return (\n    <>\n      <Dialog open={isOpen} onOpenChange={onClose}>\n        <DialogContent className=\"max-w-2xl h-[80vh] flex flex-col\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              🤖 AI Assistant\n              {context?.currentScreen && (\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  {context.currentScreen}\n                </Badge>\n              )}\n            </DialogTitle>\n          </DialogHeader>\n\n          {/* Messages Area */}\n          <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n            {messages.map((message) => (\n              <div key={message.id} className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}>\n                <Card className={`max-w-[80%] ${message.role === 'user' ? 'bg-primary text-primary-foreground' : 'bg-muted'}`}>\n                  <CardContent className=\"p-3\">\n                    <div className=\"whitespace-pre-wrap text-sm\">{message.content}</div>\n                    <div className=\"text-xs opacity-70 mt-1\">\n                      {new Date(message.timestamp).toLocaleTimeString()}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            ))}\n            \n            {isLoading && (\n              <div className=\"flex justify-start\">\n                <Card className=\"bg-muted\">\n                  <CardContent className=\"p-3\">\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"w-2 h-2 bg-primary rounded-full animate-pulse\"></div>\n                      <div className=\"w-2 h-2 bg-primary rounded-full animate-pulse delay-100\"></div>\n                      <div className=\"w-2 h-2 bg-primary rounded-full animate-pulse delay-200\"></div>\n                      <span className=\"text-sm text-muted-foreground ml-2\">Thinking...</span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n            <div ref={messagesEndRef} />\n          </div>\n\n          {/* Quick Actions */}\n          {messages.length <= 1 && (\n            <div className=\"px-4 pb-2\">\n              <div className=\"text-sm text-muted-foreground mb-2\">Quick actions:</div>\n              <div className=\"flex flex-wrap gap-2\">\n                {quickActions.map((action, index) => (\n                  <Button\n                    key={index}\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={action.action}\n                    disabled={isLoading}\n                    className=\"text-xs\"\n                  >\n                    {action.label}\n                  </Button>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Input Area */}\n          <div className=\"border-t p-4\">\n            <form onSubmit={handleSubmit} className=\"space-y-3\">\n              <div className=\"flex gap-2\">\n                <Input\n                  value={inputText}\n                  onChange={(e) => setInputText(e.target.value)}\n                  placeholder=\"Ask me anything about pharmacy operations...\"\n                  disabled={isLoading || isListening}\n                  className=\"flex-1\"\n                  data-testid=\"ai-input\"\n                />\n                <Button\n                  type=\"submit\"\n                  disabled={isLoading || !inputText.trim() || isListening}\n                  data-testid=\"ai-send\"\n                >\n                  <span className=\"material-icons\">send</span>\n                </Button>\n              </div>\n              \n              <div className=\"flex gap-2\">\n                {voiceSupported && (\n                  <Button\n                    type=\"button\"\n                    variant={isListening ? \"destructive\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={handleVoiceInput}\n                    disabled={isLoading}\n                    data-testid=\"ai-voice\"\n                  >\n                    <span className=\"material-icons\">\n                      {isListening ? 'mic_off' : 'mic'}\n                    </span>\n                    {isListening ? 'Stop' : 'Voice'}\n                  </Button>\n                )}\n                \n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => fileInputRef.current?.click()}\n                  disabled={isLoading}\n                  data-testid=\"ai-image\"\n                >\n                  <span className=\"material-icons\">photo_camera</span>\n                  Analyze Image\n                </Button>\n              </div>\n            </form>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Hidden file input */}\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        accept=\"image/*\"\n        onChange={handleImageUpload}\n        className=\"hidden\"\n      />\n    </>\n  );\n}","size_bytes":12581},"client/src/pages/ai-assistant-fullscreen.tsx":{"content":"import { useState, useRef, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { useToast } from '@/hooks/use-toast';\nimport { ArrowLeft, Send, Upload, Mic, MicOff, Sparkles, Camera, FileText, X, CheckCircle, AlertCircle, ImageIcon, Zap } from 'lucide-react';\nimport { useLocation } from 'wouter';\nimport { enhancedCapture } from '@/services/enhanced-capture';\nimport { cameraCapture } from '@/services/camera-capture';\nimport { IntelligentPharmacyAgent } from '@/services/intelligent-pharmacy-agent';\nimport { useQueryClient } from '@tanstack/react-query';\n\ninterface Message {\n  id: string;\n  role: 'user' | 'assistant' | 'system';\n  content: string;\n  timestamp: Date;\n  type?: 'text' | 'image' | 'document' | 'confirmation';\n  imageUrl?: string;\n  documentInfo?: {\n    type: 'bill' | 'prescription' | 'invoice';\n    medicines?: string[];\n    total?: number;\n    confidence?: number;\n  };\n  pendingConfirmation?: {\n    messageId: string;\n    aiClassification: string;\n    extractedData: any;\n    confidence: number;\n    imageFile: File;\n  };\n}\n\ninterface DocumentConfirmationProps {\n  aiClassification: string;\n  extractedData: any;\n  confidence: number;\n  onConfirm: (userType: string) => void;\n  onCancel: () => void;\n}\n\nfunction DocumentConfirmation({ aiClassification, extractedData, confidence, onConfirm, onCancel }: DocumentConfirmationProps) {\n  const [selectedType, setSelectedType] = useState(aiClassification);\n\n  const documentTypes = [\n    { value: 'bill', label: 'Customer Bill/Receipt', icon: '🧾', description: 'Sale receipt from customer purchase' },\n    { value: 'prescription', label: 'Doctor Prescription', icon: '💊', description: 'Medical prescription from doctor' },\n    { value: 'invoice', label: 'Supplier Invoice', icon: '📋', description: 'Invoice for inventory purchase' },\n    { value: 'other', label: 'Other Document', icon: '📄', description: 'Other pharmacy-related document' }\n  ];\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto border-2 border-primary\">\n      <CardContent className=\"p-6\">\n        <div className=\"text-center mb-4\">\n          <AlertCircle className=\"w-8 h-8 mx-auto mb-2 text-amber-500\" />\n          <h3 className=\"font-semibold mb-1\">Confirm Document Type</h3>\n          <p className=\"text-sm text-muted-foreground\">\n            AI thinks this is a <strong>{aiClassification}</strong> (confidence: {(confidence * 100).toFixed(1)}%)\n          </p>\n        </div>\n\n        <div className=\"space-y-2 mb-4\">\n          {documentTypes.map((type) => (\n            <button\n              key={type.value}\n              className={`w-full p-3 text-left rounded-lg border transition-colors ${\n                selectedType === type.value \n                  ? 'border-primary bg-primary/10' \n                  : 'border-border hover:bg-muted/50'\n              }`}\n              onClick={() => setSelectedType(type.value)}\n            >\n              <div className=\"flex items-center space-x-3\">\n                <span className=\"text-xl\">{type.icon}</span>\n                <div className=\"flex-1\">\n                  <div className=\"font-medium text-sm\">{type.label}</div>\n                  <div className=\"text-xs text-muted-foreground\">{type.description}</div>\n                </div>\n                {selectedType === type.value && (\n                  <CheckCircle className=\"w-4 h-4 text-primary\" />\n                )}\n              </div>\n            </button>\n          ))}\n        </div>\n\n        <div className=\"flex space-x-2\">\n          <Button variant=\"outline\" className=\"flex-1\" onClick={onCancel}>\n            Cancel\n          </Button>\n          <Button className=\"flex-1\" onClick={() => onConfirm(selectedType)}>\n            Confirm\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default function AIAssistantFullscreenPage() {\n  const [, setLocation] = useLocation();\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [inputText, setInputText] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isListening, setIsListening] = useState(false);\n  const [agent] = useState(() => new IntelligentPharmacyAgent());\n  const [isUploading, setIsUploading] = useState(false);\n  const [pendingConfirmation, setPendingConfirmation] = useState<any>(null);\n  const [sessionId] = useState(() => `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Session persistence key\n  const SESSION_STORAGE_KEY = `ai_assistant_session_${sessionId}`;\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  // Load persisted session on mount\n  useEffect(() => {\n    const loadPersistedSession = () => {\n      try {\n        // Check for existing active session in last hour\n        const allKeys = Object.keys(localStorage);\n        const sessionKeys = allKeys.filter(key => key.startsWith('ai_assistant_session_'));\n        \n        let loadedSession = null;\n        const now = Date.now();\n        const ONE_HOUR = 60 * 60 * 1000;\n        \n        // Find most recent valid session\n        for (const key of sessionKeys) {\n          const data = localStorage.getItem(key);\n          if (data) {\n            try {\n              const parsed = JSON.parse(data);\n              if (parsed.timestamp && (now - parsed.timestamp) < ONE_HOUR) {\n                if (!loadedSession || parsed.timestamp > loadedSession.timestamp) {\n                  loadedSession = { key, data: parsed };\n                }\n              } else {\n                // Clean up expired sessions\n                localStorage.removeItem(key);\n              }\n            } catch (e) {\n              localStorage.removeItem(key);\n            }\n          }\n        }\n        \n        if (loadedSession) {\n          console.log('[AI-SESSION] Restoring session from:', loadedSession.key);\n          setMessages(loadedSession.data.messages || []);\n          return true;\n        }\n        \n        return false;\n      } catch (error) {\n        console.error('[AI-SESSION] Error loading session:', error);\n        return false;\n      }\n    };\n\n    // Try to load existing session first\n    const sessionLoaded = loadPersistedSession();\n    \n    if (!sessionLoaded) {\n      // Add welcome message only if no session loaded\n      addMessage('assistant', \n        '🔄 Loading your complete business data for intelligent insights...\\n\\n' +\n        'Welcome to AushadiExpress AI Assistant! 🏥\\n\\n' +\n        'I can help you with:\\n' +\n        '• Analyzing bills, prescriptions, and invoices\\n' +\n        '• Medicine information and drug interactions\\n' +\n        '• Inventory management and stock levels\\n' +\n        '• Sales analytics and reporting\\n' +\n        '• Business insights from your documents\\n\\n' +\n        'You can upload images, ask questions, or use voice commands. How can I assist you today?'\n      );\n    }\n    \n    // Focus on input after mount\n    setTimeout(() => inputRef.current?.focus(), 100);\n  }, []);\n\n  // Save session whenever messages change\n  useEffect(() => {\n    if (messages.length > 0) {\n      try {\n        const sessionData = {\n          messages,\n          timestamp: Date.now(),\n          sessionId\n        };\n        localStorage.setItem(SESSION_STORAGE_KEY, JSON.stringify(sessionData));\n        console.log('[AI-SESSION] Session saved with', messages.length, 'messages');\n      } catch (error) {\n        console.error('[AI-SESSION] Error saving session:', error);\n      }\n    }\n  }, [messages, sessionId, SESSION_STORAGE_KEY]);\n\n  const addMessage = (role: 'user' | 'assistant' | 'system', content: string, type: 'text' | 'image' | 'document' | 'confirmation' = 'text', imageUrl?: string, documentInfo?: any, pendingConfirmationData?: any) => {\n    const message: Message = {\n      id: crypto.randomUUID(),\n      role,\n      content,\n      timestamp: new Date(),\n      type,\n      imageUrl,\n      documentInfo,\n      pendingConfirmation: pendingConfirmationData\n    };\n    setMessages(prev => [...prev, message]);\n  };\n\n  // Extract clickable suggestions from message content\n  const extractSuggestions = (content: string): string[] => {\n    const lines = content.split('\\n');\n    const suggestions: string[] = [];\n    let inSuggestionsSection = false;\n    \n    for (const line of lines) {\n      // Check for Quick Actions line with pipe-separated format\n      if (line.includes('Quick Actions:')) {\n        const actionsText = line.split('Quick Actions:')[1]?.trim();\n        if (actionsText) {\n          const actions = actionsText.split('|').map(action => action.trim()).filter(Boolean);\n          suggestions.push(...actions);\n        }\n        continue;\n      }\n      \n      // Legacy support for bullet-point suggestions  \n      if (line.includes('💡') && (line.includes('Try asking') || line.includes('Try these') || line.includes('asking:'))) {\n        inSuggestionsSection = true;\n        continue;\n      }\n      \n      if (inSuggestionsSection) {\n        const trimmed = line.trim();\n        if (trimmed.startsWith('• \"') && trimmed.endsWith('\"')) {\n          const suggestion = trimmed.slice(3, -1);\n          suggestions.push(suggestion);\n        } else if (trimmed.startsWith('• ')) {\n          const suggestion = trimmed.slice(2);\n          if (suggestion && !suggestion.includes('**') && suggestion.length > 5) {\n            suggestions.push(suggestion);\n          }\n        } else if (trimmed === '' || (!trimmed.startsWith('•') && trimmed.length > 0 && !trimmed.includes('💡'))) {\n          break;\n        }\n      }\n    }\n    \n    return suggestions.filter(s => s.length > 2 && s.length < 80);\n  };\n\n  // Handle suggestion click\n  const handleSuggestionClick = async (suggestion: string) => {\n    setInputText('');\n    await handleSendMessage(suggestion);\n  };\n\n  // Mobile-optimized image compression without quality loss\n  const compressImageForMobile = async (file: File): Promise<File> => {\n    return new Promise((resolve) => {\n      console.log('[MOBILE-DEBUG] Starting image compression', {\n        originalSize: file.size,\n        originalType: file.type,\n        fileName: file.name\n      });\n      \n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d')!;\n      const img = new Image();\n      \n      img.onload = () => {\n        // Calculate optimal dimensions (max 1920x1920 for mobile compatibility)\n        const maxDimension = 1920;\n        let { width, height } = img;\n        \n        if (width > maxDimension || height > maxDimension) {\n          const ratio = Math.min(maxDimension / width, maxDimension / height);\n          width *= ratio;\n          height *= ratio;\n        }\n        \n        canvas.width = width;\n        canvas.height = height;\n        \n        // Use high-quality settings for compression without quality loss\n        ctx.imageSmoothingEnabled = true;\n        ctx.imageSmoothingQuality = 'high';\n        ctx.drawImage(img, 0, 0, width, height);\n        \n        // Convert to blob with optimal quality (0.92 maintains quality while reducing size)\n        canvas.toBlob(\n          (blob) => {\n            if (blob) {\n              const compressedFile = new File([blob], file.name, {\n                type: file.type,\n                lastModified: file.lastModified\n              });\n              \n              console.log('[MOBILE-DEBUG] Image compression completed', {\n                originalSize: file.size,\n                compressedSize: compressedFile.size,\n                compressionRatio: (compressedFile.size / file.size * 100).toFixed(1) + '%',\n                dimensions: `${width}x${height}`\n              });\n              \n              resolve(compressedFile);\n            } else {\n              console.warn('[MOBILE-DEBUG] Compression failed, using original');\n              resolve(file);\n            }\n          },\n          file.type.includes('png') ? 'image/png' : 'image/jpeg',\n          0.92 // High quality compression\n        );\n      };\n      \n      img.onerror = () => {\n        console.warn('[MOBILE-DEBUG] Image load failed, using original');\n        resolve(file);\n      };\n      \n      img.src = URL.createObjectURL(file);\n    });\n  };\n\n  const handleDocumentConfirmation = async (userConfirmedType: string, messageId: string, extractedData: any, imageFile: File) => {\n    try {\n      setIsLoading(true);\n      console.log('[MOBILE-DEBUG] Starting document confirmation storage', {\n        userConfirmedType,\n        messageId,\n        fileName: imageFile.name,\n        fileSize: imageFile.size,\n        extractedDataKeys: Object.keys(extractedData || {})\n      });\n\n      // Store document with user-confirmed type and role metadata\n      const userRole = localStorage.getItem('userRole') || 'retailer';\n      const isMobile = /Mobi|Android/i.test(navigator.userAgent);\n      \n      // Use compressed image for mobile\n      const processedFile = isMobile ? await compressImageForMobile(imageFile) : imageFile;\n      \n      console.log('[MOBILE-DEBUG] Preparing document storage FormData', {\n        originalFile: imageFile.name,\n        processedFile: processedFile.name,\n        processedSize: processedFile.size,\n        isMobileCompressed: isMobile,\n        userRole,\n        extractedDataSize: JSON.stringify(extractedData).length\n      });\n      \n      const formData = new FormData();\n      formData.append('image', processedFile, processedFile.name);\n      formData.append('confirmedType', userConfirmedType);\n      formData.append('extractedData', JSON.stringify(extractedData));\n      formData.append('userRole', userRole); // Add role for compliance tracking\n      \n      // Add mobile-specific debugging headers\n      if (isMobile) {\n        formData.append('deviceType', 'mobile');\n        formData.append('userAgent', navigator.userAgent);\n      }\n      \n      console.log('[MOBILE-DEBUG] FormData prepared for document storage', {\n        userRole,\n        confirmedType: userConfirmedType,\n        extractedDataLength: JSON.stringify(extractedData).length\n      });\n\n      console.log('[MOBILE-DEBUG] Making document storage request to /api/documents');\n      \n      const response = await fetch('/api/documents', {\n        method: 'POST',\n        body: formData,\n        credentials: 'same-origin',\n        mode: 'cors'\n      });\n      \n      console.log('[MOBILE-DEBUG] Document storage response received', {\n        status: response.status,\n        statusText: response.statusText,\n        ok: response.ok,\n        headers: Object.fromEntries(response.headers.entries())\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('[MOBILE-DEBUG] Document storage failed - Response text:', errorText);\n        console.error('[MOBILE-DEBUG] Document storage failed - Full response:', {\n          status: response.status,\n          statusText: response.statusText,\n          headers: Object.fromEntries(response.headers.entries())\n        });\n        throw new Error(`Document storage failed: ${response.status} - ${errorText}`);\n      }\n\n      const storedDocument = await response.json();\n      \n      console.log('[MOBILE-DEBUG] Document stored successfully, invalidating caches');\n      \n      // Invalidate React Query caches to refresh all dashboards\n      await queryClient.invalidateQueries({ queryKey: ['/api/documents'] });\n      await queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      await queryClient.invalidateQueries({ queryKey: ['/api/stock'] });\n      await queryClient.invalidateQueries({ queryKey: ['/api/sales'] });\n      await queryClient.invalidateQueries({ queryKey: ['/api/sales/today'] });\n      \n      console.log('[MOBILE-DEBUG] All caches invalidated for dashboard updates');\n\n      // Remove confirmation message and add success message\n      setMessages(prev => prev.filter(m => m.id !== messageId));\n      \n      // Count actual medicines from extracted data\n      const medicineCount = storedDocument.lineItems?.length || 0;\n      const totalAmount = storedDocument.totals?.net || 'N/A';\n      \n      addMessage('assistant', \n        `✅ Document stored successfully!\\n\\n` +\n        `**Type:** ${userConfirmedType.toUpperCase()}\\n` +\n        `**Role:** ${(localStorage.getItem('userRole') || 'retailer').charAt(0).toUpperCase() + (localStorage.getItem('userRole') || 'retailer').slice(1)}\\n` +\n        `**ID:** ${storedDocument.id}\\n` +\n        `**Medicines:** ${medicineCount} items extracted\\n` +\n        `**Total:** ₹${totalAmount}\\n\\n` +\n        `Document has been processed with compliance metadata and is now available for querying.`,\n        'document',\n        undefined,\n        {\n          type: userConfirmedType,\n          medicines: storedDocument.lineItems?.map((item: any) => item.name) || [],\n          total: totalAmount,\n          medicineCount: medicineCount\n        }\n      );\n\n      // Update inventory if it's an invoice with actual line items\n      if (userConfirmedType === 'invoice' && storedDocument.lineItems?.length > 0) {\n        try {\n          // Check for duplicate invoices before updating stock\n          const billNumber = storedDocument.header?.docNo;\n          const invoiceDate = storedDocument.header?.date;\n          \n          if (billNumber) {\n            // Enhanced duplicate prevention with date matching\n            try {\n              const duplicateCheckResponse = await fetch('/api/documents');\n              const existingDocs = await duplicateCheckResponse.json();\n              \n              const duplicateDoc = existingDocs.find((doc: any) => {\n                const sameNumber = doc.header?.docNo === billNumber;\n                const sameDate = doc.header?.date === invoiceDate;\n                const differentId = doc.id !== storedDocument.id;\n                return sameNumber && sameDate && differentId;\n              });\n              \n              if (duplicateDoc) {\n                const dupDate = duplicateDoc.header?.date || 'Unknown date';\n                addMessage('system', \n                  `⚠️ **Duplicate Invoice Detected**\\n\\n` +\n                  `📋 Invoice: ${billNumber}\\n` +\n                  `📅 Date: ${dupDate}\\n\\n` +\n                  `This invoice was already processed. Stock levels remain unchanged to prevent duplication.\\n\\n` +\n                  `💡 You can still ask questions about this document.`\n                );\n                return; // Skip stock update\n              }\n            } catch (dupError) {\n              console.warn('Duplicate check failed:', dupError);\n              // Continue with stock update if duplicate check fails\n            }\n          }\n          \n          const stockResponse = await fetch('/api/stock/bulk', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n              items: storedDocument.lineItems.map((item: any) => ({\n                name: item.name,\n                batch: item.batch || 'N/A',\n                qty: parseFloat(item.qty) || 0,\n                exp: item.expiry || new Date().toISOString(),\n                mrp: parseFloat(item.mrp) || 0\n              })),\n              billNumber: billNumber,\n              date: invoiceDate\n            })\n          });\n\n          const stockResult = await stockResponse.json();\n          \n          if (stockResult.itemsProcessed > 0) {\n            addMessage('system', \n              `📦 ${stockResult.message}`\n            );\n          }\n        } catch (error) {\n          console.error('Failed to update inventory:', error);\n        }\n      }\n\n      setPendingConfirmation(null);\n\n    } catch (error) {\n      console.error('[MOBILE-DEBUG] Document confirmation failed - Full error:', {\n        message: error instanceof Error ? error.message : 'Unknown error',\n        stack: error instanceof Error ? error.stack : 'No stack trace',\n        name: error instanceof Error ? error.name : 'Unknown error type',\n        cause: error instanceof Error ? error.cause : undefined\n      });\n      \n      let userMessage = 'Could not store the document';\n      if (error instanceof Error) {\n        if (error.message.includes('Failed to fetch') || error.message.includes('network')) {\n          userMessage = 'Network error - check your connection';\n        } else if (error.message.includes('413')) {\n          userMessage = 'Image file too large - try a smaller image';\n        } else if (error.message.includes('400')) {\n          userMessage = 'Invalid document format - try a clearer image';\n        } else {\n          userMessage = `Storage error: ${error.message}`;\n        }\n      }\n      \n      addMessage('assistant', \n        `❌ **Document Storage Failed**\\n\\n${userMessage}\\n\\n🔧 **Debug Info:**\\n- Error: ${error instanceof Error ? error.message : 'Unknown'}\\n- File: ${imageFile.name}\\n- Size: ${Math.round(imageFile.size / 1024)}KB\\n\\nPlease try again or contact support if this persists.`\n      );\n      \n      toast({\n        title: 'Storage Failed',\n        description: userMessage,\n        variant: 'destructive'\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSendMessage = async (message: string, imageFile?: File) => {\n    if (!message.trim() && !imageFile) return;\n\n    let userContent = message.trim();\n\n    // Add user message\n    if (imageFile) {\n      console.log('[MOBILE-DEBUG] Starting image upload process', {\n        fileName: imageFile.name,\n        fileSize: imageFile.size,\n        fileType: imageFile.type,\n        userAgent: navigator.userAgent,\n        isMobile: /Mobi|Android/i.test(navigator.userAgent)\n      });\n      \n      const imageUrl = URL.createObjectURL(imageFile);\n      addMessage('user', userContent || 'Uploaded an image', 'image', imageUrl);\n      \n      // Process the image through AI\n      try {\n        setIsLoading(true);\n        \n        // Compress image for mobile compatibility\n        const isMobile = /Mobi|Android/i.test(navigator.userAgent);\n        const processedFile = isMobile ? await compressImageForMobile(imageFile) : imageFile;\n        \n        console.log('[MOBILE-DEBUG] Creating FormData for upload', {\n          originalFile: imageFile.name,\n          processedSize: processedFile.size,\n          isMobileCompressed: isMobile\n        });\n        \n        const formData = new FormData();\n        formData.append('image', processedFile, processedFile.name);\n        \n        // Log FormData contents for mobile debugging\n        console.log('[MOBILE-DEBUG] FormData created, sending request to /api/ai/analyze-document');\n        console.log('[MOBILE-DEBUG] Request headers will be set automatically by browser');\n\n        const response = await fetch('/api/ai/analyze-document', {\n          method: 'POST',\n          body: formData,\n          // Add credentials and origin handling for mobile compatibility\n          credentials: 'same-origin',\n          mode: 'cors'\n        });\n\n        console.log('[MOBILE-DEBUG] Response received', {\n          status: response.status,\n          statusText: response.statusText,\n          ok: response.ok,\n          headers: Object.fromEntries(response.headers.entries())\n        });\n\n        if (!response.ok) {\n          const errorText = await response.text();\n          console.error('[MOBILE-DEBUG] Response not OK, error text:', errorText);\n          let errorData;\n          try {\n            errorData = JSON.parse(errorText);\n          } catch {\n            errorData = { details: errorText };\n          }\n          throw new Error(errorData.details || `HTTP ${response.status}: ${response.statusText}`);\n        }\n\n        const analysisResult = await response.json();\n        console.log('[MOBILE-DEBUG] Analysis result received', {\n          documentType: analysisResult.documentType,\n          confidence: analysisResult.confidence,\n          hasRawText: !!analysisResult.rawText,\n          extractedDataKeys: Object.keys(analysisResult.extractedData || {})\n        });\n\n        // Show confirmation dialog for document type\n        const confirmationId = crypto.randomUUID();\n        addMessage('system', \n          'Please confirm the document type to ensure accurate processing:', \n          'confirmation',\n          undefined,\n          undefined,\n          {\n            messageId: confirmationId,\n            aiClassification: analysisResult.documentType,\n            extractedData: analysisResult, // Pass FULL analysis result, not just nested extractedData\n            confidence: analysisResult.confidence,\n            imageFile\n          }\n        );\n\n        setPendingConfirmation({\n          messageId: confirmationId,\n          aiClassification: analysisResult.documentType,\n          extractedData: analysisResult, // Pass FULL analysis result, not just nested extractedData\n          confidence: analysisResult.confidence,\n          imageFile\n        });\n\n      } catch (error) {\n        console.error('[MOBILE-DEBUG] Image analysis failed:', error);\n        console.error('[MOBILE-DEBUG] Error details:', {\n          message: error instanceof Error ? error.message : 'Unknown error',\n          stack: error instanceof Error ? error.stack : 'No stack trace',\n          name: error instanceof Error ? error.name : 'Unknown error type'\n        });\n        \n        // Enhanced error handling with user-friendly messages\n        let userFriendlyMessage = '❌ Sorry, I couldn\\'t analyze the image.';\n        \n        if (error instanceof Error) {\n          if (error.message.includes('Failed to fetch') || error.message.includes('network')) {\n            userFriendlyMessage = '🌐 **Network Issue**: Please check your internet connection and try again.';\n          } else if (error.message.includes('timeout')) {\n            userFriendlyMessage = '⏱️ **Upload Timeout**: The image is taking too long to process. Try a smaller image or check your connection.';\n          } else if (error.message.includes('413') || error.message.includes('too large')) {\n            userFriendlyMessage = '📏 **File Too Large**: Please try a smaller image (under 5MB).';\n          } else if (error.message.includes('400') || error.message.includes('bad request')) {\n            userFriendlyMessage = '📷 **Invalid Image**: Please upload a clear photo of your document.';\n          } else {\n            userFriendlyMessage = `❌ **Upload Error**: ${error.message}`;\n          }\n        }\n        \n        addMessage('assistant', \n          `${userFriendlyMessage}\\n\\n💡 **Tips:**\\n• Ensure good lighting and clear text\\n• Keep the document flat and in focus\\n• Try uploading a different image\\n\\nPlease try again or ask me something else.`\n        );\n      } finally {\n        setIsLoading(false);\n      }\n    } else {\n      addMessage('user', userContent);\n    }\n\n    // Get AI response for text queries\n    if (userContent && !imageFile) {\n      setIsLoading(true);\n\n      try {\n        const response = await agent.processQuery(userContent, {\n          hasImage: false,\n          currentScreen: 'AI Assistant',\n          sessionId: sessionId\n        });\n\n        addMessage('assistant', response);\n\n      } catch (error) {\n        console.error('AI Assistant error:', error);\n        \n        // Enhanced error handling for AI queries\n        let errorMessage = '❌ I encountered an error processing your request.';\n        \n        if (error instanceof Error) {\n          if (error.message.includes('Failed to fetch') || error.message.includes('network')) {\n            errorMessage = '🌐 **Connection Issue**: Unable to reach the AI service. Please check your internet connection.';\n          } else if (error.message.includes('timeout')) {\n            errorMessage = '⏱️ **Request Timeout**: The AI is taking too long to respond. Please try a simpler question.';\n          } else if (error.message.includes('500')) {\n            errorMessage = '🔧 **Server Error**: Our AI service is temporarily unavailable. Please try again in a moment.';\n          }\n        }\n        \n        addMessage('assistant', \n          `${errorMessage}\\n\\n💡 **You can try:**\\n• Rephrasing your question\\n• Asking about stored documents\\n• Uploading a new image\\n• Using voice input`\n        );\n        \n        toast({\n          title: 'Assistant Unavailable',\n          description: 'Please try again or contact support if this persists',\n          variant: 'destructive'\n        });\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    const message = inputText;\n    setInputText('');\n    await handleSendMessage(message);\n    inputRef.current?.focus();\n  };\n\n  const handleImageUpload = () => {\n    fileInputRef.current?.click();\n  };\n\n  const handleFileSelect = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      console.log('[MOBILE-DEBUG] File selected from input', {\n        fileName: file.name,\n        fileSize: file.size,\n        fileType: file.type,\n        isMobile: /Mobi|Android/i.test(navigator.userAgent)\n      });\n      await handleSendMessage('', file);\n    }\n    // Reset file input\n    e.target.value = '';\n  };\n\n  const handleCameraCapture = async () => {\n    try {\n      setIsUploading(true);\n      console.log('[MOBILE-DEBUG] Camera capture initiated');\n      \n      const result = await cameraCapture.captureImage();\n      \n      if (result.success && result.file) {\n        console.log('[MOBILE-DEBUG] Camera capture successful', {\n          fileName: result.file.name,\n          fileSize: result.file.size,\n          fileType: result.file.type\n        });\n        await handleSendMessage('', result.file);\n      } else {\n        console.error('[MOBILE-DEBUG] Camera capture failed:', result.error);\n        toast({\n          title: 'Capture Failed',\n          description: result.error || 'Could not capture image',\n          variant: 'destructive'\n        });\n      }\n    } catch (error) {\n      console.error('[MOBILE-DEBUG] Camera capture error:', error);\n      toast({\n        title: 'Capture Failed',\n        description: 'Could not access camera',\n        variant: 'destructive'\n      });\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const handleAnalyzeOnly = async (imageFile: File) => {\n    console.log('[MOBILE-DEBUG] Starting analyze-only mode', {\n      fileName: imageFile.name,\n      fileSize: imageFile.size,\n      fileType: imageFile.type\n    });\n    \n    const imageUrl = URL.createObjectURL(imageFile);\n    addMessage('user', 'Analyze this image', 'image', imageUrl);\n    \n    try {\n      setIsLoading(true);\n      \n      const formData = new FormData();\n      formData.append('image', imageFile);\n      \n      console.log('[MOBILE-DEBUG] Sending analyze-only request to /api/ai/analyze-document');\n\n      const response = await fetch('/api/ai/analyze-document', {\n        method: 'POST',\n        body: formData\n      });\n      \n      console.log('[MOBILE-DEBUG] Analyze-only response received', {\n        status: response.status,\n        ok: response.ok\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('[MOBILE-DEBUG] Analyze-only failed:', errorText);\n        let errorData;\n        try {\n          errorData = JSON.parse(errorText);\n        } catch {\n          errorData = { details: errorText };\n        }\n        throw new Error(errorData.details || 'Analysis failed');\n      }\n\n      const analysisResult = await response.json();\n\n      // Show analysis results without storing\n      let analysisText = `📄 **Document Analysis Results**\\n\\n`;\n      analysisText += `**Type:** ${analysisResult.documentType.toUpperCase()}\\n`;\n      \n      if (analysisResult.extractedData.rawText) {\n        analysisText += `**Text Found:** ${analysisResult.extractedData.rawText.substring(0, 300)}${analysisResult.extractedData.rawText.length > 300 ? '...' : ''}\\n\\n`;\n      }\n      \n      if (analysisResult.extractedData.header && Object.keys(analysisResult.extractedData.header).length > 0) {\n        analysisText += `**Header Info:**\\n`;\n        Object.entries(analysisResult.extractedData.header).forEach(([key, value]) => {\n          if (value) analysisText += `• ${key}: ${value}\\n`;\n        });\n        analysisText += '\\n';\n      }\n      \n      if (analysisResult.extractedData.lineItems && analysisResult.extractedData.lineItems.length > 0) {\n        analysisText += `**Medicines Found (${analysisResult.extractedData.lineItems.length}):**\\n`;\n        analysisResult.extractedData.lineItems.slice(0, 5).forEach((item: any, index: number) => {\n          analysisText += `${index + 1}. ${item.name || 'Unknown'}`;\n          if (item.qty) analysisText += ` - Qty: ${item.qty}`;\n          if (item.rate) analysisText += ` - Rate: ₹${item.rate}`;\n          analysisText += '\\n';\n        });\n        if (analysisResult.extractedData.lineItems.length > 5) {\n          analysisText += `...and ${analysisResult.extractedData.lineItems.length - 5} more items\\n`;\n        }\n        analysisText += '\\n';\n      }\n      \n      if (analysisResult.extractedData.totals && Object.keys(analysisResult.extractedData.totals).length > 0) {\n        analysisText += `**Totals:**\\n`;\n        Object.entries(analysisResult.extractedData.totals).forEach(([key, value]) => {\n          if (value) analysisText += `• ${key}: ₹${value}\\n`;\n        });\n      }\n      \n      analysisText += '\\n*This is analysis only - document was not stored.*';\n\n      addMessage('assistant', analysisText);\n\n    } catch (error) {\n      console.error('Image analysis failed:', error);\n      addMessage('assistant', \n        `❌ Analysis failed: ${error instanceof Error ? error.message : 'Unknown error'}\\n\\nPlease try again.`\n      );\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleAnalyzeImage = async () => {\n    if (fileInputRef.current) {\n      fileInputRef.current.setAttribute('data-analyze', 'true');\n      fileInputRef.current.click();\n    }\n  };\n\n  const handleVoiceToggle = async () => {\n    if (isListening) {\n      setIsListening(false);\n    } else {\n      setIsListening(true);\n      toast({\n        title: 'Voice Recognition',\n        description: 'Voice input will be available in a future update',\n        variant: 'default'\n      });\n      setTimeout(() => setIsListening(false), 2000);\n    }\n  };\n\n  const quickActions = [\n    { \n      label: 'Analyze Medicine Interactions', \n      icon: '💊',\n      action: () => handleSendMessage('Help me check for drug interactions and safety information')\n    },\n    { \n      label: 'Recent Documents Summary', \n      icon: '📄',\n      action: () => handleSendMessage('Show me a summary of recently uploaded documents')\n    },\n    { \n      label: 'Inventory Status', \n      icon: '📦',\n      action: () => handleSendMessage('What\\'s my current inventory status and any low stock alerts?')\n    },\n    { \n      label: 'Sales Analytics', \n      icon: '📊',\n      action: () => handleSendMessage('Give me today\\'s sales analytics and key insights')\n    }\n  ];\n\n  const formatTimestamp = (date: Date) => {\n    return new Intl.DateTimeFormat('en-US', {\n      hour: '2-digit',\n      minute: '2-digit'\n    }).format(date);\n  };\n\n  return (\n    <div className=\"fixed inset-0 z-50 bg-background flex flex-col overflow-hidden\" style={{\n      height: '100dvh', // Dynamic viewport height for better mobile support\n      width: '100vw',\n      maxHeight: '-webkit-fill-available'\n    }}>\n      {/* Header - Fixed height to prevent jumping */}\n      <header className=\"flex items-center justify-between p-4 border-b border-border bg-background/95 backdrop-blur sticky top-0 z-10 shrink-0 h-16\">\n        <div className=\"flex items-center space-x-3\">\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            onClick={() => setLocation('/')}\n            data-testid=\"back-button\"\n          >\n            <X className=\"w-4 h-4\" />\n          </Button>\n          <div>\n            <h1 className=\"text-lg font-semibold text-foreground flex items-center\">\n              <Sparkles className=\"w-5 h-5 mr-2\" />\n              AI Assistant\n            </h1>\n            <p className=\"text-xs text-muted-foreground\">Pharmacy Intelligence</p>\n          </div>\n        </div>\n        <Badge variant=\"secondary\" className=\"text-xs\">\n          {isLoading ? 'Thinking...' : 'Ready'}\n        </Badge>\n      </header>\n\n      {/* Messages Area - Prevent jumping with stable height calculations */}\n      <div className=\"flex-1 overflow-y-auto p-4 space-y-4\" style={{ \n        minHeight: 0,\n        maxHeight: 'calc(100vh - 140px)', // Account for header + input area\n        scrollBehavior: 'smooth',\n        overscrollBehavior: 'contain'\n      }}>\n        {messages.length === 0 && !isLoading && (\n          <div className=\"text-center py-8\">\n            <Sparkles className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground\" />\n            <h3 className=\"text-lg font-medium mb-2\">AI Assistant Ready</h3>\n            <p className=\"text-muted-foreground mb-6\">\n              Upload documents, ask questions, or try a quick action below\n            </p>\n            \n            {/* Quick Actions */}\n            <div className=\"grid grid-cols-1 gap-3 max-w-md mx-auto\">\n              {quickActions.map((action, index) => (\n                <Button\n                  key={index}\n                  variant=\"outline\"\n                  className=\"justify-start h-auto py-3 px-4 text-left\"\n                  onClick={action.action}\n                  data-testid={`quick-action-${index}`}\n                >\n                  <span className=\"text-lg mr-3\">{action.icon}</span>\n                  <span className=\"text-sm\">{action.label}</span>\n                </Button>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {messages.map((message) => (\n          <div key={message.id}>\n            {message.type === 'confirmation' && message.pendingConfirmation ? (\n              <div className=\"flex justify-center\">\n                <DocumentConfirmation\n                  aiClassification={message.pendingConfirmation.aiClassification}\n                  extractedData={message.pendingConfirmation.extractedData}\n                  confidence={message.pendingConfirmation?.confidence || 0.5}\n                  onConfirm={(userType) => {\n                    if (message.pendingConfirmation?.imageFile) {\n                      handleDocumentConfirmation(\n                        userType, \n                        message.id, \n                        message.pendingConfirmation?.extractedData, \n                        message.pendingConfirmation.imageFile\n                      );\n                    }\n                  }}\n                  onCancel={() => {\n                    setMessages(prev => prev.filter(m => m.id !== message.id));\n                    setPendingConfirmation(null);\n                  }}\n                />\n              </div>\n            ) : (\n              <div\n                className={`flex ${message.role === 'user' ? 'justify-end' : message.role === 'system' ? 'justify-center' : 'justify-start'}`}\n              >\n                <div\n                  className={`max-w-[85%] rounded-2xl px-4 py-3 ${\n                    message.role === 'user'\n                      ? 'bg-primary text-primary-foreground ml-12'\n                      : message.role === 'system'\n                      ? 'bg-amber-100 dark:bg-amber-950/20 text-amber-800 dark:text-amber-200 mx-4'\n                      : 'bg-muted mr-12'\n                  }`}\n                >\n                  {message.type === 'image' && message.imageUrl && (\n                    <div className=\"mb-2\">\n                      <img \n                        src={message.imageUrl} \n                        alt=\"Uploaded image\" \n                        className=\"max-w-full h-auto rounded-lg\"\n                        style={{ maxHeight: '200px' }}\n                      />\n                    </div>\n                  )}\n                  \n                  {message.type === 'document' && message.documentInfo && (\n                    <div className=\"mb-2 p-3 bg-background/50 rounded-lg border\">\n                      <div className=\"flex items-center space-x-2 mb-2\">\n                        <FileText className=\"w-4 h-4\" />\n                        <Badge variant=\"outline\">{message.documentInfo.type}</Badge>\n                        {message.documentInfo.confidence && (\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            {(message.documentInfo.confidence * 100).toFixed(1)}%\n                          </Badge>\n                        )}\n                      </div>\n                      {message.documentInfo.medicines && message.documentInfo.medicines.length > 0 && (\n                        <div className=\"text-xs text-muted-foreground\">\n                          Medicines: {message.documentInfo.medicines.slice(0, 3).join(', ')}\n                          {message.documentInfo.medicines.length > 3 && ` +${message.documentInfo.medicines.length - 3} more`}\n                        </div>\n                      )}\n                      {message.documentInfo.total && (\n                        <div className=\"text-xs text-muted-foreground\">\n                          Total: ₹{message.documentInfo.total}\n                        </div>\n                      )}\n                    </div>\n                  )}\n                  \n                  <div className=\"whitespace-pre-wrap text-sm\">\n                    {message.content}\n                  </div>\n                  \n                  {/* Clickable Suggestions */}\n                  {message.role === 'assistant' && (() => {\n                    const suggestions = extractSuggestions(message.content);\n                    return suggestions.length > 0 ? (\n                      <div className=\"mt-3 space-y-2\">\n                        <div className=\"text-xs text-muted-foreground font-medium\">\n                          💡 Quick actions:\n                        </div>\n                        <div className=\"flex flex-wrap gap-2\">\n                          {suggestions.slice(0, 4).map((suggestion, index) => (\n                            <Button\n                              key={index}\n                              variant=\"outline\"\n                              size=\"sm\"\n                              className=\"h-8 text-xs bg-blue-50 hover:bg-blue-100 border-blue-200 text-blue-700 dark:bg-blue-950/20 dark:hover:bg-blue-950/30 dark:border-blue-800 dark:text-blue-300\"\n                              onClick={() => handleSuggestionClick(suggestion)}\n                              data-testid={`suggestion-button-${index}`}\n                            >\n                              {suggestion.length > 35 ? `${suggestion.slice(0, 32)}...` : suggestion}\n                            </Button>\n                          ))}\n                        </div>\n                      </div>\n                    ) : null;\n                  })()}\n                  \n                  <div className={`text-xs mt-2 ${\n                    message.role === 'user' ? 'text-primary-foreground/70' : 'text-muted-foreground'\n                  }`}>\n                    {formatTimestamp(message.timestamp)}\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        ))}\n\n        {isLoading && (\n          <div className=\"flex justify-start\">\n            <div className=\"bg-muted rounded-2xl px-4 py-3 mr-12\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"animate-spin w-4 h-4 border-2 border-current border-t-transparent rounded-full\"></div>\n                <span className=\"text-sm\">AI is thinking...</span>\n              </div>\n            </div>\n          </div>\n        )}\n\n        <div ref={messagesEndRef} />\n      </div>\n\n      {/* Input Area - ChatGPT/Perplexity Style with Mobile Optimization */}\n      <div className=\"border-t border-border bg-background p-4 shrink-0\" style={{ \n        paddingBottom: 'max(env(safe-area-inset-bottom, 16px), 16px)',\n        minHeight: '120px', // Increased for larger buttons\n        position: 'sticky',\n        bottom: 0,\n        zIndex: 10\n      }}>\n        {/* Larger Action Buttons for Mobile */}\n        <div className=\"flex justify-center space-x-3 mb-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"lg\"\n            onClick={handleCameraCapture}\n            disabled={isUploading || isLoading}\n            data-testid=\"camera-button\"\n            className=\"h-12 w-12 p-0 rounded-full hover:bg-muted/50 bg-muted/20 border border-border/50\"\n            title=\"Take Photo\"\n          >\n            <Camera className=\"w-6 h-6 text-foreground\" />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"lg\"\n            onClick={handleImageUpload}\n            disabled={isUploading || isLoading}\n            data-testid=\"upload-button\"\n            className=\"h-12 w-12 p-0 rounded-full hover:bg-muted/50 bg-muted/20 border border-border/50\"\n            title=\"Upload Image\"\n          >\n            <ImageIcon className=\"w-6 h-6 text-foreground\" />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"lg\"\n            onClick={handleAnalyzeImage}\n            disabled={isUploading || isLoading}\n            data-testid=\"analyze-button\"\n            className=\"h-12 w-12 p-0 rounded-full hover:bg-muted/50 bg-muted/20 border border-border/50\"\n            title=\"Analyze Only\"\n          >\n            <Zap className=\"w-6 h-6 text-foreground\" />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"lg\"\n            onClick={handleVoiceToggle}\n            disabled={isLoading}\n            data-testid=\"voice-button\"\n            className={`h-12 w-12 p-0 rounded-full hover:bg-muted/50 border border-border/50 ${\n              isListening ? 'bg-red-100 dark:bg-red-900/20' : 'bg-muted/20'\n            }`}\n            title=\"Voice Input\"\n          >\n            {isListening ? (\n              <div className=\"relative\">\n                <MicOff className=\"w-6 h-6 text-red-600\" />\n                <div className=\"absolute inset-0 animate-ping\">\n                  <MicOff className=\"w-6 h-6 text-red-600 opacity-20\" />\n                </div>\n              </div>\n            ) : (\n              <Mic className=\"w-6 h-6 text-foreground\" />\n            )}\n          </Button>\n        </div>\n\n        {/* Text Input - ChatGPT Style */}\n        <form onSubmit={handleSubmit} className=\"relative\">\n          <Input\n            ref={inputRef}\n            value={inputText}\n            onChange={(e) => setInputText(e.target.value)}\n            placeholder=\"Ask about medicines, documents, or get insights...\"\n            disabled={isLoading}\n            className=\"flex-1 pr-12 rounded-2xl border-2 resize-none min-h-[44px] text-base bg-background focus:border-primary/50 transition-colors\"\n            data-testid=\"message-input\"\n            style={{ fontSize: '16px' }} // Prevent zoom on iOS\n          />\n          <Button \n            type=\"submit\" \n            disabled={isLoading || (!inputText.trim())}\n            data-testid=\"send-button\"\n            className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-8 w-8 p-0 rounded-full bg-primary hover:bg-primary/90 disabled:bg-muted disabled:text-muted-foreground\"\n            size=\"sm\"\n          >\n            <Send className=\"w-4 h-4\" />\n          </Button>\n        </form>\n        \n        <div className=\"text-xs text-center text-muted-foreground\">\n          AI responses may contain errors. Verify important medical information.\n        </div>\n      </div>\n\n      {/* Hidden file input */}\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        accept=\"image/*\"\n        className=\"hidden\"\n        onChange={handleFileSelect}\n      />\n    </div>\n  );\n}","size_bytes":48429},"client/src/pages/ai-assistant.tsx":{"content":"import { useState, useRef, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\nimport { ArrowLeft, Send, Upload, Mic, MicOff, Sparkles, Camera, FileText } from 'lucide-react';\nimport { useLocation } from 'wouter';\nimport { enhancedCapture } from '@/services/enhanced-capture';\nimport { cameraCapture } from '@/services/camera-capture';\n// import { pharmacyAgent } from '@/services/pharmacy-agent';\n\ninterface Message {\n  id: string;\n  role: 'user' | 'assistant';\n  content: string;\n  timestamp: Date;\n  type?: 'text' | 'image' | 'document';\n  imageUrl?: string;\n  documentInfo?: {\n    type: 'bill' | 'prescription' | 'invoice';\n    medicines?: string[];\n    total?: number;\n  };\n}\n\nexport default function AIAssistantPage() {\n  const [, setLocation] = useLocation();\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [inputText, setInputText] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isListening, setIsListening] = useState(false);\n  const [isUploading, setIsUploading] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  useEffect(() => {\n    // Add welcome message\n    addMessage('assistant', \n      'Welcome to AushadiExpress AI Assistant! 🏥\\n\\n' +\n      'I can help you with:\\n' +\n      '• Analyzing bills, prescriptions, and invoices\\n' +\n      '• Medicine information and drug interactions\\n' +\n      '• Inventory management and stock levels\\n' +\n      '• Sales analytics and reporting\\n' +\n      '• Business insights from your documents\\n\\n' +\n      'You can upload images, ask questions, or use voice commands. How can I assist you today?'\n    );\n  }, []);\n\n  const addMessage = (role: 'user' | 'assistant', content: string, type: 'text' | 'image' | 'document' = 'text', imageUrl?: string, documentInfo?: any) => {\n    const message: Message = {\n      id: crypto.randomUUID(),\n      role,\n      content,\n      timestamp: new Date(),\n      type,\n      imageUrl,\n      documentInfo\n    };\n    setMessages(prev => [...prev, message]);\n  };\n\n  const handleSendMessage = async (message: string, imageFile?: File) => {\n    if (!message.trim() && !imageFile) return;\n\n    let userContent = message.trim();\n    let documentAnalysis = null;\n\n    // Add user message\n    if (imageFile) {\n      const imageUrl = URL.createObjectURL(imageFile);\n      addMessage('user', userContent || 'Uploaded an image', 'image', imageUrl);\n      \n      // Process the image through enhanced capture\n      try {\n        setIsLoading(true);\n        const analysisResult = await enhancedCapture.captureAndAnalyze('file', imageFile, {\n          skipConfirmation: true,\n          autoClassify: true\n        });\n\n        if (analysisResult.success && analysisResult.document) {\n          documentAnalysis = analysisResult.document.analysis;\n          \n          // Add document analysis message\n          addMessage('assistant', \n            `📄 Document analyzed successfully!\\n\\n` +\n            `**Type:** ${analysisResult.document.type.toUpperCase()}\\n` +\n            `**Confidence:** ${(documentAnalysis.confidence * 100).toFixed(1)}%\\n\\n` +\n            `Document has been automatically stored and indexed for future queries.`,\n            'document',\n            undefined,\n            {\n              type: analysisResult.document.type,\n              medicines: documentAnalysis.extractedData.medicines?.map(m => m.name) || [],\n              total: documentAnalysis.extractedData.total\n            }\n          );\n\n          // Enhance the user query with document context\n          if (!userContent) {\n            userContent = `I just uploaded a ${analysisResult.document.type}. Please analyze it and provide insights.`;\n          } else {\n            userContent = `I uploaded a ${analysisResult.document.type} image. ${userContent}`;\n          }\n        }\n      } catch (error) {\n        console.error('Image analysis failed:', error);\n        addMessage('assistant', \n          '❌ Sorry, I couldn\\'t analyze the image. Please try again or ask me something else.'\n        );\n        setIsLoading(false);\n        return;\n      }\n    } else {\n      addMessage('user', userContent);\n    }\n\n    setIsLoading(true);\n\n    try {\n      // Get AI response through pharmacy agent\n      const { pharmacyAgent } = await import('@/services/pharmacy-agent');\n      const response = await pharmacyAgent.processQuery(userContent, {\n        hasImage: !!imageFile,\n        documentAnalysis,\n        currentScreen: 'AI Assistant'\n      });\n\n      addMessage('assistant', response);\n\n    } catch (error) {\n      console.error('AI Assistant error:', error);\n      addMessage('assistant', \n        '❌ I encountered an error processing your request. Please try again or rephrase your question.'\n      );\n      \n      toast({\n        title: 'Assistant Error',\n        description: 'Failed to get AI response',\n        variant: 'destructive'\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    const message = inputText;\n    setInputText('');\n    await handleSendMessage(message);\n  };\n\n  const handleImageUpload = async () => {\n    try {\n      setIsUploading(true);\n      \n      const input = document.createElement('input');\n      input.type = 'file';\n      input.accept = 'image/*';\n      \n      input.onchange = async (e) => {\n        const target = e.target as HTMLInputElement;\n        const file = target.files?.[0];\n        \n        if (file) {\n          await handleSendMessage('', file);\n        }\n        setIsUploading(false);\n      };\n      \n      input.oncancel = () => {\n        setIsUploading(false);\n      };\n      \n      input.click();\n    } catch (error) {\n      console.error('Image upload failed:', error);\n      setIsUploading(false);\n      toast({\n        title: 'Upload Failed',\n        description: 'Could not upload image',\n        variant: 'destructive'\n      });\n    }\n  };\n\n  const handleCameraCapture = async () => {\n    try {\n      setIsUploading(true);\n      \n      const result = await cameraCapture.captureImage();\n      \n      if (result.success && result.file) {\n        await handleSendMessage('', result.file);\n      } else {\n        toast({\n          title: 'Capture Failed',\n          description: result.error || 'Could not capture image',\n          variant: 'destructive'\n        });\n      }\n    } catch (error) {\n      console.error('Camera capture failed:', error);\n      toast({\n        title: 'Capture Failed',\n        description: 'Could not access camera',\n        variant: 'destructive'\n      });\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const handleVoiceToggle = async () => {\n    if (isListening) {\n      setIsListening(false);\n      // Stop voice recognition\n    } else {\n      setIsListening(true);\n      // Start voice recognition\n      toast({\n        title: 'Voice Recognition',\n        description: 'Voice input will be available in a future update',\n        variant: 'default'\n      });\n      setTimeout(() => setIsListening(false), 2000);\n    }\n  };\n\n  const quickActions = [\n    { \n      label: 'Analyze Medicine Interactions', \n      icon: '💊',\n      action: () => handleSendMessage('Help me check for drug interactions and safety information')\n    },\n    { \n      label: 'Recent Documents Summary', \n      icon: '📄',\n      action: () => handleSendMessage('Show me a summary of recently uploaded documents')\n    },\n    { \n      label: 'Inventory Status', \n      icon: '📦',\n      action: () => handleSendMessage('What\\'s my current inventory status and any low stock alerts?')\n    },\n    { \n      label: 'Sales Analytics', \n      icon: '📊',\n      action: () => handleSendMessage('Give me today\\'s sales analytics and key insights')\n    }\n  ];\n\n  const formatTimestamp = (date: Date) => {\n    return new Intl.DateTimeFormat('en-US', {\n      hour: '2-digit',\n      minute: '2-digit'\n    }).format(date);\n  };\n\n  return (\n    <div className=\"flex flex-col h-screen bg-background\">\n      {/* Header */}\n      <header className=\"flex items-center justify-between p-4 border-b border-border bg-background/95 backdrop-blur sticky top-0 z-10\">\n        <div className=\"flex items-center space-x-3\">\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            onClick={() => setLocation('/')}\n            data-testid=\"back-button\"\n          >\n            <ArrowLeft className=\"w-4 h-4\" />\n          </Button>\n          <div>\n            <h1 className=\"text-lg font-semibold text-foreground flex items-center\">\n              <Sparkles className=\"w-5 h-5 mr-2\" />\n              AI Assistant\n            </h1>\n            <p className=\"text-xs text-muted-foreground\">Pharmacy Intelligence</p>\n          </div>\n        </div>\n        <Badge variant=\"secondary\" className=\"text-xs\">\n          {isLoading ? 'Thinking...' : 'Ready'}\n        </Badge>\n      </header>\n\n      {/* Messages */}\n      <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n        {messages.length === 0 && !isLoading && (\n          <div className=\"text-center py-8\">\n            <Sparkles className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground\" />\n            <h3 className=\"text-lg font-medium mb-2\">AI Assistant Ready</h3>\n            <p className=\"text-muted-foreground mb-6\">\n              Upload documents, ask questions, or try a quick action below\n            </p>\n            \n            {/* Quick Actions */}\n            <div className=\"grid grid-cols-1 gap-3 max-w-md mx-auto\">\n              {quickActions.map((action, index) => (\n                <Button\n                  key={index}\n                  variant=\"outline\"\n                  className=\"justify-start h-auto py-3 px-4 text-left\"\n                  onClick={action.action}\n                  data-testid={`quick-action-${index}`}\n                >\n                  <span className=\"text-lg mr-3\">{action.icon}</span>\n                  <span className=\"text-sm\">{action.label}</span>\n                </Button>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {messages.map((message) => (\n          <div\n            key={message.id}\n            className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}\n          >\n            <div\n              className={`max-w-[85%] rounded-2xl px-4 py-3 ${\n                message.role === 'user'\n                  ? 'bg-primary text-primary-foreground ml-12'\n                  : 'bg-muted mr-12'\n              }`}\n            >\n              {message.type === 'image' && message.imageUrl && (\n                <div className=\"mb-2\">\n                  <img \n                    src={message.imageUrl} \n                    alt=\"Uploaded image\" \n                    className=\"max-w-full h-auto rounded-lg\"\n                    style={{ maxHeight: '200px' }}\n                  />\n                </div>\n              )}\n              \n              {message.type === 'document' && message.documentInfo && (\n                <div className=\"mb-2 p-3 bg-background/50 rounded-lg border\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <FileText className=\"w-4 h-4\" />\n                    <Badge variant=\"outline\">{message.documentInfo.type}</Badge>\n                  </div>\n                  {message.documentInfo.medicines && message.documentInfo.medicines.length > 0 && (\n                    <div className=\"text-xs text-muted-foreground\">\n                      Medicines: {message.documentInfo.medicines.slice(0, 3).join(', ')}\n                      {message.documentInfo.medicines.length > 3 && ` +${message.documentInfo.medicines.length - 3} more`}\n                    </div>\n                  )}\n                  {message.documentInfo.total && (\n                    <div className=\"text-xs text-muted-foreground\">\n                      Total: ₹{message.documentInfo.total}\n                    </div>\n                  )}\n                </div>\n              )}\n              \n              <div className=\"whitespace-pre-wrap text-sm\">\n                {message.content}\n              </div>\n              \n              <div className={`text-xs mt-2 ${\n                message.role === 'user' ? 'text-primary-foreground/70' : 'text-muted-foreground'\n              }`}>\n                {formatTimestamp(message.timestamp)}\n              </div>\n            </div>\n          </div>\n        ))}\n\n        {isLoading && (\n          <div className=\"flex justify-start\">\n            <div className=\"bg-muted rounded-2xl px-4 py-3 mr-12\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"animate-spin w-4 h-4 border-2 border-current border-t-transparent rounded-full\"></div>\n                <span className=\"text-sm\">AI is thinking...</span>\n              </div>\n            </div>\n          </div>\n        )}\n\n        <div ref={messagesEndRef} />\n      </div>\n\n      {/* Input Area */}\n      <div className=\"border-t border-border bg-background/95 backdrop-blur p-4 space-y-3\">\n        {/* Action Buttons */}\n        <div className=\"flex justify-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={handleCameraCapture}\n            disabled={isUploading || isLoading}\n            data-testid=\"camera-button\"\n          >\n            <Camera className=\"w-4 h-4 mr-2\" />\n            Camera\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={handleImageUpload}\n            disabled={isUploading || isLoading}\n            data-testid=\"upload-button\"\n          >\n            <Upload className=\"w-4 h-4 mr-2\" />\n            Upload\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={handleVoiceToggle}\n            disabled={isLoading}\n            data-testid=\"voice-button\"\n            className={isListening ? 'bg-red-500 text-white' : ''}\n          >\n            {isListening ? <MicOff className=\"w-4 h-4 mr-2\" /> : <Mic className=\"w-4 h-4 mr-2\" />}\n            Voice\n          </Button>\n        </div>\n\n        {/* Text Input */}\n        <form onSubmit={handleSubmit} className=\"flex space-x-2\">\n          <Input\n            value={inputText}\n            onChange={(e) => setInputText(e.target.value)}\n            placeholder=\"Ask about medicines, documents, or get insights...\"\n            disabled={isLoading}\n            className=\"flex-1\"\n            data-testid=\"message-input\"\n          />\n          <Button \n            type=\"submit\" \n            disabled={isLoading || (!inputText.trim())}\n            data-testid=\"send-button\"\n          >\n            <Send className=\"w-4 h-4\" />\n          </Button>\n        </form>\n        \n        <div className=\"text-xs text-center text-muted-foreground\">\n          AI responses may contain errors. Verify important medical information.\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":15324},"client/src/services/ai-vision.ts":{"content":"import OpenAI from 'openai';\nimport { createModuleLogger } from '@/utils/app-logger';\n\nconst log = createModuleLogger('AI-Vision');\n\n// the newest OpenAI model is \"gpt-4o\" which supports vision capabilities\nconst openai = new OpenAI({ \n  apiKey: import.meta.env.VITE_OPENAI_API_KEY || '',\n  dangerouslyAllowBrowser: true\n});\n\nexport interface DocumentAnalysis {\n  documentType: 'bill' | 'prescription' | 'invoice' | 'other';\n  confidence: number;\n  extractedData: {\n    medicines?: Array<{\n      name: string;\n      quantity?: number;\n      price?: number;\n      batch?: string;\n      expiry?: string;\n    }>;\n    total?: number;\n    date?: string;\n    customerInfo?: {\n      name?: string;\n      contact?: string;\n    };\n    doctorInfo?: {\n      name?: string;\n      registration?: string;\n    };\n    pharmacyInfo?: {\n      name?: string;\n      license?: string;\n    };\n  };\n  rawText: string;\n  metadata: {\n    timestamp: Date;\n    processingTime: number;\n  };\n}\n\nexport class AIVisionService {\n  private hasApiKey(): boolean {\n    // For browser-based apps, we'll use the server endpoint instead\n    return true; // Always return true since we'll use server-side processing\n  }\n\n  async analyzeDocument(imageFile: File): Promise<DocumentAnalysis> {\n    const startTime = Date.now();\n    log.info('Starting document analysis', { fileName: imageFile.name, fileSize: imageFile.size });\n\n    try {\n      // Use server-side API endpoint for vision analysis\n      const formData = new FormData();\n      formData.append('image', imageFile);\n\n      log.debug('Sending image to server for analysis');\n      \n      const response = await fetch('/api/ai/analyze-document', {\n        method: 'POST',\n        body: formData\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Server analysis failed: ${errorText}`);\n      }\n\n      const result = await response.json() as DocumentAnalysis;\n      \n      // Update processing time\n      result.metadata.processingTime = Date.now() - startTime;\n      \n      log.info('Document analysis completed', { \n        type: result.documentType, \n        processingTime: result.metadata.processingTime \n      });\n\n      return result;\n\n    } catch (error) {\n      log.error('Document analysis failed', error as Error, { fileName: imageFile.name });\n      throw new Error(`Document analysis failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  private async classifyDocument(base64Image: string): Promise<{ documentType: DocumentAnalysis['documentType'], confidence: number }> {\n    log.debug('Starting document classification');\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"user\",\n          content: [\n            {\n              type: \"text\",\n              text: `Analyze this pharmacy-related document and classify it. Return a JSON response with:\n{\n  \"documentType\": \"bill\" | \"prescription\" | \"invoice\" | \"other\",\n  \"confidence\": 0.0-1.0,\n  \"reasoning\": \"brief explanation\"\n}\n\nTypes:\n- \"bill\": Customer receipt/bill from pharmacy sale\n- \"prescription\": Doctor's prescription with medicines\n- \"invoice\": Supplier invoice for pharmacy inventory\n- \"other\": Any other document type`\n            },\n            {\n              type: \"image_url\",\n              image_url: { url: `data:image/jpeg;base64,${base64Image}` }\n            }\n          ]\n        }\n      ],\n      response_format: { type: \"json_object\" },\n      max_tokens: 500\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || '{}');\n    log.debug('Classification result', result);\n\n    return {\n      documentType: result.documentType || 'other',\n      confidence: result.confidence || 0.5\n    };\n  }\n\n  private async extractDataByType(base64Image: string, documentType: string): Promise<{ extractedData: DocumentAnalysis['extractedData'], rawText: string }> {\n    log.debug('Starting data extraction', { documentType });\n\n    let extractionPrompt = '';\n    \n    switch (documentType) {\n      case 'bill':\n        extractionPrompt = `Extract data from this pharmacy bill/receipt. Return JSON with:\n{\n  \"medicines\": [{\"name\": \"string\", \"quantity\": number, \"price\": number}],\n  \"total\": number,\n  \"date\": \"YYYY-MM-DD\",\n  \"customerInfo\": {\"name\": \"string\", \"contact\": \"string\"},\n  \"pharmacyInfo\": {\"name\": \"string\", \"license\": \"string\"},\n  \"rawText\": \"all visible text\"\n}`;\n        break;\n        \n      case 'prescription':\n        extractionPrompt = `Extract data from this doctor's prescription. Return JSON with:\n{\n  \"medicines\": [{\"name\": \"string\", \"quantity\": number}],\n  \"date\": \"YYYY-MM-DD\",\n  \"customerInfo\": {\"name\": \"string\"},\n  \"doctorInfo\": {\"name\": \"string\", \"registration\": \"string\"},\n  \"rawText\": \"all visible text\"\n}`;\n        break;\n        \n      case 'invoice':\n        extractionPrompt = `Extract data from this supplier invoice. Return JSON with:\n{\n  \"medicines\": [{\"name\": \"string\", \"quantity\": number, \"price\": number, \"batch\": \"string\", \"expiry\": \"YYYY-MM-DD\"}],\n  \"total\": number,\n  \"date\": \"YYYY-MM-DD\",\n  \"pharmacyInfo\": {\"name\": \"string\"},\n  \"rawText\": \"all visible text\"\n}`;\n        break;\n        \n      default:\n        extractionPrompt = `Extract any readable text and data from this document. Return JSON with:\n{\n  \"rawText\": \"all visible text\",\n  \"extractedData\": {}\n}`;\n    }\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"user\",\n          content: [\n            { type: \"text\", text: extractionPrompt },\n            {\n              type: \"image_url\",\n              image_url: { url: `data:image/jpeg;base64,${base64Image}` }\n            }\n          ]\n        }\n      ],\n      response_format: { type: \"json_object\" },\n      max_tokens: 1500\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || '{}');\n    log.debug('Extraction result', { resultKeys: Object.keys(result) });\n\n    return {\n      extractedData: result,\n      rawText: result.rawText || ''\n    };\n  }\n\n  private async fileToBase64(file: File): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => {\n        const result = reader.result as string;\n        const base64 = result.split(',')[1];\n        resolve(base64);\n      };\n      reader.onerror = reject;\n      reader.readAsDataURL(file);\n    });\n  }\n\n  async testConnection(): Promise<boolean> {\n    if (!this.hasApiKey()) {\n      return false;\n    }\n\n    try {\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [{ role: \"user\", content: \"Hello, are you working?\" }],\n        max_tokens: 10\n      });\n      \n      return Boolean(response.choices[0].message.content);\n    } catch (error) {\n      log.error('Connection test failed', error as Error);\n      return false;\n    }\n  }\n}\n\nexport const aiVision = new AIVisionService();","size_bytes":7002},"client/src/services/camera-capture.ts":{"content":"import { createModuleLogger } from '@/utils/app-logger';\n\nconst log = createModuleLogger('CameraCapture');\n\nexport interface CaptureResult {\n  success: boolean;\n  file?: File;\n  error?: string;\n  imageDataUrl?: string;\n}\n\nclass CameraCaptureService {\n  private isCapturing = false;\n\n  async captureImage(): Promise<CaptureResult> {\n    if (this.isCapturing) {\n      return {\n        success: false,\n        error: 'Another capture is already in progress'\n      };\n    }\n\n    this.isCapturing = true;\n\n    try {\n      log.info('Starting camera capture');\n\n      // Create camera capture interface\n      const result = await this.createCameraCapture();\n      \n      if (result.success && result.file) {\n        // Convert to data URL for immediate use\n        const imageDataUrl = await this.fileToDataUrl(result.file);\n        \n        log.info('Camera capture successful', {\n          fileName: result.file.name,\n          size: result.file.size,\n          type: result.file.type\n        });\n\n        return {\n          success: true,\n          file: result.file,\n          imageDataUrl\n        };\n      }\n\n      return result;\n\n    } catch (error) {\n      log.error('Camera capture failed', error as Error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown camera error'\n      };\n    } finally {\n      this.isCapturing = false;\n    }\n  }\n\n  private async createCameraCapture(): Promise<CaptureResult> {\n    return new Promise((resolve) => {\n      try {\n        // Use file input with camera capture\n        this.createFileInput().then(resolve);\n      } catch (error) {\n        log.error('Camera capture setup failed', error as Error);\n        resolve({\n          success: false,\n          error: 'Camera capture setup failed'\n        });\n      }\n    });\n  }\n\n  private async createFileInput(): Promise<CaptureResult> {\n    return new Promise((resolve) => {\n      const input = document.createElement('input');\n      input.type = 'file';\n      input.accept = 'image/*';\n      input.capture = 'environment';\n      \n      input.onchange = (e) => {\n        const target = e.target as HTMLInputElement;\n        const file = target.files?.[0];\n        \n        if (file) {\n          log.debug('File selected via input', {\n            name: file.name,\n            size: file.size,\n            type: file.type\n          });\n          \n          resolve({\n            success: true,\n            file\n          });\n        } else {\n          resolve({\n            success: false,\n            error: 'No file selected'\n          });\n        }\n      };\n      \n      input.oncancel = () => {\n        resolve({\n          success: false,\n          error: 'File selection cancelled'\n        });\n      };\n      \n      // Trigger file picker\n      input.click();\n    });\n  }\n\n  private async fileToDataUrl(file: File): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => resolve(reader.result as string);\n      reader.onerror = reject;\n      reader.readAsDataURL(file);\n    });\n  }\n\n  isCurrentlyCapturing(): boolean {\n    return this.isCapturing;\n  }\n}\n\nexport const cameraCapture = new CameraCaptureService();","size_bytes":3228},"client/src/services/document-storage.ts":{"content":"import Dexie, { type Table } from 'dexie';\nimport { createModuleLogger } from '@/utils/app-logger';\nimport { type DocumentAnalysis } from '@/services/ai-vision';\n\nconst log = createModuleLogger('DocumentStorage');\n\nexport interface StoredDocument {\n  id: string;\n  type: 'bill' | 'prescription' | 'invoice' | 'other';\n  originalFileName: string;\n  imageData: string; // base64 encoded image\n  analysis: DocumentAnalysis;\n  createdAt: Date;\n  updatedAt: Date;\n  synced: boolean;\n  tags: string[];\n  searchableText: string; // For full-text search\n}\n\nexport interface DocumentSearchFilter {\n  type?: StoredDocument['type'];\n  dateFrom?: Date;\n  dateTo?: Date;\n  tags?: string[];\n  searchText?: string;\n}\n\nclass DocumentDatabase extends Dexie {\n  documents!: Table<StoredDocument>;\n  searchIndex!: Table<{ id: string; documentId: string; term: string }>;\n\n  constructor() {\n    super('AushadiDocuments');\n    this.version(1).stores({\n      documents: 'id, type, createdAt, synced, searchableText',\n      searchIndex: 'id, documentId, term'\n    });\n  }\n}\n\nclass DocumentStorageService {\n  private db: DocumentDatabase;\n\n  constructor() {\n    this.db = new DocumentDatabase();\n  }\n\n  async init(): Promise<void> {\n    try {\n      log.info('Initializing document storage database');\n      await this.db.open();\n      log.info('Document storage database initialized successfully');\n    } catch (error) {\n      log.error('Failed to initialize document storage', error as Error);\n      throw error;\n    }\n  }\n\n  async storeDocument(\n    fileName: string, \n    imageData: string, \n    analysis: DocumentAnalysis\n  ): Promise<StoredDocument> {\n    const document: StoredDocument = {\n      id: crypto.randomUUID(),\n      type: analysis.documentType,\n      originalFileName: fileName,\n      imageData,\n      analysis,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      synced: false,\n      tags: this.generateTags(analysis),\n      searchableText: this.createSearchableText(analysis)\n    };\n\n    try {\n      log.info('Storing document', { \n        id: document.id, \n        type: document.type, \n        fileName \n      });\n\n      await this.db.transaction('rw', this.db.documents, this.db.searchIndex, async () => {\n        // Store document\n        await this.db.documents.add(document);\n        \n        // Update search index\n        await this.updateSearchIndex(document);\n      });\n      \n      log.info('Document stored successfully', { id: document.id });\n      \n      // Queue for background sync\n      this.queueForSync(document);\n      \n      return document;\n      \n    } catch (error) {\n      log.error('Failed to store document', error as Error, { fileName });\n      throw error;\n    }\n  }\n\n  async getDocument(id: string): Promise<StoredDocument | undefined> {\n    try {\n      const document = await this.db.documents.get(id);\n      log.debug('Retrieved document', { id, found: !!document });\n      return document;\n    } catch (error) {\n      log.error('Failed to get document', error as Error, { id });\n      return undefined;\n    }\n  }\n\n  async getAllDocuments(): Promise<StoredDocument[]> {\n    try {\n      const documents = await this.db.documents.orderBy('createdAt').reverse().toArray();\n      log.debug('Retrieved all documents', { count: documents.length });\n      return documents;\n    } catch (error) {\n      log.error('Failed to get all documents', error as Error);\n      return [];\n    }\n  }\n\n  async searchDocuments(filter: DocumentSearchFilter): Promise<StoredDocument[]> {\n    try {\n      log.debug('Searching documents', filter);\n      \n      let query = this.db.documents.orderBy('createdAt').reverse();\n      \n      // Apply type filter\n      if (filter.type) {\n        query = this.db.documents.where('type').equals(filter.type).reverse();\n      }\n      \n      let documents = await query.toArray();\n      \n      // Apply additional filters\n      if (filter.dateFrom) {\n        documents = documents.filter(doc => doc.createdAt >= filter.dateFrom!);\n      }\n      \n      if (filter.dateTo) {\n        documents = documents.filter(doc => doc.createdAt <= filter.dateTo!);\n      }\n      \n      if (filter.tags && filter.tags.length > 0) {\n        documents = documents.filter(doc => \n          filter.tags!.some(tag => doc.tags.includes(tag))\n        );\n      }\n      \n      if (filter.searchText) {\n        const searchTerm = filter.searchText.toLowerCase();\n        documents = documents.filter(doc => \n          doc.searchableText.toLowerCase().includes(searchTerm)\n        );\n      }\n      \n      log.debug('Search completed', { \n        resultsCount: documents.length,\n        filter \n      });\n      \n      return documents;\n      \n    } catch (error) {\n      log.error('Document search failed', error as Error, filter);\n      return [];\n    }\n  }\n\n  async deleteDocument(id: string): Promise<boolean> {\n    try {\n      log.info('Deleting document', { id });\n      \n      await this.db.transaction('rw', this.db.documents, this.db.searchIndex, async () => {\n        await this.db.documents.delete(id);\n        // Clean up search index entries for this document\n        await this.db.searchIndex.where('documentId').equals(id).delete();\n      });\n      \n      log.info('Document deleted successfully', { id });\n      return true;\n      \n    } catch (error) {\n      log.error('Failed to delete document', error as Error, { id });\n      return false;\n    }\n  }\n\n  async getDocumentsByType(type: StoredDocument['type']): Promise<StoredDocument[]> {\n    return this.searchDocuments({ type });\n  }\n\n  async getRecentDocuments(limit: number = 10): Promise<StoredDocument[]> {\n    const documents = await this.getAllDocuments();\n    return documents.slice(0, limit);\n  }\n\n  async getUnsyncedDocuments(): Promise<StoredDocument[]> {\n    const documents = await this.getAllDocuments();\n    return documents.filter(doc => !doc.synced);\n  }\n\n  async markDocumentSynced(id: string): Promise<void> {\n    try {\n      await this.db.documents.update(id, { \n        synced: true, \n        updatedAt: new Date() \n      });\n      log.debug('Document marked as synced', { id });\n    } catch (error) {\n      log.error('Failed to mark document as synced', error as Error, { id });\n    }\n  }\n\n  private generateTags(analysis: DocumentAnalysis): string[] {\n    const tags: string[] = [analysis.documentType];\n    \n    // Add tags based on document content\n    if (analysis.extractedData.medicines?.length) {\n      tags.push('medicines');\n      \n      // Add specific medicine names as tags\n      analysis.extractedData.medicines.forEach(medicine => {\n        if (medicine.name) {\n          tags.push(medicine.name.toLowerCase());\n        }\n      });\n    }\n    \n    if (analysis.extractedData.total) {\n      tags.push('with-total');\n    }\n    \n    if (analysis.extractedData.date) {\n      tags.push('dated');\n    }\n    \n    if (analysis.extractedData.doctorInfo) {\n      tags.push('doctor-prescription');\n    }\n    \n    return Array.from(new Set(tags)); // Remove duplicates\n  }\n\n  private createSearchableText(analysis: DocumentAnalysis): string {\n    const textParts: string[] = [];\n    \n    // Include raw OCR text\n    if (analysis.rawText) {\n      textParts.push(analysis.rawText);\n    }\n    \n    // Include structured data\n    if (analysis.extractedData.medicines) {\n      analysis.extractedData.medicines.forEach(medicine => {\n        if (medicine.name) textParts.push(medicine.name);\n        if (medicine.batch) textParts.push(medicine.batch);\n      });\n    }\n    \n    if (analysis.extractedData.customerInfo?.name) {\n      textParts.push(analysis.extractedData.customerInfo.name);\n    }\n    \n    if (analysis.extractedData.doctorInfo?.name) {\n      textParts.push(analysis.extractedData.doctorInfo.name);\n    }\n    \n    if (analysis.extractedData.pharmacyInfo?.name) {\n      textParts.push(analysis.extractedData.pharmacyInfo.name);\n    }\n    \n    return textParts.join(' ').toLowerCase();\n  }\n\n  private async updateSearchIndex(document: StoredDocument): Promise<void> {\n    // Simple search indexing - could be enhanced with better full-text search\n    const words = document.searchableText.split(/\\s+/).filter(word => word.length > 2);\n    \n    for (const word of words) {\n      try {\n        await this.db.searchIndex.put({\n          id: `${document.id}-${word}`,\n          documentId: document.id,\n          term: word\n        });\n      } catch (error) {\n        // Ignore indexing errors for individual terms\n        log.warn('Failed to index term', { term: word, documentId: document.id });\n      }\n    }\n  }\n\n  private queueForSync(document: StoredDocument): void {\n    // Queue document for background sync to server\n    // This would integrate with the existing outbox pattern\n    log.debug('Document queued for sync', { id: document.id });\n    \n    // TODO: Integrate with existing sync infrastructure\n    // Could add to outbox for server synchronization\n  }\n\n  async getStorageStats(): Promise<{\n    totalDocuments: number;\n    documentsByType: Record<string, number>;\n    unsyncedCount: number;\n    totalSize: number;\n  }> {\n    const documents = await this.getAllDocuments();\n    \n    const stats = {\n      totalDocuments: documents.length,\n      documentsByType: {} as Record<string, number>,\n      unsyncedCount: documents.filter(doc => !doc.synced).length,\n      totalSize: documents.reduce((size, doc) => size + doc.imageData.length, 0)\n    };\n    \n    // Count by type\n    documents.forEach(doc => {\n      stats.documentsByType[doc.type] = (stats.documentsByType[doc.type] || 0) + 1;\n    });\n    \n    return stats;\n  }\n}\n\n// Export singleton instance\nexport const documentStorage = new DocumentStorageService();","size_bytes":9650},"client/src/services/enhanced-capture.ts":{"content":"import { createModuleLogger } from '@/utils/app-logger';\nimport { aiVision, type DocumentAnalysis } from '@/services/ai-vision';\nimport { documentStorage, type StoredDocument } from '@/services/document-storage';\nimport { cameraCapture } from '@/services/camera-capture';\n\nconst log = createModuleLogger('EnhancedCapture');\n\nexport interface CaptureResult {\n  success: boolean;\n  document?: StoredDocument;\n  error?: string;\n  message?: string;\n}\n\nexport interface CaptureOptions {\n  autoClassify?: boolean;\n  skipConfirmation?: boolean;\n  category?: 'bill' | 'prescription' | 'invoice';\n  tags?: string[];\n}\n\nclass EnhancedCaptureService {\n  private isProcessing = false;\n\n  /**\n   * Compress image for optimal OCR performance without losing quality\n   */\n  private async compressImage(file: File): Promise<File> {\n    return new Promise((resolve) => {\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d')!;\n      const img = new Image();\n      \n      img.onload = () => {\n        // Calculate optimal dimensions for OCR (max 1920x1080 for good balance)\n        const maxWidth = 1920;\n        const maxHeight = 1080;\n        let { width, height } = img;\n        \n        if (width > maxWidth || height > maxHeight) {\n          const ratio = Math.min(maxWidth / width, maxHeight / height);\n          width *= ratio;\n          height *= ratio;\n        }\n        \n        canvas.width = width;\n        canvas.height = height;\n        \n        // Draw with high quality settings for text recognition\n        ctx.imageSmoothingEnabled = true;\n        ctx.imageSmoothingQuality = 'high';\n        ctx.drawImage(img, 0, 0, width, height);\n        \n        // Convert to blob with optimized settings for OCR\n        canvas.toBlob(\n          (blob) => {\n            if (blob) {\n              const compressedFile = new File([blob], file.name, {\n                type: 'image/jpeg',\n                lastModified: Date.now()\n              });\n              resolve(compressedFile);\n            } else {\n              resolve(file); // Fallback to original if compression fails\n            }\n          },\n          'image/jpeg',\n          0.85 // 85% quality - optimal balance for OCR text recognition\n        );\n      };\n      \n      img.onerror = () => resolve(file); // Fallback to original on error\n      img.src = URL.createObjectURL(file);\n    });\n  }\n\n  async captureAndAnalyze(\n    source: 'camera' | 'file',\n    file?: File,\n    options: CaptureOptions = {}\n  ): Promise<CaptureResult> {\n    if (this.isProcessing) {\n      return {\n        success: false,\n        error: 'Another capture is already in progress'\n      };\n    }\n\n    this.isProcessing = true;\n\n    try {\n      log.info('Starting enhanced capture and analysis', { source, options });\n\n      // Step 1: Get the image file\n      let imageFile: File;\n      \n      if (source === 'file' && file) {\n        imageFile = file;\n        log.debug('Using provided file', { name: file.name, size: file.size });\n      } else if (source === 'camera') {\n        // Use existing camera capture infrastructure\n        const captureResult = await this.captureFromCamera();\n        if (!captureResult.success || !captureResult.file) {\n          return {\n            success: false,\n            error: captureResult.error || 'Camera capture failed'\n          };\n        }\n        imageFile = captureResult.file;\n        log.debug('Camera capture successful', { size: imageFile.size });\n      } else {\n        return {\n          success: false,\n          error: 'Invalid capture source or missing file'\n        };\n      }\n\n      // Step 1.5: Compress image for better OCR and reduced bandwidth\n      log.info('Compressing image for optimal OCR performance');\n      const compressedFile = await this.compressImage(imageFile);\n      log.debug('Image compression completed', { \n        originalSize: imageFile.size, \n        compressedSize: compressedFile.size,\n        compressionRatio: Math.round((1 - compressedFile.size / imageFile.size) * 100)\n      });\n\n      // Step 2: Analyze with OpenAI Vision\n      log.info('Starting AI vision analysis');\n      const analysis = await aiVision.analyzeDocument(compressedFile);\n      \n      log.info('AI analysis completed', {\n        documentType: analysis.documentType,\n        confidence: analysis.confidence,\n        processingTime: analysis.metadata.processingTime\n      });\n\n      // Step 3: User confirmation (if not skipped)\n      if (!options.skipConfirmation) {\n        const confirmed = await this.confirmDocumentType(analysis);\n        if (!confirmed) {\n          return {\n            success: false,\n            message: 'Document analysis cancelled by user'\n          };\n        }\n      }\n\n      // Step 4: Store in document database\n      const imageDataUrl = await this.fileToDataUrl(imageFile);\n      const storedDocument = await documentStorage.storeDocument(\n        imageFile.name || `capture-${Date.now()}.jpg`,\n        imageDataUrl,\n        analysis\n      );\n\n      // Step 5: Extract and update inventory (if applicable)\n      if (analysis.documentType === 'invoice' && analysis.extractedData.medicines) {\n        await this.updateInventoryFromAnalysis(analysis);\n      }\n\n      log.info('Enhanced capture completed successfully', {\n        documentId: storedDocument.id,\n        type: storedDocument.type\n      });\n\n      return {\n        success: true,\n        document: storedDocument,\n        message: `${analysis.documentType} analyzed and stored successfully`\n      };\n\n    } catch (error) {\n      log.error('Enhanced capture failed', error as Error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error occurred'\n      };\n    } finally {\n      this.isProcessing = false;\n    }\n  }\n\n  private async captureFromCamera(): Promise<{ success: boolean; file?: File; error?: string }> {\n    try {\n      log.debug('Initiating camera capture');\n      \n      const result = await cameraCapture.captureImage();\n      \n      return {\n        success: result.success,\n        file: result.file,\n        error: result.error\n      };\n      \n    } catch (error) {\n      log.error('Camera capture failed', error as Error);\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : 'Camera capture failed' \n      };\n    }\n  }\n\n  private async confirmDocumentType(analysis: DocumentAnalysis): Promise<boolean> {\n    return new Promise((resolve) => {\n      log.debug('Requesting user confirmation for document type', {\n        type: analysis.documentType,\n        confidence: analysis.confidence\n      });\n\n      // Create confirmation dialog\n      const confirmed = confirm(\n        `Document detected as: ${analysis.documentType.toUpperCase()}\\n` +\n        `Confidence: ${(analysis.confidence * 100).toFixed(1)}%\\n\\n` +\n        `Proceed with analysis?`\n      );\n\n      log.debug('User confirmation result', { confirmed });\n      resolve(confirmed);\n    });\n  }\n\n  private async updateInventoryFromAnalysis(analysis: DocumentAnalysis): Promise<void> {\n    try {\n      log.info('Updating inventory from invoice analysis');\n      \n      if (!analysis.extractedData.medicines?.length) {\n        log.warn('No medicines found in analysis for inventory update');\n        return;\n      }\n\n      // Extract bill info for duplicate detection\n      const billNumber = (analysis.extractedData as any)?.pharmacyInfo?.billNumber || \n                        (analysis.extractedData as any)?.header?.docNo ||\n                        'unknown';\n      const invoiceDate = analysis.extractedData.date;\n\n      // Check for duplicate invoices before updating stock\n      if (billNumber && billNumber !== 'unknown') {\n        const existingDocs = await documentStorage.getAllDocuments();\n        const duplicateDoc = existingDocs.find((doc: any) => \n          doc.analysis?.extractedData?.header?.docNo === billNumber ||\n          doc.fileName?.includes(billNumber)\n        );\n        \n        if (duplicateDoc) {\n          log.warn('Duplicate invoice detected, skipping stock update', { billNumber });\n          return;\n        }\n      }\n\n      // Prepare bulk stock update\n      const stockUpdates = analysis.extractedData.medicines.map(medicine => ({\n        name: medicine.name,\n        quantity: medicine.quantity || 0,\n        price: medicine.price || 0,\n        batch: medicine.batch || '',\n        expiry: medicine.expiry || ''\n      }));\n\n      log.debug('Prepared stock updates', { count: stockUpdates.length });\n\n      // Call existing bulk stock update API with duplicate detection info\n      const response = await fetch('/api/stock/bulk', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ \n          items: stockUpdates,\n          billNumber: billNumber,\n          date: invoiceDate\n        })\n      });\n\n      if (response.ok) {\n        log.info('Inventory updated successfully', { itemsUpdated: stockUpdates.length });\n      } else {\n        log.error('Inventory update failed', undefined, { status: response.status });\n      }\n\n    } catch (error) {\n      log.error('Failed to update inventory from analysis', error as Error);\n    }\n  }\n\n  private async fileToDataUrl(file: File): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => resolve(reader.result as string);\n      reader.onerror = reject;\n      reader.readAsDataURL(file);\n    });\n  }\n\n  async getProcessingStatus(): Promise<{ isProcessing: boolean }> {\n    return { isProcessing: this.isProcessing };\n  }\n\n  async testAIConnection(): Promise<boolean> {\n    try {\n      return await aiVision.testConnection();\n    } catch (error) {\n      log.error('AI connection test failed', error as Error);\n      return false;\n    }\n  }\n\n  async getRecentDocuments(limit: number = 10): Promise<StoredDocument[]> {\n    try {\n      return await documentStorage.getRecentDocuments(limit);\n    } catch (error) {\n      log.error('Failed to get recent documents', error as Error);\n      return [];\n    }\n  }\n\n  async searchDocuments(searchText: string, type?: 'bill' | 'prescription' | 'invoice'): Promise<StoredDocument[]> {\n    try {\n      return await documentStorage.searchDocuments({\n        searchText,\n        type\n      });\n    } catch (error) {\n      log.error('Document search failed', error as Error);\n      return [];\n    }\n  }\n\n  async getDocumentAnalysis(documentId: string): Promise<DocumentAnalysis | null> {\n    try {\n      const document = await documentStorage.getDocument(documentId);\n      return document?.analysis || null;\n    } catch (error) {\n      log.error('Failed to get document analysis', error as Error);\n      return null;\n    }\n  }\n\n  async deleteDocument(documentId: string): Promise<boolean> {\n    try {\n      return await documentStorage.deleteDocument(documentId);\n    } catch (error) {\n      log.error('Failed to delete document', error as Error);\n      return false;\n    }\n  }\n\n  async generateDocumentReport(type?: 'bill' | 'prescription' | 'invoice'): Promise<{\n    totalDocuments: number;\n    recentCount: number;\n    topMedicines: string[];\n    summary: string;\n  }> {\n    try {\n      log.info('Generating document report', { type });\n      \n      const documents = type \n        ? await documentStorage.getDocumentsByType(type)\n        : await documentStorage.getAllDocuments();\n\n      const recentDocuments = documents.filter(doc => \n        Date.now() - doc.createdAt.getTime() < 7 * 24 * 60 * 60 * 1000 // Last 7 days\n      );\n\n      // Extract top medicines across all documents\n      const medicineCount: Record<string, number> = {};\n      documents.forEach(doc => {\n        doc.analysis.extractedData.medicines?.forEach(medicine => {\n          if (medicine.name) {\n            medicineCount[medicine.name] = (medicineCount[medicine.name] || 0) + 1;\n          }\n        });\n      });\n\n      const topMedicines = Object.entries(medicineCount)\n        .sort(([,a], [,b]) => b - a)\n        .slice(0, 10)\n        .map(([name]) => name);\n\n      const summary = `Analyzed ${documents.length} ${type || 'documents'} with ${recentDocuments.length} recent entries. ` +\n        `Top medicines: ${topMedicines.slice(0, 3).join(', ')}.`;\n\n      return {\n        totalDocuments: documents.length,\n        recentCount: recentDocuments.length,\n        topMedicines,\n        summary\n      };\n\n    } catch (error) {\n      log.error('Failed to generate document report', error as Error);\n      return {\n        totalDocuments: 0,\n        recentCount: 0,\n        topMedicines: [],\n        summary: 'Report generation failed'\n      };\n    }\n  }\n}\n\n// Export singleton instance\nexport const enhancedCapture = new EnhancedCaptureService();","size_bytes":12797},"client/src/services/pharmacy-agent.ts":{"content":"import { createModuleLogger } from '@/utils/app-logger';\nimport { remoteAI } from '@/lib/ai-assistant';\nimport { enhancedCapture } from '@/services/enhanced-capture';\nimport { documentStorage } from '@/services/document-storage';\nimport { type DocumentAnalysis } from '@/services/ai-vision';\n\nconst log = createModuleLogger('PharmacyAgent');\n\nexport interface PharmacyContext {\n  hasImage?: boolean;\n  documentAnalysis?: DocumentAnalysis;\n  currentScreen?: string;\n  userIntent?: 'document_analysis' | 'medicine_info' | 'inventory' | 'sales' | 'general';\n  sessionId?: string;\n  conversationHistory?: Array<{ role: 'user' | 'assistant'; content: string; timestamp: Date }>;\n}\n\n// Three-tier memory system for agentic AI learning\ninterface ShortTermMemory {\n  sessionId: string;\n  conversationHistory: Array<{ role: 'user' | 'assistant'; content: string; timestamp: Date }>;\n  currentIntents: string[];\n  documentContext: Array<{ type: string; confidence: number; timestamp: Date }>;\n}\n\ninterface MediumTermMemory {\n  userId: string;\n  userPatterns: {\n    preferredDocumentTypes: Record<string, number>;\n    commonQueries: string[];\n    workflowPreferences: Record<string, any>;\n    correctionHistory: Array<{ aiClassification: string; userCorrection: string; timestamp: Date }>;\n  };\n  lastUpdated: Date;\n}\n\ninterface LongTermMemory {\n  knowledgeBase: {\n    medicineDatabase: Record<string, any>;\n    businessRules: Array<{ rule: string; examples: string[]; confidence: number }>;\n    documentPatterns: Record<string, Array<{ pattern: string; confidence: number }>>;\n  };\n  lastSync: Date;\n}\n\ninterface BusinessRule {\n  id: string;\n  condition: (query: string, context: PharmacyContext) => boolean;\n  handler: (query: string, context: PharmacyContext) => Promise<string>;\n  priority: number;\n}\n\nclass PharmacyAgentService {\n  private businessRules: BusinessRule[] = [];\n  private shortTermMemory: Map<string, ShortTermMemory> = new Map();\n  private mediumTermMemory: Map<string, MediumTermMemory> = new Map();\n  private longTermMemory!: LongTermMemory;\n\n  constructor() {\n    this.initializeBusinessRules();\n    this.initializeMemoryTiers();\n    log.info('Pharmacy Agent initialized with business rules and memory tiers');\n  }\n\n  private initializeMemoryTiers() {\n    // Initialize long-term memory (persistent knowledge base)\n    this.longTermMemory = {\n      knowledgeBase: {\n        medicineDatabase: this.loadMedicineDatabase(),\n        businessRules: this.loadBusinessRulePatterns(),\n        documentPatterns: this.loadDocumentPatterns()\n      },\n      lastSync: new Date()\n    };\n\n    // Load medium-term memory from localStorage\n    this.loadMediumTermMemory();\n    \n    log.info('Memory tiers initialized', {\n      shortTermSessions: this.shortTermMemory.size,\n      mediumTermUsers: this.mediumTermMemory.size,\n      longTermKnowledge: Object.keys(this.longTermMemory.knowledgeBase).length\n    });\n  }\n\n  private loadMedicineDatabase(): Record<string, any> {\n    // Basic medicine database - in production this would come from API\n    return {\n      'paracetamol': { category: 'analgesic', interactions: ['warfarin'], dosage: '500mg-1g' },\n      'aspirin': { category: 'nsaid', interactions: ['warfarin', 'ibuprofen'], dosage: '325mg-650mg' },\n      'ibuprofen': { category: 'nsaid', interactions: ['aspirin', 'ace_inhibitors'], dosage: '400mg-600mg' }\n    };\n  }\n\n  private loadBusinessRulePatterns(): Array<{ rule: string; examples: string[]; confidence: number }> {\n    return [\n      {\n        rule: 'prescription_validation',\n        examples: ['Check doctor signature', 'Verify patient details', 'Confirm medicine availability'],\n        confidence: 0.95\n      },\n      {\n        rule: 'inventory_reorder',\n        examples: ['Stock below minimum', 'Expiry within 90 days', 'High demand medicine'],\n        confidence: 0.90\n      }\n    ];\n  }\n\n  private loadDocumentPatterns(): Record<string, Array<{ pattern: string; confidence: number }>> {\n    return {\n      'bill': [\n        { pattern: 'Contains customer name and total amount', confidence: 0.95 },\n        { pattern: 'Has itemized medicine list with quantities', confidence: 0.90 }\n      ],\n      'prescription': [\n        { pattern: 'Doctor signature and registration number', confidence: 0.95 },\n        { pattern: 'Patient name and medicine with dosage', confidence: 0.90 }\n      ],\n      'invoice': [\n        { pattern: 'Supplier information and GST details', confidence: 0.95 },\n        { pattern: 'Batch numbers and expiry dates', confidence: 0.90 }\n      ]\n    };\n  }\n\n  private loadMediumTermMemory() {\n    try {\n      const storedMemory = localStorage.getItem('pharmacy_agent_memory');\n      if (storedMemory) {\n        const parsedMemory = JSON.parse(storedMemory);\n        Object.entries(parsedMemory).forEach(([userId, memory]) => {\n          this.mediumTermMemory.set(userId, memory as MediumTermMemory);\n        });\n      }\n    } catch (error) {\n      log.error('Failed to load medium-term memory', error as Error);\n    }\n  }\n\n  private saveMediumTermMemory() {\n    try {\n      const memoryObj = Object.fromEntries(this.mediumTermMemory);\n      localStorage.setItem('pharmacy_agent_memory', JSON.stringify(memoryObj));\n    } catch (error) {\n      log.error('Failed to save medium-term memory', error as Error);\n    }\n  }\n\n  private getOrCreateShortTermMemory(sessionId: string): ShortTermMemory {\n    if (!this.shortTermMemory.has(sessionId)) {\n      this.shortTermMemory.set(sessionId, {\n        sessionId,\n        conversationHistory: [],\n        currentIntents: [],\n        documentContext: []\n      });\n    }\n    return this.shortTermMemory.get(sessionId)!;\n  }\n\n  private getOrCreateMediumTermMemory(userId: string): MediumTermMemory {\n    if (!this.mediumTermMemory.has(userId)) {\n      this.mediumTermMemory.set(userId, {\n        userId,\n        userPatterns: {\n          preferredDocumentTypes: {},\n          commonQueries: [],\n          workflowPreferences: {},\n          correctionHistory: []\n        },\n        lastUpdated: new Date()\n      });\n    }\n    return this.mediumTermMemory.get(userId)!;\n  }\n\n  private updateMemoryFromInteraction(sessionId: string, userId: string, query: string, response: string, documentType?: string, userCorrection?: string) {\n    // Update short-term memory\n    const shortTerm = this.getOrCreateShortTermMemory(sessionId);\n    shortTerm.conversationHistory.push(\n      { role: 'user', content: query, timestamp: new Date() },\n      { role: 'assistant', content: response, timestamp: new Date() }\n    );\n\n    if (documentType) {\n      shortTerm.documentContext.push({\n        type: documentType,\n        confidence: 0.85,\n        timestamp: new Date()\n      });\n    }\n\n    // Update medium-term memory\n    const mediumTerm = this.getOrCreateMediumTermMemory(userId);\n    \n    // Track document type preferences\n    if (documentType) {\n      mediumTerm.userPatterns.preferredDocumentTypes[documentType] = \n        (mediumTerm.userPatterns.preferredDocumentTypes[documentType] || 0) + 1;\n    }\n\n    // Track user corrections for learning\n    if (userCorrection && documentType) {\n      mediumTerm.userPatterns.correctionHistory.push({\n        aiClassification: documentType,\n        userCorrection: userCorrection,\n        timestamp: new Date()\n      });\n    }\n\n    // Track common queries\n    const queryKeywords = query.toLowerCase().split(' ').filter(word => word.length > 3);\n    const uniqueKeywords = Array.from(new Set([...mediumTerm.userPatterns.commonQueries, ...queryKeywords]));\n    mediumTerm.userPatterns.commonQueries = uniqueKeywords.slice(0, 50); // Keep top 50 keywords\n\n    mediumTerm.lastUpdated = new Date();\n    this.saveMediumTermMemory();\n  }\n\n  private initializeBusinessRules() {\n    this.businessRules = [\n      // Document Analysis Rules\n      {\n        id: 'document_upload_analysis',\n        priority: 10,\n        condition: (query, context) => context.hasImage || query.toLowerCase().includes('document') || query.toLowerCase().includes('upload'),\n        handler: this.handleDocumentAnalysis.bind(this)\n      },\n      \n      // Medicine Information Rules - EXPANDED to catch MRP, pricing, medicine name queries\n      {\n        id: 'medicine_interactions',\n        priority: 9,\n        condition: (query) => {\n          const q = query.toLowerCase();\n          return q.includes('interaction') || q.includes('drug') || q.includes('medicine') ||\n                 q.includes('mrp') || q.includes('price') || q.includes('cost') || q.includes('rate') ||\n                 q.includes('qty') || q.includes('quantity') || q.includes('batch') || q.includes('expiry') ||\n                 // Specific medicine names from stored data\n                 q.includes('moxel') || q.includes('xceft') || q.includes('epidosin') || q.includes('tm/af') ||\n                 q.includes('nurocare') || q.includes('ascal') || q.includes('tab') || q.includes('gel') ||\n                 // Generic medicine inquiry patterns\n                 q.includes('what is') || q.includes('tell me') || q.includes('show me') ||\n                 q.includes('find') || q.includes('search');\n        },\n        handler: this.handleMedicineInquiry.bind(this)\n      },\n      \n      // Inventory Management Rules - ENHANCED for \"what items\" queries\n      {\n        id: 'inventory_status',\n        priority: 8,\n        condition: (query) => {\n          const q = query.toLowerCase();\n          return q.includes('inventory') || q.includes('stock') || q.includes('low stock') ||\n                 q.includes('what items') || q.includes('items do we have') || q.includes('products do we have') ||\n                 q.includes('medicines do we have') || q.includes('what do we have in stock');\n        },\n        handler: this.handleInventoryInquiry.bind(this)\n      },\n      \n      // Sales Analytics Rules\n      {\n        id: 'sales_analytics',\n        priority: 7,\n        condition: (query) => query.toLowerCase().includes('sales') || query.toLowerCase().includes('revenue') || query.toLowerCase().includes('analytics'),\n        handler: this.handleSalesInquiry.bind(this)\n      },\n      \n      // Document Search Rules - EXPANDED for invoice/supplier queries  \n      {\n        id: 'document_search',\n        priority: 6,\n        condition: (query) => {\n          const q = query.toLowerCase();\n          return q.includes('recent') || q.includes('uploaded') || q.includes('processed') ||\n                 q.includes('invoice') || q.includes('bill') || q.includes('document') ||\n                 q.includes('gstn') || q.includes('gst') || q.includes('supplier') || q.includes('buyer') ||\n                 q.includes('pull') || q.includes('show') || q.includes('details') || q.includes('summary') ||\n                 // Specific supplier/GSTN patterns\n                 q.includes('sri madhu') || q.includes('sai baba') || q.includes('37benpm') || q.includes('37baspn') ||\n                 q.includes('stored') || q.includes('my data') || q.includes('customer insight') ||\n                 q.includes('above') || q.includes('these');\n        },\n        handler: this.handleDocumentSearch.bind(this)\n      },\n      \n      // Compliance and Regulatory Rules\n      {\n        id: 'compliance_check',\n        priority: 5,\n        condition: (query) => query.toLowerCase().includes('compliance') || query.toLowerCase().includes('regulation') || query.toLowerCase().includes('prescription'),\n        handler: this.handleComplianceInquiry.bind(this)\n      },\n      \n      // General Pharmacy Business Rules\n      {\n        id: 'general_pharmacy',\n        priority: 1,\n        condition: () => true, // Catch-all\n        handler: this.handleGeneralInquiry.bind(this)\n      }\n    ];\n    \n    // Sort by priority (higher priority first)\n    this.businessRules.sort((a, b) => b.priority - a.priority);\n  }\n\n  async processQuery(query: string, context: PharmacyContext = {}): Promise<string> {\n    try {\n      const sessionId = context.sessionId || 'default';\n      const userId = 'user-1'; // TODO: Get from session\n      \n      log.info('Processing pharmacy query with memory tiers', { \n        query: query.substring(0, 100), \n        hasImage: context.hasImage,\n        currentScreen: context.currentScreen,\n        sessionId\n      });\n\n      console.log('[PHARMACY-AGENT] Query analysis:', {\n        originalQuery: query,\n        queryLower: query.toLowerCase(),\n        availableRules: this.businessRules.map(r => ({ id: r.id, priority: r.priority }))\n      });\n\n      // Enhance context with memory insights\n      const enrichedContext = await this.enrichContextWithMemory(query, context, sessionId, userId);\n\n      // Find the first matching business rule\n      const matchingRule = this.businessRules.find(rule => rule.condition(query, enrichedContext));\n      \n      console.log('[PHARMACY-AGENT] Rule matching result:', {\n        matchedRule: matchingRule?.id || 'none',\n        allRuleResults: this.businessRules.map(rule => ({\n          id: rule.id,\n          matches: rule.condition(query, enrichedContext)\n        }))\n      });\n      \n      let response: string;\n      if (matchingRule) {\n        log.debug('Applying business rule with memory context', { ruleId: matchingRule.id });\n        response = await matchingRule.handler(query, enrichedContext);\n      } else {\n        response = await this.handleGeneralInquiry(query, enrichedContext);\n      }\n\n      // Update memory with interaction\n      this.updateMemoryFromInteraction(sessionId, userId, query, response);\n\n      return response;\n\n    } catch (error) {\n      log.error('Pharmacy agent processing failed', error as Error);\n      return 'I encountered an error processing your request. Please try again or contact support if the issue persists.';\n    }\n  }\n\n  private async enrichContextWithMemory(query: string, context: PharmacyContext, sessionId: string, userId: string): Promise<PharmacyContext> {\n    const shortTerm = this.getOrCreateShortTermMemory(sessionId);\n    const mediumTerm = this.getOrCreateMediumTermMemory(userId);\n    \n    // Add conversation history to context\n    const enrichedContext = {\n      ...context,\n      conversationHistory: shortTerm.conversationHistory.slice(-10), // Last 10 exchanges\n      sessionId\n    };\n\n    // Apply learning from user corrections\n    if (context.hasImage && mediumTerm.userPatterns.correctionHistory.length > 0) {\n      const recentCorrections = mediumTerm.userPatterns.correctionHistory.slice(-5);\n      log.debug('Applying learned corrections', { corrections: recentCorrections.length });\n    }\n\n    // Enhance intent detection based on user patterns\n    const queryWords = query.toLowerCase().split(' ');\n    const patternMatches = queryWords.filter(word => \n      mediumTerm.userPatterns.commonQueries.includes(word)\n    );\n\n    if (patternMatches.length > 0) {\n      log.debug('Detected user pattern match', { matches: patternMatches });\n    }\n\n    return enrichedContext;\n  }\n\n  // New method to record user confirmations for learning\n  async recordUserConfirmation(aiClassification: string, userConfirmation: string, documentData: any): Promise<void> {\n    const userId = 'user-1'; // TODO: Get from session\n    const mediumTerm = this.getOrCreateMediumTermMemory(userId);\n    \n    // Record the correction for learning\n    mediumTerm.userPatterns.correctionHistory.push({\n      aiClassification,\n      userCorrection: userConfirmation,\n      timestamp: new Date()\n    });\n\n    // Update document type preferences\n    mediumTerm.userPatterns.preferredDocumentTypes[userConfirmation] = \n      (mediumTerm.userPatterns.preferredDocumentTypes[userConfirmation] || 0) + 1;\n\n    this.saveMediumTermMemory();\n    \n    log.info('User confirmation recorded for learning', {\n      aiClassification,\n      userConfirmation,\n      totalCorrections: mediumTerm.userPatterns.correctionHistory.length\n    });\n  }\n\n  // New method to get learning insights\n  getAgentLearningInsights(): { \n    totalSessions: number; \n    totalUsers: number; \n    knowledgeBase: number; \n    userCorrections: number;\n    topDocumentTypes: Array<{ type: string; count: number }>;\n  } {\n    const allCorrections = Array.from(this.mediumTermMemory.values())\n      .flatMap(memory => memory.userPatterns.correctionHistory);\n      \n    const allDocumentTypes = Array.from(this.mediumTermMemory.values())\n      .flatMap(memory => Object.entries(memory.userPatterns.preferredDocumentTypes))\n      .reduce((acc, [type, count]) => {\n        acc[type] = (acc[type] || 0) + count;\n        return acc;\n      }, {} as Record<string, number>);\n\n    const topDocumentTypes = Object.entries(allDocumentTypes)\n      .map(([type, count]) => ({ type, count }))\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 5);\n\n    return {\n      totalSessions: this.shortTermMemory.size,\n      totalUsers: this.mediumTermMemory.size,\n      knowledgeBase: Object.keys(this.longTermMemory.knowledgeBase.medicineDatabase).length,\n      userCorrections: allCorrections.length,\n      topDocumentTypes\n    };\n  }\n\n  private async handleDocumentAnalysis(query: string, context: PharmacyContext): Promise<string> {\n    try {\n      log.info('Handling document analysis request');\n\n      let analysisData = '';\n      \n      if (context.documentAnalysis) {\n        const analysis = context.documentAnalysis;\n        \n        analysisData = `\nDocument Analysis Results:\n- Type: ${analysis.documentType.toUpperCase()}\n- Confidence: ${(analysis.confidence * 100).toFixed(1)}%\n- Processing Time: ${analysis.metadata.processingTime}ms\n\nExtracted Information:\n`;\n        \n        if (analysis.extractedData.medicines && analysis.extractedData.medicines.length > 0) {\n          analysisData += `\\nMedicines Found (${analysis.extractedData.medicines.length}):\\n`;\n          analysis.extractedData.medicines.forEach((med, index) => {\n            analysisData += `${index + 1}. ${med.name}`;\n            if (med.quantity) analysisData += ` - Qty: ${med.quantity}`;\n            if (med.price) analysisData += ` - Price: ₹${med.price}`;\n            if (med.batch) analysisData += ` - Batch: ${med.batch}`;\n            analysisData += '\\n';\n          });\n        }\n        \n        if (analysis.extractedData.total) {\n          analysisData += `\\nTotal Amount: ₹${analysis.extractedData.total}`;\n        }\n        \n        if (analysis.extractedData.customerInfo?.name) {\n          analysisData += `\\nCustomer: ${analysis.extractedData.customerInfo.name}`;\n        }\n        \n        if (analysis.extractedData.doctorInfo?.name) {\n          analysisData += `\\nDoctor: ${analysis.extractedData.doctorInfo.name}`;\n        }\n      }\n\n      // Get recent documents for context from API\n      let documentContext = '';\n      try {\n        const response = await fetch('/api/documents');\n        const recentDocs = await response.json();\n        documentContext = recentDocs.length > 0 ? \n          `\\n\\nRecent Documents Context:\\n${recentDocs.slice(0, 5).map((doc: any) => \n            `- ${doc.confirmedType || doc.docType}: ${doc.lineItems?.length || 0} medicines, ${doc.fileName}`\n          ).join('\\n')}` : '';\n      } catch (error) {\n        log.error('Failed to fetch recent documents', error as Error);\n      }\n\n      const enhancedQuery = `\n${query}\n\n${analysisData}${documentContext}\n\nAs a pharmacy AI assistant, provide intelligent insights about this document analysis. Focus on:\n1. Document accuracy and completeness\n2. Medicine identification and potential issues\n3. Inventory implications\n4. Compliance considerations\n5. Actionable recommendations\n\nBe specific, professional, and helpful for pharmacy operations.\n`;\n\n      return await remoteAI.ask(enhancedQuery, {\n        currentScreen: context.currentScreen || 'Document Analysis',\n        recentActions: ['Document Analysis']\n      });\n\n    } catch (error) {\n      log.error('Document analysis handling failed', error as Error);\n      return 'I analyzed the document but encountered an issue providing detailed insights. The document has been stored and can be found in your reports section.';\n    }\n  }\n\n  private async handleMedicineInquiry(query: string, context: PharmacyContext): Promise<string> {\n    try {\n      log.info('Handling medicine inquiry');\n\n      // Get documents to find medicine information from stored JSON data\n      const apiResponse = await fetch('/api/documents');\n      const documents = await apiResponse.json();\n      \n      console.log('[PHARMACY-AGENT] Search query:', query.toLowerCase());\n      console.log('[PHARMACY-AGENT] Available medicines:', []);\n      \n      if (documents.length === 0) {\n        return 'No medicine data available. Please upload some invoices, bills, or prescriptions first.';\n      }\n\n      const queryLower = query.toLowerCase();\n      \n      // Extract all unique medicine names from documents\n      const allMedicines = new Set<string>();\n      documents.forEach((doc: any) => {\n        doc.lineItems?.forEach((item: any) => {\n          if (item.name) {\n            allMedicines.add(item.name.trim());\n          }\n        });\n      });\n      \n      console.log('[PHARMACY-AGENT] Available medicines:', Array.from(allMedicines));\n      \n      // Handle MRP/price queries - extract specific pricing information\n      if (queryLower.includes('mrp') || queryLower.includes('price') || queryLower.includes('cost') || queryLower.includes('rate')) {\n        // Find the specific medicine mentioned in the query\n        let targetMedicine = null;\n        for (const medicine of Array.from(allMedicines)) {\n          if (queryLower.includes(medicine.toLowerCase()) || medicine.toLowerCase().includes(queryLower.replace(/\\b(mrp|price|cost|rate|what|is|the|of)\\b/g, '').trim())) {\n            targetMedicine = medicine;\n            break;\n          }\n        }\n        \n        console.log('[PHARMACY-AGENT] Found medicines:', targetMedicine ? [targetMedicine] : []);\n        \n        if (!targetMedicine) {\n          return `💊 **No specific medicine found** in your query.\\n\\n**Available medicines:**\\n${Array.from(allMedicines).map(m => `• ${m}`).join('\\n')}\\n\\nTry asking: \"What is the MRP of [medicine name]?\"`;\n        }\n        \n        // Extract all pricing information for this medicine\n        const priceData: Array<{price: number, type: string, supplier: string, docId: string, qty: number}> = [];\n        \n        documents.forEach((doc: any) => {\n          doc.lineItems?.forEach((item: any) => {\n            if (item.name && item.name.toLowerCase().includes(targetMedicine.toLowerCase())) {\n              const mrp = parseFloat(item.mrp) || 0;\n              const rate = parseFloat(item.rate) || 0;\n              const qty = parseFloat(item.qty) || 0;\n              \n              if (mrp > 0) {\n                priceData.push({\n                  price: mrp,\n                  type: 'MRP',\n                  supplier: doc.header?.supplier || 'Unknown',\n                  docId: doc.id.substring(0, 8),\n                  qty\n                });\n              }\n              if (rate > 0 && rate !== mrp) {\n                priceData.push({\n                  price: rate,\n                  type: 'Rate',\n                  supplier: doc.header?.supplier || 'Unknown',\n                  docId: doc.id.substring(0, 8),\n                  qty\n                });\n              }\n            }\n          });\n        });\n        \n        if (priceData.length === 0) {\n          return `💊 **${targetMedicine}** found in documents but **no pricing information** available.`;\n        }\n        \n        let response = `💰 **Pricing Information for ${targetMedicine}:**\\n\\n`;\n        \n        // Group by price type\n        const mrpPrices = priceData.filter(p => p.type === 'MRP');\n        const ratePrices = priceData.filter(p => p.type === 'Rate');\n        \n        if (mrpPrices.length > 0) {\n          const uniqueMrps = Array.from(new Set(mrpPrices.map(p => p.price)));\n          response += `📋 **MRP Prices Found:**\\n`;\n          uniqueMrps.forEach(price => {\n            const instances = mrpPrices.filter(p => p.price === price);\n            response += `   • ₹${price} (${instances.length} instance${instances.length > 1 ? 's' : ''})\\n`;\n          });\n          response += `\\n`;\n        }\n        \n        if (ratePrices.length > 0) {\n          const uniqueRates = Array.from(new Set(ratePrices.map(p => p.price)));\n          response += `💵 **Purchase Rates Found:**\\n`;\n          uniqueRates.forEach(price => {\n            const instances = ratePrices.filter(p => p.price === price);\n            response += `   • ₹${price} (${instances.length} instance${instances.length > 1 ? 's' : ''})\\n`;\n          });\n        }\n        \n        return response;\n      }\n      \n      // Handle general medicine search\n      if (queryLower.includes('show') || queryLower.includes('list') || queryLower.includes('all medicines')) {\n        return `💊 **All Medicines in Your Data (${allMedicines.size}):**\\n\\n${Array.from(allMedicines).map(m => `• ${m}`).join('\\n')}`;\n      }\n      \n      // Search for specific medicine in query\n      const medicineDetails: Record<string, {\n        name: string;\n        totalQuantity: number;\n        totalPurchased: number;\n        totalSold: number;\n        avgPrice: number;\n        suppliers: Set<string>;\n        batches: Set<string>;\n        lastSeen: string;\n      }> = {};\n\n      // Process all documents to find medicine details\n      documents.forEach((doc: any) => {\n        doc.lineItems?.forEach((item: any) => {\n          if (item.name) {\n            const medicineName = item.name.trim();\n            const qty = parseFloat(item.qty) || 0;\n            const price = parseFloat(item.rate) || parseFloat(item.mrp) || 0;\n            \n            if (!medicineDetails[medicineName]) {\n              medicineDetails[medicineName] = {\n                name: medicineName,\n                totalQuantity: 0,\n                totalPurchased: 0,\n                totalSold: 0,\n                avgPrice: 0,\n                suppliers: new Set(),\n                batches: new Set(),\n                lastSeen: doc.createdAt\n              };\n            }\n\n            const medicine = medicineDetails[medicineName];\n            \n            if (doc.confirmedType === 'invoice') {\n              medicine.totalPurchased += qty;\n              medicine.totalQuantity += qty;\n              if (doc.header?.supplier) medicine.suppliers.add(doc.header.supplier);\n            } else if (doc.confirmedType === 'bill') {\n              medicine.totalSold += qty;\n              medicine.totalQuantity -= qty;\n            }\n\n            if (price > 0) {\n              medicine.avgPrice = (medicine.avgPrice + price) / 2;\n            }\n            \n            if (item.batch) medicine.batches.add(item.batch);\n            \n            if (new Date(doc.createdAt) > new Date(medicine.lastSeen)) {\n              medicine.lastSeen = doc.createdAt;\n            }\n          }\n        });\n      });\n\n      // Find medicines matching the query\n      const matchingMedicines = Object.values(medicineDetails).filter(med => \n        med.name.toLowerCase().includes(queryLower) ||\n        queryLower.includes(med.name.toLowerCase()) ||\n        // Handle partial matches and variations\n        queryLower.replace(/\\s+/g, '').includes(med.name.toLowerCase().replace(/\\s+/g, '')) ||\n        med.name.toLowerCase().replace(/\\s+/g, '').includes(queryLower.replace(/\\s+/g, ''))\n      );\n\n      console.log('[PHARMACY-AGENT] Search query:', queryLower);\n      console.log('[PHARMACY-AGENT] Available medicines:', Object.keys(medicineDetails));\n      console.log('[PHARMACY-AGENT] Found medicines:', matchingMedicines.map(m => m.name));\n\n      let response = '';\n      \n      if (matchingMedicines.length > 0) {\n        response = '📊 **Medicine Information from Stored Documents:**\\n\\n';\n        \n        matchingMedicines.forEach(medicine => {\n          response += `**${medicine.name}**\\n`;\n          response += `• **MRP:** ₹${medicine.avgPrice.toFixed(2)}\\n`;\n          response += `• **Total Quantity:** ${medicine.totalQuantity} units\\n`;\n          if (medicine.totalPurchased > 0) response += `• **Purchased:** ${medicine.totalPurchased} units\\n`;\n          if (medicine.totalSold > 0) response += `• **Sold:** ${medicine.totalSold} units\\n`;\n          if (medicine.suppliers.size > 0) response += `• **Suppliers:** ${Array.from(medicine.suppliers).join(', ')}\\n`;\n          if (medicine.batches.size > 0) response += `• **Batches:** ${Array.from(medicine.batches).join(', ')}\\n`;\n          response += `• **Last Seen:** ${new Date(medicine.lastSeen).toLocaleDateString()}\\n\\n`;\n        });\n        \n        // Add contextual suggestions based on found medicines\n        response += '\\n🔍 Use the Quick actions below to explore more medicine insights.';\n        \n        return response;\n      }\n\n      // If no specific medicine found, suggest available medicines with contextual prompts\n      const allMedicineNames = Object.keys(medicineDetails).slice(0, 10);\n      response = `❌ Medicine \"${queryLower}\" not found in current inventory.\\n\\n`;\n      response += `📦 **Available medicines from your stored invoices:**\\n${allMedicineNames.map(name => `• ${name}`).join('\\n')}`;\n      \n      if (Object.keys(medicineDetails).length > 10) {\n        response += `\\n...and ${Object.keys(medicineDetails).length - 10} more medicines.`;\n      }\n      \n      response += '\\n\\n🔍 Use the Quick actions below to explore your medicine data.';\n\n      return response;\n\n    } catch (error) {\n      log.error('Medicine inquiry handling failed', error as Error);\n      return 'Failed to fetch medicine data. Please try again.';\n    }\n  }\n\n  private async handleInventoryInquiry(query: string, context: PharmacyContext): Promise<string> {\n    try {\n      log.info('Handling inventory inquiry');\n      console.log('[PHARMACY-AGENT] Inventory query received:', query);\n\n      // Get both products/stock data AND documents in parallel\n      const [productsResponse, stockResponse, documentsResponse] = await Promise.all([\n        fetch('/api/products'),\n        fetch('/api/stock'), \n        fetch('/api/documents')\n      ]);\n      \n      const products = await productsResponse.json();\n      const stock = await stockResponse.json();\n      const documents = await documentsResponse.json();\n      \n      console.log('[PHARMACY-AGENT] Data summary:', {\n        products: products.length,\n        stockRecords: stock.length,\n        documents: documents.length\n      });\n      \n      // Handle \"what items do we have\" type queries with actual product data\n      const queryLower = query.toLowerCase();\n      if (queryLower.includes('what items') || queryLower.includes('items do we have') || \n          queryLower.includes('products do we have') || queryLower.includes('what do we have')) {\n        \n        if (products.length === 0 && documents.length === 0) {\n          return '💊 **No items found in your system yet.**\\n\\n' +\n                 '📄 To get started, you can:\\n' +\n                 '• Upload invoices to automatically add medicines\\n' +\n                 '• Add products manually in the inventory section\\n' +\n                 '• Use the barcode scanner to add items quickly\\n\\n' +\n                 '🎯 Once you have items, I can help you track stock levels, check prices, and analyze your inventory!';\n        }\n        \n        let response = '💊 **Your Current Inventory:**\\n\\n';\n        \n        if (products.length > 0) {\n          response += `📎 **Products in System (${products.length}):**\\n`;\n          products.slice(0, 10).forEach((product: any) => {\n            const stockInfo = stock.find((s: any) => s.productId === product.id);\n            const qty = stockInfo ? stockInfo.quantity : 'No stock';\n            response += `• **${product.name}** - ₹${product.price} (Qty: ${qty})\\n`;\n          });\n          \n          if (products.length > 10) {\n            response += `\\n...and ${products.length - 10} more products.\\n`;\n          }\n        }\n        \n        if (documents.length > 0) {\n          const medicinesFromDocs = new Set<string>();\n          documents.forEach((doc: any) => {\n            doc.lineItems?.forEach((item: any) => {\n              if (item.name) medicinesFromDocs.add(item.name);\n            });\n          });\n          \n          if (medicinesFromDocs.size > 0) {\n            response += `\\n📄 **Medicines from Documents (${medicinesFromDocs.size}):**\\n`;\n            Array.from(medicinesFromDocs).slice(0, 10).forEach(medicine => {\n              response += `• ${medicine}\\n`;\n            });\n            \n            if (medicinesFromDocs.size > 10) {\n              response += `\\n...and ${medicinesFromDocs.size - 10} more from uploaded documents.\\n`;\n            }\n          }\n        }\n        \n        response += '\\n🔍 Ask me about specific medicines, stock levels, or use the Quick actions below!';\n        return response;\n      }\n      \n      if (documents.length === 0 && products.length === 0) {\n        return 'No inventory data available. Please upload some invoices or add products first.';\n      }\n\n      // Parse query to find specific medicine names\n      const medicineInventory: Record<string, { purchased: number; sold: number; current: number; suppliers: Set<string>; lastUpdated: string }> = {};\n\n      // Process documents to calculate inventory\n      documents.forEach((doc: any) => {\n        doc.lineItems?.forEach((item: any) => {\n          if (item.name) {\n            const medicineName = item.name.trim();\n            const qty = parseFloat(item.qty) || 0;\n            \n            if (!medicineInventory[medicineName]) {\n              medicineInventory[medicineName] = {\n                purchased: 0,\n                sold: 0,\n                current: 0,\n                suppliers: new Set(),\n                lastUpdated: doc.createdAt\n              };\n            }\n\n            if (doc.confirmedType === 'invoice') {\n              // Purchase from supplier - adds to inventory\n              medicineInventory[medicineName].purchased += qty;\n              medicineInventory[medicineName].current += qty;\n              if (doc.header?.supplier) {\n                medicineInventory[medicineName].suppliers.add(doc.header.supplier);\n              }\n            } else if (doc.confirmedType === 'bill') {\n              // Sale to customer - reduces inventory\n              medicineInventory[medicineName].sold += qty;\n              medicineInventory[medicineName].current -= qty;\n            }\n\n            // Update last updated timestamp\n            if (new Date(doc.createdAt) > new Date(medicineInventory[medicineName].lastUpdated)) {\n              medicineInventory[medicineName].lastUpdated = doc.createdAt;\n            }\n          }\n        });\n      });\n\n      // Check if query is asking about specific medicine\n      let inventoryResponse = '';\n      let foundSpecificMedicine = false;\n\n      Object.keys(medicineInventory).forEach(medicineName => {\n        if (queryLower.includes(medicineName.toLowerCase()) || \n            medicineName.toLowerCase().includes(queryLower.replace(/[^a-z0-9\\s]/g, '').split(' ').find(word => word.length > 3) || '')) {\n          foundSpecificMedicine = true;\n          const inventory = medicineInventory[medicineName];\n          const suppliers = Array.from(inventory.suppliers);\n          \n          inventoryResponse += `**${medicineName}**\\n`;\n          inventoryResponse += `• Current Stock: ${inventory.current} units\\n`;\n          inventoryResponse += `• Total Purchased: ${inventory.purchased} units\\n`;\n          inventoryResponse += `• Total Sold: ${inventory.sold} units\\n`;\n          if (suppliers.length > 0) {\n            inventoryResponse += `• Suppliers: ${suppliers.join(', ')}\\n`;\n          }\n          inventoryResponse += `• Last Updated: ${new Date(inventory.lastUpdated).toLocaleDateString()}\\n\\n`;\n        }\n      });\n\n      // If no specific medicine found, show summary of all inventory\n      if (!foundSpecificMedicine) {\n        inventoryResponse = '**Current Inventory Summary:**\\n\\n';\n        const sortedInventory = Object.entries(medicineInventory)\n          .sort(([,a], [,b]) => b.current - a.current)\n          .slice(0, 10);\n\n        sortedInventory.forEach(([medicineName, inventory]) => {\n          inventoryResponse += `• ${medicineName}: ${inventory.current} units (P:${inventory.purchased}, S:${inventory.sold})\\n`;\n        });\n\n        if (Object.keys(medicineInventory).length > 10) {\n          inventoryResponse += `\\n...and ${Object.keys(medicineInventory).length - 10} more medicines.\\n`;\n        }\n      }\n\n      return inventoryResponse || 'No inventory data found for the requested medicine.';\n\n    } catch (error) {\n      log.error('Inventory inquiry handling failed', error as Error);\n      return 'Failed to fetch inventory data. Please try again.';\n    }\n  }\n\n  private async handleSalesInquiry(query: string, context: PharmacyContext): Promise<string> {\n    try {\n      log.info('Handling sales inquiry');\n\n      // Analyze recent sales documents\n      const recentDocs = await enhancedCapture.getRecentDocuments(30);\n      const salesData = recentDocs.filter(doc => doc.type === 'bill');\n      \n      let totalRevenue = 0;\n      const medicinesSold: Record<string, { count: number; revenue: number }> = {};\n      \n      salesData.forEach(doc => {\n        if (doc.analysis.extractedData.total) {\n          totalRevenue += doc.analysis.extractedData.total;\n        }\n        \n        doc.analysis.extractedData.medicines?.forEach(med => {\n          if (med.name) {\n            if (!medicinesSold[med.name]) {\n              medicinesSold[med.name] = { count: 0, revenue: 0 };\n            }\n            medicinesSold[med.name].count += med.quantity || 1;\n            medicinesSold[med.name].revenue += med.price || 0;\n          }\n        });\n      });\n\n      const salesContext = `\nRecent Sales Data (${salesData.length} transactions):\n- Total Revenue: ₹${totalRevenue.toFixed(2)}\n- Average Transaction: ₹${salesData.length > 0 ? (totalRevenue / salesData.length).toFixed(2) : 0}\n- Top Selling Medicines: ${Object.entries(medicinesSold)\n  .sort(([,a], [,b]) => b.count - a.count)\n  .slice(0, 5)\n  .map(([name, data]) => `${name} (${data.count} units)`)\n  .join(', ')}\n`;\n\n      const enhancedQuery = `\n${query}\n\n${salesContext}\n\nAs a pharmacy business analytics AI, provide insights on:\n1. Sales performance and trends\n2. Revenue optimization opportunities\n3. Customer behavior patterns\n4. Profitable product recommendations\n5. Seasonal trends and forecasting\n6. Business growth strategies for Indian pharmacy market\n\nFocus on actionable business intelligence.\n`;\n\n      return await remoteAI.ask(enhancedQuery, {\n        currentScreen: context.currentScreen || 'Sales Analytics',\n        recentActions: ['Sales Analysis Request']\n      });\n\n    } catch (error) {\n      log.error('Sales inquiry handling failed', error as Error);\n      return 'I can help with sales analytics but encountered a technical issue. Please check your sales reports or try rephrasing your question.';\n    }\n  }\n\n  private async handleDocumentSearch(query: string, context: PharmacyContext): Promise<string> {\n    try {\n      log.info('Handling document search query', { query });\n      \n      // Fetch documents data\n      const documentsResponse = await fetch('/api/documents');\n      const documents = await documentsResponse.json();\n      \n      console.log('[PHARMACY-AGENT] Document search query:', query.toLowerCase());\n      console.log('[PHARMACY-AGENT] Available documents:', documents.length);\n      \n      if (!documents || documents.length === 0) {\n        return '📄 No documents have been uploaded or processed yet. Upload an invoice, prescription, or bill to get started.';\n      }\n      \n      const queryLower = query.toLowerCase();\n      \n      // Handle GSTN/GST queries - extract specific GSTN numbers\n      if (queryLower.includes('gstn') || queryLower.includes('gst')) {\n        const allGstns = new Set<string>();\n        const gstnDetails: Array<{gstn: string, company: string, type: string, docId: string}> = [];\n        \n        documents.forEach((doc: any) => {\n          // Check for supplier GSTN\n          if (doc.header?.supplierGstn) {\n            allGstns.add(doc.header.supplierGstn);\n            gstnDetails.push({\n              gstn: doc.header.supplierGstn,\n              company: doc.header.supplier || 'Unknown Supplier',\n              type: 'Supplier',\n              docId: doc.id\n            });\n          }\n          // Check for buyer GSTN\n          if (doc.header?.buyerGstn) {\n            allGstns.add(doc.header.buyerGstn);\n            gstnDetails.push({\n              gstn: doc.header.buyerGstn,\n              company: doc.header.buyer || 'Unknown Buyer',\n              type: 'Buyer',\n              docId: doc.id\n            });\n          }\n          // Check for allGstns array (comprehensive extraction)\n          if (doc.allGstns && Array.isArray(doc.allGstns)) {\n            doc.allGstns.forEach((gstn: string) => {\n              if (gstn && gstn.length === 15) {\n                allGstns.add(gstn);\n                gstnDetails.push({\n                  gstn,\n                  company: 'Extracted from document',\n                  type: 'Found in doc',\n                  docId: doc.id\n                });\n              }\n            });\n          }\n        });\n        \n        if (allGstns.size === 0) {\n          return '🔍 **No GSTN numbers found** in the loaded documents.\\n\\nThis could mean:\\n• The documents don\\'t contain GSTN information\\n• The OCR didn\\'t extract GSTN numbers clearly\\n• Try uploading clearer images of invoices with visible GSTN numbers';\n        }\n        \n        let response = `🏢 **GSTN Numbers Found (${allGstns.size} unique):**\\n\\n`;\n        \n        // Group by unique GSTN\n        const groupedGstns = gstnDetails.reduce((acc, item) => {\n          if (!acc[item.gstn]) {\n            acc[item.gstn] = { gstn: item.gstn, companies: new Set(), types: new Set(), docs: new Set() };\n          }\n          acc[item.gstn].companies.add(item.company);\n          acc[item.gstn].types.add(item.type);\n          acc[item.gstn].docs.add(item.docId.substring(0, 8));\n          return acc;\n        }, {} as Record<string, any>);\n        \n        Object.values(groupedGstns).forEach((group: any) => {\n          response += `📋 **${group.gstn}**\\n`;\n          response += `   Company: ${Array.from(group.companies).join(', ')}\\n`;\n          response += `   Type: ${Array.from(group.types).join(', ')}\\n`;\n          response += `   Found in: ${Array.from(group.docs).join(', ')}\\n\\n`;\n        });\n        \n        return response;\n      }\n      \n      // Handle supplier queries - extract specific supplier information\n      if (queryLower.includes('supplier') || queryLower.includes('company') || queryLower.includes('vendor')) {\n        const suppliers = new Set<string>();\n        const supplierDetails: Array<{name: string, gstn?: string, invoices: number, totalValue: number}> = [];\n        \n        documents.forEach((doc: any) => {\n          if (doc.header?.supplier) {\n            suppliers.add(doc.header.supplier);\n          }\n        });\n        \n        if (suppliers.size === 0) {\n          return '🏪 **No supplier information found** in the loaded documents.';\n        }\n        \n        let response = `🏪 **Suppliers Found (${suppliers.size}):**\\n\\n`;\n        suppliers.forEach(supplier => {\n          const invoices = documents.filter((doc: any) => doc.header?.supplier === supplier);\n          const totalValue = invoices.reduce((sum: number, doc: any) => {\n            return sum + (parseFloat(doc.totals?.net || '0') || 0);\n          }, 0);\n          \n          const gstn = invoices[0]?.header?.supplierGstn;\n          response += `📋 **${supplier}**\\n`;\n          if (gstn) response += `   GSTN: ${gstn}\\n`;\n          response += `   Invoices: ${invoices.length}\\n`;\n          response += `   Total Value: ₹${totalValue.toLocaleString()}\\n\\n`;\n        });\n        \n        return response;\n      }\n      \n      // Handle stock value queries with comprehensive calculation\n      if (queryLower.includes('stock value') || queryLower.includes('overall') || queryLower.includes('total value') || \n          queryLower.includes('received') || queryLower.includes('worth') || queryLower.includes('inventory value')) {\n        const [productsResponse, stockResponse] = await Promise.all([\n          fetch('/api/products'),\n          fetch('/api/stock')\n        ]);\n        const products = await productsResponse.json();\n        const stock = await stockResponse.json();\n        const invoices = documents.filter((doc: any) => doc.confirmedType === 'invoice');\n        \n        if (invoices.length === 0) {\n          return '📦 No invoices found to calculate stock value. Upload supplier invoices to track your inventory value.';\n        }\n        \n        let totalOriginalValue = 0;\n        let totalCurrentValue = 0;\n        let medicineDetails: Array<{name: string, originalQty: number, currentQty: number, rate: number, originalValue: number, currentValue: number}> = [];\n        \n        // Calculate original value from invoices and current value from stock\n        for (const invoice of invoices) {\n          if (invoice.lineItems) {\n            for (const item of invoice.lineItems) {\n              const originalQty = parseFloat(item.qty || '0');\n              const rate = parseFloat(item.rate || item.mrp || '0');\n              const originalValue = rate * originalQty;\n              totalOriginalValue += originalValue;\n              \n              // Find current stock for this medicine\n              const matchingProduct = products.find((p: any) => \n                p.name.toLowerCase().includes(item.name.toLowerCase()) ||\n                item.name.toLowerCase().includes(p.name.toLowerCase())\n              );\n              \n              let currentQty = 0;\n              if (matchingProduct) {\n                currentQty = stock\n                  .filter((s: any) => s.productId === matchingProduct.id)\n                  .reduce((sum: number, s: any) => sum + s.quantity, 0);\n              }\n              \n              const currentValue = rate * currentQty;\n              totalCurrentValue += currentValue;\n              \n              medicineDetails.push({\n                name: item.name,\n                originalQty,\n                currentQty,\n                rate,\n                originalValue,\n                currentValue\n              });\n            }\n          }\n        }\n        \n        const soldValue = totalOriginalValue - totalCurrentValue;\n        \n        return `💰 **Stock Value Analysis:**\\n\\n` +\n               `📦 **Original Stock Received:** ₹${totalOriginalValue.toFixed(2)}\\n` +\n               `📊 **Current Stock Value:** ₹${totalCurrentValue.toFixed(2)}\\n` +\n               `💸 **Value Sold/Used:** ₹${soldValue.toFixed(2)}\\n\\n` +\n               `📈 **Top Items by Current Value:**\\n${medicineDetails\n                 .sort((a, b) => b.currentValue - a.currentValue)\n                 .slice(0, 5)\n                 .map(item => `• ${item.name}: ₹${item.currentValue.toFixed(2)} (${item.currentQty}/${item.originalQty} units)`)\n                 .join('\\n')}\\n\\n` +\n               `🔍 Use the Quick actions below for more insights.`;\n      }\n      \n      // Handle invoice summary queries\n      if ((queryLower.includes('invoice') || queryLower.includes('show me')) && \n          (queryLower.includes('summary') || queryLower.includes('details'))) {\n        const invoices = documents.filter((doc: any) => doc.confirmedType === 'invoice');\n        \n        if (invoices.length === 0) {\n          return '📋 No invoices found in your documents.';\n        }\n        \n        let totalGross = 0;\n        let totalDiscount = 0;\n        let totalNet = 0;\n        let totalItems = 0;\n        \n        const invoiceDetails = invoices.map((invoice: any) => {\n          const gross = parseFloat(invoice.totals?.gross || '0');\n          const discount = parseFloat(invoice.totals?.discount || '0');\n          const net = parseFloat(invoice.totals?.net || '0');\n          const items = invoice.lineItems?.length || 0;\n          \n          totalGross += gross;\n          totalDiscount += discount;\n          totalNet += net;\n          totalItems += items;\n          \n          return {\n            id: invoice.header?.docNo || invoice.id.slice(-6),\n            supplier: invoice.businessIntelligence?.supplier || 'Unknown',\n            date: new Date(invoice.createdAt).toLocaleDateString(),\n            gross,\n            discount,\n            net,\n            items\n          };\n        });\n        \n        return `📊 **Invoice Summary:**\\n\\n` +\n               `**Totals Across All Invoices:**\\n` +\n               `• Gross Amount: ₹${totalGross.toFixed(2)}\\n` +\n               `• Total Discount: ₹${totalDiscount.toFixed(2)}\\n` +\n               `• Net Amount: ₹${totalNet.toFixed(2)}\\n` +\n               `• Total Items: ${totalItems} medicines\\n\\n` +\n               `**Individual Invoices:**\\n${invoiceDetails.map((inv: any) => \n                 `📋 ${inv.id} - ${inv.supplier}\\n   Date: ${inv.date} | Items: ${inv.items}\\n   Net: ₹${inv.net.toFixed(2)}`\n               ).join('\\n\\n')}\\n\\n` +\n               `🔍 Use the Quick actions below for more insights.`;\n      }\n      console.log('[PHARMACY-AGENT] Document search query:', queryLower);\n      console.log('[PHARMACY-AGENT] Available documents:', documents.length);\n\n      // Filter documents based on query type\n      let filteredDocs = documents;\n      if (queryLower.includes('invoice')) filteredDocs = documents.filter((d: any) => d.confirmedType === 'invoice');\n      if (queryLower.includes('bill')) filteredDocs = documents.filter((d: any) => d.confirmedType === 'bill');\n      if (queryLower.includes('prescription')) filteredDocs = documents.filter((d: any) => d.confirmedType === 'prescription');\n\n      // Handle specific GSTN queries with enhanced matching\n      if (queryLower.includes('gstn') || queryLower.includes('gst')) {\n        const gstnMatch = query.match(/([0-9A-Z]{15})/);\n        if (gstnMatch) {\n          const requestedGstn = gstnMatch[1];\n          console.log('[PHARMACY-AGENT] Looking for GSTN:', requestedGstn);\n          \n          // Enhanced GSTN search - check multiple fields and fuzzy matching\n          filteredDocs = documents.filter((doc: any) => {\n            // Direct matches\n            if (doc.header?.gstn === requestedGstn) return true;\n            if (doc.rawText?.includes(requestedGstn)) return true;\n            if (doc.searchableText?.includes(requestedGstn.toLowerCase())) return true;\n            if (doc.allGstns?.includes(requestedGstn)) return true;\n            \n            // Fuzzy matching for OCR errors\n            const docGstns = [doc.header?.gstn, ...(doc.allGstns || [])].filter(Boolean);\n            return docGstns.some((docGstn: string) => {\n              // Allow up to 2 character differences for OCR errors\n              return this.levenshteinDistance(requestedGstn, docGstn) <= 2;\n            });\n          });\n          \n          console.log('[PHARMACY-AGENT] GSTN search results:', filteredDocs.length);\n          \n          if (filteredDocs.length === 0) {\n            const allGstns = documents.flatMap((d: any) => \n              [d.header?.gstn, ...(d.allGstns || [])].filter(Boolean)\n            );\n            \n            // Check for partial matches\n            const partialMatches = allGstns.filter((gstn: string) => \n              this.levenshteinDistance(requestedGstn, gstn) <= 3\n            );\n            \n            let response = `❌ No documents found for GSTN: ${requestedGstn}\\n\\n`;\n            \n            if (partialMatches.length > 0) {\n              response += `🔍 **Did you mean:**\\n${partialMatches.map((g: string) => `• ${g}`).join('\\n')}\\n\\n`;\n            }\n            \n            response += `📋 **All GSTNs in your data:**\\n${allGstns.map((g: string) => `• ${g}`).join('\\n') || '• None found'}`;\n            \n            return response;\n          }\n        }\n      }\n\n      // Handle customer insights request\n      if (queryLower.includes('customer insight') || (queryLower.includes('pull') && queryLower.includes('insight'))) {\n        return this.generateCustomerInsights(documents);\n      }\n\n      // Generate enhanced document summary with business intelligence\n      let documentResponse = `📄 **Document Summary** (${filteredDocs.length} ${filteredDocs.length === 1 ? 'document' : 'documents'}):\\n\\n`;\n\n      filteredDocs.slice(0, 5).forEach((doc: any) => {\n        const businessIntel = doc.businessIntelligence || {};\n        const entityTypes = businessIntel.entityTypes || {};\n        \n        documentResponse += `**${doc.confirmedType?.toUpperCase() || 'DOCUMENT'} - ${doc.header?.docNo || doc.fileName}**\\n`;\n        documentResponse += `📅 **Date:** ${doc.header?.date || new Date(doc.createdAt).toLocaleDateString()}\\n`;\n        \n        if (doc.header?.supplier) {\n          documentResponse += `🏢 **Supplier:** ${doc.header.supplier}`;\n          if (entityTypes.supplier) documentResponse += ` (${entityTypes.supplier})`;\n          documentResponse += `\\n`;\n        }\n        \n        if (doc.header?.buyer) {\n          documentResponse += `🏪 **Buyer:** ${doc.header.buyer}`;\n          if (entityTypes.buyer) documentResponse += ` (${entityTypes.buyer})`;\n          documentResponse += `\\n`;\n        }\n        \n        if (doc.allGstins?.length > 0) {\n          documentResponse += `📝 **GSTIN(s):** ${doc.allGstins.join(', ')}\\n`;\n        } else if (doc.header?.gstin) {\n          documentResponse += `📝 **GSTIN:** ${doc.header.gstin}\\n`;\n        }\n        \n        // Business relationship\n        if (businessIntel.businessRelationship) {\n          documentResponse += `🔄 **Business Type:** ${businessIntel.businessRelationship.replace(/_/g, ' ')}\\n`;\n        }\n        \n        const totalAmount = doc.totals?.net || doc.totals?.taxable || 'N/A';\n        documentResponse += `💰 **Total:** ₹${totalAmount}`;\n        if (businessIntel.riskProfile) {\n          documentResponse += ` (${businessIntel.riskProfile.replace(/_/g, ' ')})`;\n        }\n        documentResponse += `\\n`;\n        \n        if (doc.lineItems && doc.lineItems.length > 0) {\n          documentResponse += `💊 **Medicines:** ${doc.lineItems.length} items (${doc.lineItems.slice(0, 3).map((item: any) => item.name).join(', ')}${doc.lineItems.length > 3 ? '...' : ''})\\n`;\n        }\n        \n        // Tax breakdown\n        if (doc.totals?.cgst || doc.totals?.sgst) {\n          documentResponse += `💳 **Tax:** CGST ₹${doc.totals.cgst || 0}, SGST ₹${doc.totals.sgst || 0}\\n`;\n        }\n        \n        documentResponse += '\\n';\n      });\n\n      // Add contextual note\n      if (filteredDocs.length > 0) {\n        documentResponse += '\\n\\n🔍 Use the Quick actions below to explore more insights from your documents.';\n      }\n\n      return documentResponse;\n\n    } catch (error) {\n      log.error('Document search handling failed', error as Error);\n      return 'Failed to search documents. Please try again.';\n    }\n  }\n\n  private generateCustomerInsights(documents: any[]): string {\n    let insights = '🔍 **Customer Insights from Your Documents:**\\n\\n';\n    \n    // Calculate totals and aggregations\n    const totalInvoices = documents.filter(d => d.confirmedType === 'invoice').length;\n    const totalBills = documents.filter(d => d.confirmedType === 'bill').length;\n    \n    // Supplier analysis\n    const suppliers = new Set();\n    let totalValue = 0;\n    let totalMedicines = 0;\n    \n    documents.forEach(doc => {\n      if (doc.header?.supplier) suppliers.add(doc.header.supplier);\n      if (doc.totals?.net) totalValue += parseFloat(doc.totals.net) || 0;\n      if (doc.lineItems) totalMedicines += doc.lineItems.length;\n    });\n    \n    insights += `📊 **Transaction Summary:**\\n`;\n    insights += `• Total Documents: ${documents.length}\\n`;\n    insights += `• Invoices: ${totalInvoices} | Bills: ${totalBills}\\n`;\n    insights += `• Total Value: ₹${totalValue.toFixed(2)}\\n`;\n    insights += `• Total Medicine Types: ${totalMedicines}\\n`;\n    insights += `• Active Suppliers: ${suppliers.size}\\n\\n`;\n    \n    insights += `🏢 **Top Suppliers:**\\n`;\n    Array.from(suppliers).slice(0, 3).forEach(supplier => {\n      insights += `• ${supplier}\\n`;\n    });\n    \n    insights += '\\n💡 **Suggested Actions:**\\n';\n    insights += `• \"Which medicines have highest profit margins?\"\\n`;\n    insights += `• \"Show me supplier performance comparison\"\\n`;\n    insights += `• \"Calculate inventory turnover rate\"\\n`;\n    insights += `• \"Find medicines nearing expiry date\"`;\n    \n    return insights;\n  }\n\n  // Levenshtein distance for fuzzy GSTIN matching (OCR errors)\n  private levenshteinDistance(str1: string, str2: string): number {\n    const matrix = [];\n    \n    for (let i = 0; i <= str2.length; i++) {\n      matrix[i] = [i];\n    }\n    \n    for (let j = 0; j <= str1.length; j++) {\n      matrix[0][j] = j;\n    }\n    \n    for (let i = 1; i <= str2.length; i++) {\n      for (let j = 1; j <= str1.length; j++) {\n        if (str2.charAt(i - 1) === str1.charAt(j - 1)) {\n          matrix[i][j] = matrix[i - 1][j - 1];\n        } else {\n          matrix[i][j] = Math.min(\n            matrix[i - 1][j - 1] + 1,\n            matrix[i][j - 1] + 1,\n            matrix[i - 1][j] + 1\n          );\n        }\n      }\n    }\n    \n    return matrix[str2.length][str1.length];\n  }\n\n  private async handleComplianceInquiry(query: string, context: PharmacyContext): Promise<string> {\n    try {\n      log.info('Handling compliance inquiry');\n\n      // Get prescription documents for compliance analysis from API\n      let complianceContext = '';\n      try {\n        const response = await fetch('/api/documents');\n        const allDocs = await response.json();\n        const prescriptions = allDocs.filter((doc: any) => doc.confirmedType === 'prescription');\n        \n        complianceContext = prescriptions.length > 0 ? \n          `\\n\\nRecent Prescriptions: ${prescriptions.length} processed, with medicines like ${\n          prescriptions.slice(0, 3).map((p: any) => \n            p.lineItems?.slice(0, 2).map((item: any) => item.name).join(', ') || 'Unknown'\n          ).join('; ')\n        }` : '';\n      } catch (error) {\n        log.error('Failed to fetch compliance data', error as Error);\n      }\n\n      const enhancedQuery = `\n${query}${complianceContext}\n\nAs a pharmacy compliance AI for Indian pharmaceutical regulations, provide guidance on:\n1. Drug Controller General of India (DCGI) regulations\n2. Prescription validation requirements\n3. Record keeping compliance\n4. Controlled substance management\n5. Patient safety protocols\n6. Regulatory documentation standards\n\nFocus on Indian pharmacy law and best practices.\n`;\n\n      return await remoteAI.ask(enhancedQuery, {\n        currentScreen: context.currentScreen || 'Compliance Check',\n        recentActions: ['Compliance Inquiry']\n      });\n\n    } catch (error) {\n      log.error('Compliance inquiry handling failed', error as Error);\n      return 'I can help with compliance questions but encountered a technical issue. Please consult your regulatory documentation or contact your compliance officer.';\n    }\n  }\n\n  private async handleGeneralInquiry(query: string, context: PharmacyContext): Promise<string> {\n    try {\n      log.info('Handling general inquiry');\n      console.log('[PHARMACY-AGENT] General inquiry for:', query);\n      \n      // First check if we have any data to make response more contextual\n      const [productsResponse, documentsResponse] = await Promise.all([\n        fetch('/api/products').catch(() => ({ json: () => [] })),\n        fetch('/api/documents').catch(() => ({ json: () => [] }))\n      ]);\n      \n      const products = await productsResponse.json();\n      const documents = await documentsResponse.json();\n      \n      console.log('[PHARMACY-AGENT] Context data:', { \n        productsCount: products.length, \n        documentsCount: documents.length \n      });\n\n      // Get overall system stats for context from API\n      let statsContext = '';\n      try {\n        const stats = {\n          totalDocuments: documents.length,\n          invoices: documents.filter((doc: any) => doc.confirmedType === 'invoice').length,\n          bills: documents.filter((doc: any) => doc.confirmedType === 'bill').length,\n          prescriptions: documents.filter((doc: any) => doc.confirmedType === 'prescription').length\n        };\n        \n        statsContext = `\\n\\nSystem Overview: ${stats.totalDocuments} documents (${stats.invoices} invoices, ${stats.bills} bills, ${stats.prescriptions} prescriptions)`;\n      } catch (error) {\n        log.error('Failed to fetch system stats', error as Error);\n      }\n      \n      const systemContext = `\nSystem Status:\n- Pharmacy AI Assistant: Active and ready\n- Document processing: Available\n- Compliance monitoring: Enabled\n- Business insights: Active\n${statsContext}\n`;\n\n      const enhancedQuery = `\n${query}\n\n${systemContext}\n\nAs an AI assistant for AushadiExpress pharmacy management system, provide helpful assistance with:\n1. General pharmacy operations\n2. System features and capabilities\n3. Document processing workflows\n4. Business optimization suggestions\n5. Technical support guidance\n\nBe professional, helpful, and focused on Indian pharmacy business needs.\n`;\n\n      return await remoteAI.ask(enhancedQuery, {\n        currentScreen: context.currentScreen || 'General Inquiry',\n        recentActions: ['General Question']\n      });\n\n    } catch (error) {\n      log.error('General inquiry handling failed', error as Error);\n      return 'I\\'m here to help with your pharmacy management needs. Please try rephrasing your question or ask about specific topics like medicines, inventory, sales, or document processing.';\n    }\n  }\n\n  // Utility methods for business intelligence\n  async generateBusinessInsights(): Promise<string> {\n    try {\n      const recentDocs = await enhancedCapture.getRecentDocuments(50);\n      const report = await enhancedCapture.generateDocumentReport();\n      \n      const insights = `\nBusiness Intelligence Summary:\n- Documents processed: ${report.totalDocuments}\n- Recent activity: ${report.recentCount} in last 7 days\n- Top medicines: ${report.topMedicines.slice(0, 5).join(', ')}\n- Summary: ${report.summary}\n`;\n\n      return insights;\n    } catch (error) {\n      log.error('Business insights generation failed', error as Error);\n      return 'Unable to generate business insights at this time.';\n    }\n  }\n\n  getAgentStatus(): { ready: boolean; rulesCount: number; version: string } {\n    return {\n      ready: true,\n      rulesCount: this.businessRules.length,\n      version: '1.0.0'\n    };\n  }\n}\n\n// Export singleton instance\nexport const pharmacyAgent = new PharmacyAgentService();","size_bytes":63080},"client/src/utils/app-logger.ts":{"content":"// Comprehensive logging system for debugging and monitoring\nexport type LogLevel = 'debug' | 'info' | 'warn' | 'error';\n\ninterface LogEntry {\n  timestamp: Date;\n  level: LogLevel;\n  module: string;\n  message: string;\n  data?: any;\n  error?: Error;\n}\n\nclass AppLogger {\n  private logs: LogEntry[] = [];\n  private maxLogs = 1000; // Keep last 1000 logs\n  private enabledLevel: LogLevel = 'debug';\n\n  log(level: LogLevel, module: string, message: string, data?: any, error?: Error) {\n    const entry: LogEntry = {\n      timestamp: new Date(),\n      level,\n      module,\n      message,\n      data,\n      error\n    };\n\n    this.logs.push(entry);\n    \n    // Keep only recent logs to prevent memory issues\n    if (this.logs.length > this.maxLogs) {\n      this.logs = this.logs.slice(-this.maxLogs);\n    }\n\n    // Console output with color coding\n    const color = this.getColorForLevel(level);\n    const prefix = `[${entry.timestamp.toISOString()}] [${module.toUpperCase()}]`;\n    \n    console.log(`%c${prefix} ${message}`, `color: ${color}`, data || '');\n    if (error) {\n      console.error(`%c${prefix} ERROR:`, `color: red`, error);\n    }\n\n    // Store in localStorage for persistence\n    try {\n      const storedLogs = this.getStoredLogs();\n      storedLogs.push(entry);\n      if (storedLogs.length > this.maxLogs) {\n        storedLogs.splice(0, storedLogs.length - this.maxLogs);\n      }\n      localStorage.setItem('app-logs', JSON.stringify(storedLogs));\n    } catch (e) {\n      console.warn('Failed to store logs:', e);\n    }\n  }\n\n  private getColorForLevel(level: LogLevel): string {\n    switch (level) {\n      case 'debug': return '#6b7280';\n      case 'info': return '#3b82f6';\n      case 'warn': return '#f59e0b';\n      case 'error': return '#ef4444';\n      default: return '#000000';\n    }\n  }\n\n  private getStoredLogs(): LogEntry[] {\n    try {\n      const stored = localStorage.getItem('app-logs');\n      return stored ? JSON.parse(stored) : [];\n    } catch (e) {\n      return [];\n    }\n  }\n\n  debug(module: string, message: string, data?: any) {\n    this.log('debug', module, message, data);\n  }\n\n  info(module: string, message: string, data?: any) {\n    this.log('info', module, message, data);\n  }\n\n  warn(module: string, message: string, data?: any) {\n    this.log('warn', module, message, data);\n  }\n\n  error(module: string, message: string, error?: Error, data?: any) {\n    this.log('error', module, message, data, error);\n  }\n\n  getLogs(level?: LogLevel): LogEntry[] {\n    const allLogs = [...this.logs, ...this.getStoredLogs()];\n    if (!level) return allLogs;\n    return allLogs.filter(log => log.level === level);\n  }\n\n  getRecentLogs(count: number = 50): LogEntry[] {\n    const allLogs = [...this.logs, ...this.getStoredLogs()];\n    return allLogs.slice(-count);\n  }\n\n  clearLogs() {\n    this.logs = [];\n    localStorage.removeItem('app-logs');\n  }\n\n  exportLogs(): string {\n    const allLogs = [...this.logs, ...this.getStoredLogs()];\n    return JSON.stringify(allLogs, null, 2);\n  }\n}\n\n// Export singleton instance\nexport const logger = new AppLogger();\n\n// Module-specific loggers for convenience\nexport const createModuleLogger = (moduleName: string) => ({\n  debug: (message: string, data?: any) => logger.debug(moduleName, message, data),\n  info: (message: string, data?: any) => logger.info(moduleName, message, data),\n  warn: (message: string, data?: any) => logger.warn(moduleName, message, data),\n  error: (message: string, error?: Error, data?: any) => logger.error(moduleName, message, error, data)\n});","size_bytes":3533},"server/ai-routes.ts":{"content":"import { Express } from 'express';\nimport OpenAI from 'openai';\n\nexport function registerAIRoutes(app: Express) {\n  // Initialize OpenAI client\n  const openai = new OpenAI({\n    apiKey: process.env.OPENAI_API_KEY\n  });\n\n  // AI Chat endpoint\n  app.post('/api/ai/chat', async (req, res) => {\n    try {\n      console.log('[AI] Chat request received');\n      \n      const { message, systemPrompt, context } = req.body;\n      \n      if (!message) {\n        return res.status(400).json({ error: 'Message is required' });\n      }\n      \n      if (!process.env.OPENAI_API_KEY) {\n        return res.status(500).json({ error: 'OpenAI API key not configured' });\n      }\n      \n      // Using gpt-4o for better compatibility and vision support\n      const completion = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: systemPrompt || \"You are a helpful AI assistant for a pharmacy management system.\"\n          },\n          {\n            role: \"user\", \n            content: message\n          }\n        ],\n        max_completion_tokens: 500,\n        temperature: 0.7\n      });\n      \n      const response = completion.choices[0]?.message?.content || 'Sorry, I could not process your request.';\n      \n      console.log('[AI] Response generated, length:', response.length);\n      \n      res.json({ response });\n      \n    } catch (error) {\n      console.error('[AI] Chat error:', error);\n      res.status(500).json({ \n        error: 'AI service temporarily unavailable',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n  });\n  \n  // AI Document Analysis endpoint\n  app.post('/api/ai/analyze-document', async (req, res) => {\n    try {\n      console.log('[AI] Document analysis request received');\n      \n      const { text, documentType } = req.body;\n      \n      if (!text) {\n        return res.status(400).json({ error: 'Document text is required' });\n      }\n      \n      if (!process.env.OPENAI_API_KEY) {\n        return res.status(500).json({ error: 'OpenAI API key not configured' });\n      }\n      \n      const systemPrompt = `You are an AI assistant specialized in analyzing ${documentType || 'pharmacy'} documents. \n      \nAnalyze the provided document text and extract key information in a structured format. For invoices, extract vendor, date, items, quantities, and totals. For prescriptions, extract patient info, medications, and dosage instructions. Provide insights and flag any potential issues.\n\nRespond in JSON format with extracted data and analysis.`;\n      \n      // Using gpt-4o for better compatibility and vision support\n      const completion = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: systemPrompt\n          },\n          {\n            role: \"user\", \n            content: `Please analyze this ${documentType || 'document'} text:\\n\\n${text}`\n          }\n        ],\n        max_completion_tokens: 1000,\n        temperature: 0.3,\n        response_format: { type: \"json_object\" }\n      });\n      \n      let analysis;\n      try {\n        analysis = JSON.parse(completion.choices[0]?.message?.content || '{}');\n      } catch (parseError) {\n        analysis = { \n          error: 'Failed to parse AI response',\n          raw_response: completion.choices[0]?.message?.content \n        };\n      }\n      \n      console.log('[AI] Document analysis completed');\n      \n      res.json({ analysis });\n      \n    } catch (error) {\n      console.error('[AI] Document analysis error:', error);\n      res.status(500).json({ \n        error: 'Document analysis service temporarily unavailable',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n  });\n}","size_bytes":3827},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/routes/ai.ts":{"content":"import { Router, Request } from 'express';\nimport multer from 'multer';\nimport OpenAI from 'openai';\n\ninterface MulterRequest extends Request {\n  file?: Express.Multer.File;\n}\n\nconst router = Router();\n\n// Configure multer for image uploads\nconst upload = multer({ \n  storage: multer.memoryStorage(),\n  limits: { fileSize: 10 * 1024 * 1024 } // 10MB limit\n});\n\n// Initialize OpenAI client\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY\n});\n\n// Document analysis endpoint\nrouter.post('/analyze-document', upload.single('image'), async (req: MulterRequest, res) => {\n  try {\n    console.log('[MOBILE-SERVER-DEBUG] Document analysis request received', {\n      hasFile: !!req.file,\n      userAgent: req.headers['user-agent'],\n      contentType: req.headers['content-type'],\n      contentLength: req.headers['content-length'],\n      isMobile: /Mobi|Android/i.test(req.headers['user-agent'] || '')\n    });\n    \n    if (!req.file) {\n      console.error('[MOBILE-SERVER-DEBUG] No image file provided in request');\n      return res.status(400).json({ error: 'No image file provided' });\n    }\n\n    if (!process.env.OPENAI_API_KEY) {\n      console.error('[MOBILE-SERVER-DEBUG] OpenAI API key not configured');\n      return res.status(500).json({ error: 'OpenAI API key not configured' });\n    }\n\n    console.log(`[MOBILE-SERVER-DEBUG] Analyzing document: ${req.file.originalname}, size: ${req.file.size}, mimetype: ${req.file.mimetype}`);\n\n    // Convert buffer to base64\n    const base64Image = req.file.buffer.toString('base64');\n    console.log(`[MOBILE-SERVER-DEBUG] Base64 image length: ${base64Image.length} characters`);\n\n    const startTime = Date.now();\n    \n    console.log(`[OCR-DEBUG] Calling OpenAI with model gpt-4o-mini`);\n    \n    // Use GPT-4o-mini for vision (verified model that exists)\n    const extractionResponse = await openai.chat.completions.create({\n      model: \"gpt-4o-mini\", // Using verified vision model\n      messages: [\n        {\n          role: \"user\",\n          content: [\n            {\n              type: \"text\",\n              text: `You are an expert OCR system for Indian pharmacy documents. Your job is to extract ALL visible text and data from this image.\n\nSTEP 1: DOCUMENT CLASSIFICATION\nClassify this document as one of:\n- \"invoice\" = Supplier invoice (has GSTN, supplier name, medicine list for purchase)\n- \"bill\" = Customer receipt (pharmacy sale to customer)  \n- \"prescription\" = Doctor prescription\n- \"other\" = Other document\n\nSTEP 2: TEXT EXTRACTION\nRead EVERY visible word, number, symbol from the image. Include:\n- All headers, company names, addresses\n- All medicine names (spell exactly as written)\n- All quantities, prices, amounts\n- All dates, invoice numbers, GST numbers\n- All batch numbers, expiry dates if visible\n- All totals and tax calculations\n\nSTEP 3: STRUCTURED DATA - SCAN ENTIRE DOCUMENT FOR ALL GSTNs\nCRITICAL: This document has TWO different companies with TWO different GSTNs:\n1. SUPPLIER GSTN (usually at top) - extract this\n2. BUYER GSTN (in buyer section) - MUST extract this too\n\nLook carefully in the buyer section for GSTN numbers (15-digit alphanumeric code).\n\nReturn this EXACT JSON structure (no markdown, no extra text):\n\n{\n\"docType\": \"invoice\",\n\"rawText\": \"Put ALL visible text here - headers, line items, totals, everything you can read from the image. Include medicine names, quantities, prices, GST details, supplier info, buyer info. Be extremely thorough and include BOTH GSTNs if visible.\",\n\"modelSummary\": \"Brief summary: This is a [type] from [supplier] to [buyer] dated [date] with [X] medicines totaling ₹[amount].\",\n\"header\": { \n  \"supplier\": \"Supplier company name if visible\", \n  \"supplierGstn\": \"Supplier GSTN number if visible\",\n  \"supplierAddress\": \"Supplier full address if visible\",\n  \"buyer\": \"Buyer/pharmacy name if visible\", \n  \"buyerGstn\": \"Buyer GSTN number if visible (LOOK FOR: GSTN field with 15-digit alphanumeric code in buyer section)\",\n  \"buyerAddress\": \"Buyer full address if visible\",\n  \"docNo\": \"Invoice/bill number if visible\", \n  \"date\": \"Date in YYYY-MM-DD format if visible\" \n},\n\"businessEntities\": [\n  {\n    \"type\": \"supplier\",\n    \"name\": \"Supplier company name\",\n    \"gstn\": \"Supplier GSTN\",\n    \"address\": \"Full address\",\n    \"dlNumbers\": [\"License numbers if visible\"]\n  },\n  {\n    \"type\": \"buyer\", \n    \"name\": \"Buyer company name\",\n    \"gstn\": \"Buyer GSTN (CRITICAL: look for GSTN field in buyer section)\",\n    \"address\": \"Buyer address\",\n    \"phone\": \"Phone number if visible\"\n  }\n],\n\"allGstns\": [\"List ALL GSTN numbers found ANYWHERE in the document - supplier, buyer, any other entities\"],\n\"lineItems\": [\n  { \n    \"name\": \"Medicine name exactly as written\", \n    \"qty\": \"10\", \n    \"mrp\": \"250.00\", \n    \"rate\": \"225.00\", \n    \"gstPct\": \"12\", \n    \"amount\": \"2250.00\",\n    \"batch\": \"batch number if visible\",\n    \"expiry\": \"expiry date if visible\"\n  }\n],\n\"totals\": { \n  \"taxable\": \"taxable amount if visible\", \n  \"cgst\": \"CGST amount if visible\", \n  \"sgst\": \"SGST amount if visible\", \n  \"igst\": \"IGST amount if visible\", \n  \"net\": \"final total amount if visible\" \n}\n}\n\nCRITICAL INSTRUCTIONS:\n1. EXTRACT ALL GSTNs: Look for GSTN/GST numbers in supplier section AND buyer section AND anywhere else in the document\n2. BUSINESS ENTITIES: Extract complete information for BOTH supplier and buyer entities separately\n3. Be extremely thorough in text extraction. If you can see medicine names, extract them. If you can see quantities, extract them. If you can see prices, extract them. Do not return empty arrays or empty strings if data is visible in the image.\n4. GSTN PATTERNS: Look for 15-digit alphanumeric codes like \"37BENPM4344B1ZJ\" or \"37BASPN6526P1ZO\"\n5. SCAN ENTIRE DOCUMENT: Don't just focus on headers - scan buyer sections, footer, anywhere GSTNs might appear`\n            },\n            {\n              type: \"image_url\", \n              image_url: { url: `data:image/${req.file.mimetype.split('/')[1]};base64,${base64Image}` }\n            }\n          ]\n        }\n      ],\n      response_format: { type: \"json_object\" },\n      max_completion_tokens: 2000\n    });\n\n    const ocrDurationMs = Date.now() - startTime;\n    \n    console.log(`[OCR-DEBUG] OpenAI response received in ${ocrDurationMs}ms`);\n    console.log(`[OCR-DEBUG] Response choices length: ${extractionResponse.choices?.length || 0}`);\n    \n    if (!extractionResponse.choices || extractionResponse.choices.length === 0) {\n      throw new Error('No response choices from OpenAI');\n    }\n    \n    const rawResponseContent = extractionResponse.choices[0].message.content;\n    console.log(`[OCR-DEBUG] Raw response length: ${rawResponseContent?.length || 0} characters`);\n    console.log(`[OCR-DEBUG] Raw response preview: ${rawResponseContent?.substring(0, 500)}...`);\n\n    if (!rawResponseContent) {\n      throw new Error('Empty response content from OpenAI');\n    }\n\n    let extractedData;\n    try {\n      extractedData = JSON.parse(rawResponseContent);\n      console.log(`[OCR-DEBUG] JSON parsing successful`);\n    } catch (parseError) {\n      console.error(`[OCR-DEBUG] JSON parsing failed:`, parseError);\n      console.error(`[OCR-DEBUG] Raw content that failed:`, rawResponseContent);\n      throw new Error(`Failed to parse OpenAI response as JSON: ${parseError}`);\n    }\n    console.log(`[OCR-DEBUG] Parsed JSON successfully`);\n    console.log(`[OCR-DEBUG] Document type: ${extractedData.docType}`);\n    console.log(`[OCR-DEBUG] Raw text length: ${extractedData.rawText?.length || 0}`);\n    console.log(`[OCR-DEBUG] Line items count: ${extractedData.lineItems?.length || 0}`);\n    console.log(`[OCR-DEBUG] Header data: ${JSON.stringify(extractedData.header)}`);\n    console.log(`[OCR-DEBUG] Business entities: ${JSON.stringify(extractedData.businessEntities)}`);\n    console.log(`[OCR-DEBUG] All GSTNs from OCR: ${JSON.stringify(extractedData.allGstns)}`);\n    console.log(`[OCR-DEBUG] Raw text preview: ${extractedData.rawText?.substring(0, 500)}...`);\n    \n    if (extractedData.lineItems?.length > 0) {\n      console.log(`[OCR-DEBUG] First line item: ${JSON.stringify(extractedData.lineItems[0])}`);\n    }\n    \n    console.log(`[COMPLIANCE] OCR Duration: ${ocrDurationMs}ms, Raw Text Length: ${extractedData.rawText?.length || 0}`);\n\n    const result = {\n      documentType: extractedData.docType || 'other',\n      confidence: 0.85, // High confidence for full-fidelity extraction\n      extractedData: {\n        header: extractedData.header || {},\n        lineItems: extractedData.lineItems || [],\n        totals: extractedData.totals || {},\n        medicines: extractedData.lineItems?.map((item: any) => ({\n          name: item.name,\n          quantity: parseFloat(item.qty) || 0,\n          price: parseFloat(item.rate) || 0,\n          batch: item.batch || '',\n          expiry: item.expiry || ''\n        })) || []\n      },\n      rawText: extractedData.rawText || '',\n      modelSummary: extractedData.modelSummary || '',\n      metadata: {\n        timestamp: new Date(),\n        processingTime: ocrDurationMs,\n        ocrDurationMs: ocrDurationMs,\n        rawTextLength: extractedData.rawText?.length || 0\n      }\n    };\n\n    res.json(result);\n\n  } catch (error) {\n    console.error('[OCR-DEBUG] Document analysis failed:', error);\n    \n    if (error instanceof Error) {\n      console.error('[OCR-DEBUG] Error message:', error.message);\n      console.error('[OCR-DEBUG] Error stack:', error.stack);\n    }\n    \n    res.status(500).json({ \n      error: 'OCR Document analysis failed', \n      details: error instanceof Error ? error.message : 'Unknown error',\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\nexport default router;","size_bytes":9652},"client/src/services/intelligent-pharmacy-agent.ts":{"content":"const log = {\n  info: (message: string, meta?: any) => console.log('[INTELLIGENT-AGENT]', message, meta || ''),\n  error: (message: string, error: Error) => console.error('[INTELLIGENT-AGENT]', message, error.message)\n};\n\nexport interface PharmacyContext {\n  tenantId?: string;\n  role?: 'wholesaler' | 'retailer' | 'distributor';\n  currentScreen?: string;\n  hasImage?: boolean;\n  sessionId?: string;\n  recentActions?: string[];\n}\n\nexport class IntelligentPharmacyAgent {\n  \n  async processQuery(query: string, context: PharmacyContext = {}): Promise<string> {\n    try {\n      const sessionId = context.sessionId || 'default';\n      \n      log.info('Processing pharmacy query with intelligent Gemini agent', { \n        query: query.substring(0, 100), \n        hasImage: context.hasImage,\n        currentScreen: context.currentScreen,\n        sessionId\n      });\n\n      // Use the new Gemini-powered intelligent agent\n      return await this.callIntelligentAgent(query, context);\n      \n    } catch (error) {\n      log.error('Pharmacy query processing failed', error as Error);\n      console.log('[INTELLIGENT-PHARMACY-AGENT] Error occurred:', error);\n      \n      // Fallback to basic response\n      return this.getFallbackResponse(query, context);\n    }\n  }\n  \n  private async callIntelligentAgent(query: string, context: PharmacyContext): Promise<string> {\n    try {\n      // Get tenant ID from context, localStorage, or default\n      const tenantId = context.tenantId || \n                      localStorage.getItem('currentTenantId') || \n                      'pharm_007';\n      \n      const requestBody = {\n        query,\n        tenantId,\n        role: this.detectUserRole(context) || 'retailer',\n        currentScreen: context.currentScreen || 'AI Assistant',\n        hasImage: context.hasImage || false,\n        sessionId: context.sessionId || 'default'\n      };\n      \n      console.log('[INTELLIGENT-PHARMACY-AGENT] Calling Gemini agent with:', requestBody);\n      \n      const response = await fetch('/api/agent/query', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n      });\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Agent API returned ${response.status}: ${errorText}`);\n      }\n      \n      const result = await response.json();\n      console.log('[INTELLIGENT-PHARMACY-AGENT] Received response:', result.response?.substring(0, 200));\n      \n      return result.response || this.getFallbackResponse(query, context);\n      \n    } catch (error: any) {\n      console.error('[INTELLIGENT-PHARMACY-AGENT] API call failed:', error.message);\n      throw error;\n    }\n  }\n  \n  private detectUserRole(context: PharmacyContext): 'wholesaler' | 'retailer' | 'distributor' {\n    // Simple role detection based on context\n    // In a real app, this would be stored in user profile\n    if (context.currentScreen?.includes('wholesale')) return 'wholesaler';\n    if (context.currentScreen?.includes('distribution')) return 'distributor';\n    return 'retailer'; // Default\n  }\n  \n  private getFallbackResponse(query: string, context: PharmacyContext): string {\n    const queryLower = query.toLowerCase();\n    \n    if (queryLower.includes('medicine') || queryLower.includes('drug') || queryLower.includes('item') ||\n        queryLower.includes('what') || queryLower.includes('show') || queryLower.includes('list')) {\n      return `💊 **Intelligent Medicine Analysis**\n\nI can analyze your medicine inventory, track pricing trends, and provide regulatory insights, but I need access to your data first.\n\n📄 **To unlock intelligent insights:**\n• Upload invoices for automatic medicine detection\n• Add products manually with detailed information  \n• Use barcode scanning for quick entry\n\n🎯 Once you have data, I can provide:\n• Smart inventory recommendations\n• Expiry date monitoring\n• Regulatory compliance alerts\n• Business intelligence insights\n\n🔍 Use the Quick actions below to get started!`;\n    }\n    \n    if (queryLower.includes('stock') || queryLower.includes('inventory')) {\n      return `📦 **Intelligent Inventory Management**\n\nI use advanced AI to analyze your inventory patterns, predict demand, and optimize stock levels.\n\n🚀 **Smart Features Available:**\n• Real-time stock level monitoring\n• Demand forecasting and trend analysis\n• Automatic reorder point calculations\n• Expiry date tracking and alerts\n\n📊 **Get Started:**\n• Upload invoices to track goods-in\n• Record sales for demand analysis\n• Add product details for better insights\n\n🔍 Use the Quick actions below!`;\n    }\n    \n    if (queryLower.includes('gstn') || queryLower.includes('gst') || queryLower.includes('tax')) {\n      return `🏢 **Smart GST & Compliance Analysis**\n\nI can extract and analyze GST information from your documents automatically using advanced OCR and AI.\n\n⚡ **Intelligent Features:**\n• Automatic GSTN extraction from invoices\n• GST slab validation and compliance checking\n• Multi-state GST analysis for wholesalers\n• Regulatory compliance monitoring\n\n📄 **Upload documents to enable:**\n• Invoice processing and GSTN extraction\n• Tax compliance verification\n• Business relationship mapping\n\n🔍 Use the Quick actions below to upload documents!`;\n    }\n    \n    if (queryLower.includes('compliance') || queryLower.includes('regulation') || queryLower.includes('schedule')) {\n      return `⚖️ **Regulatory Compliance Intelligence**\n\nI monitor Indian pharmaceutical regulations and WHO guidelines to keep your operations compliant.\n\n🛡️ **Compliance Features:**\n• Schedule-H/H1/X drug classification\n• Prescription requirement validation\n• Batch expiry monitoring (90-day alerts)\n• Indian pharmacy law adherence\n\n📋 **What I Check:**\n• Drug scheduling and prescription requirements\n• GST slab compliance for pharmaceuticals\n• Expiry date management\n• Documentation and audit trails\n\n🔍 Upload your documents to enable compliance monitoring!`;\n    }\n    \n    return `🤖 **AushadiExpress Intelligent Assistant**\n\nI am powered by advanced AI to provide intelligent pharmacy management insights!\n\n🧠 **AI-Powered Capabilities:**\n• **Smart Document Processing** - Auto-extract data from any invoice format\n• **Intelligent Business Analytics** - Demand forecasting and trend analysis  \n• **Regulatory Compliance** - Real-time monitoring per Indian pharmacy law\n• **Adaptive Learning** - I improve with every document you upload\n\n🎯 **Role-Specific Intelligence:**\n• Wholesaler: Bulk pricing, territory analysis, credit management\n• Retailer: Customer patterns, near-expiry alerts, cross-selling\n• Distributor: Route optimization, fill-rate management\n\n🚀 **Get Started:**\nUpload invoices, prescriptions, or bills to unlock intelligent insights!\n\n🔍 Use the Quick actions below for common tasks.`;\n  }\n}","size_bytes":6961},"server/routes/api-key-management.ts":{"content":"import { Router } from 'express';\nimport fs from 'fs/promises';\nimport path from 'path';\n\nconst router = Router();\n\n// Store API key in a local file as fallback (for development only)\nconst API_KEY_FILE = path.join(process.cwd(), '.gemini-key');\n\n// Get current API key status\nrouter.get('/api-key/status', async (req, res) => {\n  try {\n    const envKey = process.env.GEMINI_API_KEY;\n    let fileKey = null;\n    \n    try {\n      fileKey = await fs.readFile(API_KEY_FILE, 'utf8');\n    } catch {\n      // File doesn't exist, that's ok\n    }\n    \n    const hasEnvKey = !!(envKey && envKey.trim() && envKey !== 'undefined');\n    const hasFileKey = !!(fileKey && fileKey.trim());\n    \n    res.json({\n      hasEnvKey,\n      hasFileKey,\n      currentSource: hasEnvKey ? 'environment' : hasFileKey ? 'file' : 'none',\n      keyPreview: hasEnvKey ? `${envKey.substring(0, 8)}...` : hasFileKey ? `${fileKey.substring(0, 8)}...` : null\n    });\n  } catch (error: any) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Update API key\nrouter.post('/api-key/update', async (req, res) => {\n  try {\n    const { apiKey } = req.body;\n    \n    if (!apiKey || !apiKey.trim()) {\n      return res.status(400).json({ error: 'API key is required' });\n    }\n    \n    if (!apiKey.startsWith('AI')) {\n      return res.status(400).json({ error: 'Invalid Gemini API key format. Key should start with \"AI\"' });\n    }\n    \n    // Save to file as backup\n    await fs.writeFile(API_KEY_FILE, apiKey.trim());\n    \n    // Update environment variable for current session\n    process.env.GEMINI_API_KEY = apiKey.trim();\n    \n    res.json({ \n      success: true, \n      message: 'API key updated successfully',\n      keyPreview: `${apiKey.substring(0, 8)}...`\n    });\n  } catch (error: any) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Clear API key\nrouter.delete('/api-key/clear', async (req, res) => {\n  try {\n    // Clear environment variable\n    delete process.env.GEMINI_API_KEY;\n    \n    // Delete file if exists\n    try {\n      await fs.unlink(API_KEY_FILE);\n    } catch {\n      // File might not exist, that's ok\n    }\n    \n    res.json({ \n      success: true, \n      message: 'API key cleared successfully' \n    });\n  } catch (error: any) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\nexport default router;","size_bytes":2330},"server/routes/intelligent-agent.ts":{"content":"import { Router } from 'express';\nimport { PharmacyIntelligenceAgent } from '../services/gemini-agent';\n\nconst router = Router();\nconst agent = new PharmacyIntelligenceAgent();\n\n// Intelligent pharmacy agent endpoint\nrouter.post('/agent/query', async (req, res) => {\n  try {\n    const { \n      query, \n      tenantId = 'default',\n      role = 'retailer',\n      currentScreen = 'unknown',\n      hasImage = false,\n      sessionId = 'default'\n    } = req.body;\n\n    if (!query) {\n      return res.status(400).json({ \n        error: 'Query is required' \n      });\n    }\n\n    const context = {\n      tenantId,\n      role: role as 'wholesaler' | 'retailer' | 'distributor',\n      currentScreen,\n      hasImage,\n      sessionId\n    };\n\n    console.log('[INTELLIGENT-AGENT] Processing query:', { query, context });\n\n    const response = await agent.processPharmacyQuery(query, context);\n\n    res.json({\n      response,\n      context,\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error: any) {\n    console.error('[INTELLIGENT-AGENT] Error:', error.message);\n    res.status(500).json({\n      error: 'Internal server error',\n      message: error.message\n    });\n  }\n});\n\n// Get available tools and capabilities\nrouter.get('/agent/capabilities', (req, res) => {\n  res.json({\n    tools: [\n      'document_query_tool',\n      'template_registry_tool', \n      'goods_in_data_lookup',\n      'goods_out_data_lookup',\n      'demand_forecast_tool',\n      'price_margin_lookup',\n      'batch_expiry_lookup',\n      'regulatory_schedule_lookup'\n    ],\n    roles: ['wholesaler', 'retailer', 'distributor'],\n    features: [\n      'Self-adaptive document processing',\n      'Dynamic template registration',\n      'Real-time compliance monitoring',\n      'Intelligent business insights',\n      'Role-based recommendations',\n      'Indian regulatory compliance'\n    ]\n  });\n});\n\nexport default router;","size_bytes":1890},"server/services/gemini-agent.ts":{"content":"import { GoogleGenAI } from \"@google/genai\";\n\n// Simple logging utility\nconst log = {\n  info: (message: string, meta?: any) => console.log('[GEMINI-AGENT]', message, meta || ''),\n  error: (message: string, error: Error) => console.error('[GEMINI-AGENT]', message, error.message)\n};\n\nexport interface PharmacyContext {\n  tenantId?: string;\n  role?: 'wholesaler' | 'retailer' | 'distributor';\n  currentScreen?: string;\n  hasImage?: boolean;\n  sessionId?: string;\n}\n\ninterface EnterpriseSnapshot {\n  tenantId: string;\n  timestamp: number;\n  summary: string;\n  rawData: {\n    products: any[];\n    stock: any[];\n    sales: any[];\n    documents: any[];\n  };\n}\n\ninterface SessionData {\n  snapshot: EnterpriseSnapshot;\n  chatHistory: Array<{role: string, content: string, timestamp: number}>;\n  expiresAt: number;\n}\n\n// Session cache with 1-hour expiry\nconst sessionCache = new Map<string, SessionData>();\n\nexport interface AgentTool {\n  name: string;\n  description: string;\n  parameters: Record<string, any>;\n  handler: (params: any, context: PharmacyContext) => Promise<any>;\n}\n\nexport class PharmacyIntelligenceAgent {\n  private genai: GoogleGenAI;\n  private tools: Map<string, AgentTool> = new Map();\n  private tenantIdCache = new Map<string, string>();\n  private readonly CACHE_DURATION = 60 * 60 * 1000; // 1 hour\n  private readonly ENTERPRISE_LOAD_MESSAGE = \"🔄 Bringing whole enterprise health data...may take few seconds. Post this, any questions will be answered instantly from your complete business snapshot.\";\n\n  constructor() {\n    // Try to load API key from environment or file\n    const apiKey = this.getApiKey();\n    this.genai = new GoogleGenAI({ apiKey });\n    this.initializeTools();\n  }\n  \n  private getApiKey(): string {\n    // Check environment variable first\n    if (process.env.GEMINI_API_KEY && process.env.GEMINI_API_KEY.trim() && process.env.GEMINI_API_KEY !== 'undefined') {\n      return process.env.GEMINI_API_KEY.trim();\n    }\n    \n    // Try to load from file as fallback\n    try {\n      const fs = require('fs');\n      const path = require('path');\n      const keyFile = path.join(process.cwd(), '.gemini-key');\n      if (fs.existsSync(keyFile)) {\n        const fileKey = fs.readFileSync(keyFile, 'utf8').trim();\n        if (fileKey && fileKey !== 'undefined') {\n          return fileKey;\n        }\n      }\n    } catch (error) {\n      console.log('[GEMINI-AGENT] Could not load API key from file:', error);\n    }\n    \n    return '';\n  }\n\n  private initializeTools() {\n    // Core Business Intelligence Tools\n    this.registerTool({\n      name: \"goods_out_data_lookup\", \n      description: \"Fetch stock decrements from sales and transfers\",\n      parameters: {\n        type: \"object\",\n        properties: {\n          tenant_id: { type: \"string\" }\n        },\n        required: [\"tenant_id\"]\n      },\n      handler: this.handleGoodsOutLookup.bind(this)\n    });\n\n    this.registerTool({\n      name: \"goods_in_data_lookup\",\n      description: \"Fetch current inventory, products and stock levels\",\n      parameters: {\n        type: \"object\", \n        properties: {\n          tenant_id: { type: \"string\" }\n        },\n        required: [\"tenant_id\"]\n      },\n      handler: this.handleGoodsInLookup.bind(this)\n    });\n\n    this.registerTool({\n      name: \"document_analysis\",\n      description: \"Query uploaded documents and bills for insights\",\n      parameters: {\n        type: \"object\",\n        properties: {\n          tenant_id: { type: \"string\" }\n        },\n        required: [\"tenant_id\"]\n      },\n      handler: this.handleDocumentQuery.bind(this)\n    });\n  }\n\n  private registerTool(tool: AgentTool) {\n    this.tools.set(tool.name, tool);\n  }\n\n  async processPharmacyQuery(query: string, context: PharmacyContext): Promise<string> {\n    const startTime = Date.now();\n    const sessionId = context.sessionId || 'default';\n    \n    console.log('[GEMINI-AGENT] Processing intelligent pharmacy query', {\n      query,\n      tenantId: context.tenantId,\n      role: context.role,\n      hasImage: context.hasImage,\n      sessionId\n    });\n\n    // Store tenant ID for session\n    if (context.tenantId) {\n      this.tenantIdCache.set(sessionId, context.tenantId);\n    }\n\n    // Get tenant ID from session if not provided\n    const tenantId = context.tenantId || this.tenantIdCache.get(sessionId);\n    if (!tenantId) {\n      return 'Please provide your tenant ID to continue.';\n    }\n\n    try {\n      // Check if we have a valid cached session\n      const cachedSession = sessionCache.get(sessionId);\n      const now = Date.now();\n      \n      if (!cachedSession || now > cachedSession.expiresAt || cachedSession.snapshot.tenantId !== tenantId) {\n        // Need to load enterprise data - return loading message\n        console.log('[GEMINI-AGENT] Loading enterprise data for tenant:', tenantId);\n        \n        // Load complete enterprise snapshot in background\n        const snapshot = await this.loadEnterpriseSnapshot(tenantId);\n        \n        // Create/update session cache\n        sessionCache.set(sessionId, {\n          snapshot,\n          chatHistory: [],\n          expiresAt: now + this.CACHE_DURATION\n        });\n        \n        console.log('[GEMINI-AGENT] Enterprise snapshot loaded and cached');\n      }\n      \n      // Get cached session (now guaranteed to exist and be valid)\n      const session = sessionCache.get(sessionId)!;\n      \n      // Add current query to chat history\n      session.chatHistory.push({\n        role: 'user',\n        content: query,\n        timestamp: now\n      });\n      \n      // Use Gemini AI with complete enterprise context\n      const response = await this.queryGeminiWithEnterpriseContext(query, session.snapshot, session.chatHistory);\n      \n      // Add response to chat history\n      session.chatHistory.push({\n        role: 'assistant', \n        content: response,\n        timestamp: Date.now()\n      });\n      \n      return response;\n      \n    } catch (error) {\n      console.error('[GEMINI-AGENT] Error processing query:', error);\n      \n      // Try basic fallback without AI\n      const fallbackResponse = await this.getBasicFallbackResponse(query, { tenantId } as PharmacyContext);\n      if (fallbackResponse) {\n        return fallbackResponse;\n      }\n      \n      return 'I apologize, but I\\'m having trouble processing your request right now. Please try again or contact support if the issue persists.';\n    }\n  }\n\n  private async loadEnterpriseSnapshot(tenantId: string): Promise<EnterpriseSnapshot> {\n    console.log('[GEMINI-AGENT] Loading complete enterprise data...');\n    \n    // Load all enterprise data from database\n    const [inventoryData, stockData, salesData, documentsData] = await Promise.all([\n      this.handleGoodsInLookup({ tenant_id: tenantId }, { tenantId } as PharmacyContext),\n      fetch('http://localhost:5000/api/stock').then(r => r.json()).catch(() => []),\n      this.handleGoodsOutLookup({ tenant_id: tenantId }, { tenantId } as PharmacyContext),\n      this.handleDocumentQuery({ tenant_id: tenantId }, { tenantId } as PharmacyContext)\n    ]);\n    \n    // Create comprehensive summary using Gemini AI\n    const summaryPrompt = `You are an intelligent pharmacy business analyst. Analyze this complete enterprise data and create a comprehensive business intelligence summary.\n\nCOMPLETE INVENTORY DATA:\n${JSON.stringify(inventoryData, null, 2)}\n\nRAW STOCK DATA: \n${JSON.stringify(stockData, null, 2)}\n\nSALES PERFORMANCE DATA:\n${JSON.stringify(salesData, null, 2)}\n\nDOCUMENTS & SUPPLIER DATA:\n${JSON.stringify(documentsData, null, 2)}\n\nCreate a detailed enterprise intelligence report covering:\n\n1. **PRODUCT CATALOG**: Every single product with exact names, quantities, prices, and batch details\n2. **INVENTORY HEALTH**: Stock levels, expiry tracking, reorder points\n3. **FINANCIAL OVERVIEW**: Total inventory value, revenue, profit margins\n4. **SALES ANALYTICS**: Top performers, slow movers, trends\n5. **SUPPLIER ECOSYSTEM**: Key suppliers, buyer relationships, document insights\n6. **OPERATIONAL INSIGHTS**: Critical actions needed, opportunities, risks\n\nBe extremely specific with product names, quantities, and financial data. Include ALL products in your analysis. This summary will be used to answer detailed questions about any aspect of this pharmacy business.\n\nFormat the response as a comprehensive business intelligence report that can answer any question about inventory, sales, finances, or operations.`;\n    \n    try {\n      const geminiResponse = await this.genai.models.generateContent({\n        model: \"gemini-2.5-flash\",\n        contents: summaryPrompt,\n      });\n      \n      const summary = geminiResponse.text || 'Enterprise data loaded successfully';\n      \n      console.log('[GEMINI-AGENT] AI-powered enterprise summary created');\n      \n      return {\n        tenantId,\n        timestamp: Date.now(),\n        summary,\n        rawData: {\n          products: inventoryData.inventory || [],\n          stock: stockData,\n          sales: salesData.top_movers || [],\n          documents: documentsData.documents || []\n        }\n      };\n    } catch (error) {\n      console.error('[GEMINI-AGENT] Error creating enterprise summary:', error);\n      \n      // Fallback to structured summary without AI\n      const summary = `ENTERPRISE DATA SUMMARY for ${tenantId}:\\n\\n` +\n        `📦 INVENTORY: ${inventoryData.total_products} products worth ₹${inventoryData.total_stock_value?.toFixed(2) || '0'}\\n` +\n        `🔥 TOP PRODUCTS: ${inventoryData.inventory?.slice(0,5).map((p: any) => `${p.name} (${p.total_stock} units @ ₹${p.price})`).join(', ')}\\n\\n` +\n        `💰 SALES: ${salesData.total_sales} transactions totaling ₹${salesData.total_value?.toFixed(2) || '0'}\\n` +\n        `📋 DOCUMENTS: ${documentsData.total_documents} uploaded\\n` +\n        `🤝 SUPPLIERS: ${documentsData.suppliers?.join(', ') || 'None'}`;\n      \n      return {\n        tenantId,\n        timestamp: Date.now(),\n        summary,\n        rawData: {\n          products: inventoryData.inventory || [],\n          stock: stockData,\n          sales: salesData.top_movers || [],\n          documents: documentsData.documents || []\n        }\n      };\n    }\n  }\n  \n  private async queryGeminiWithEnterpriseContext(query: string, snapshot: EnterpriseSnapshot, chatHistory: Array<{role: string, content: string, timestamp: number}>): Promise<string> {\n    const recentHistory = chatHistory.slice(-10); // Last 10 messages for context\n    \n    const prompt = `You are an intelligent pharmacy assistant with access to complete enterprise data. Answer the user's question using ONLY the provided business data.\n\nCOMPLETE ENTERPRISE INTELLIGENCE SUMMARY:\n${snapshot.summary}\n\nDETAILED RAW DATA ACCESS:\nPRODUCTS: ${JSON.stringify(snapshot.rawData.products, null, 2)}\nSTOCK: ${JSON.stringify(snapshot.rawData.stock, null, 2)}\nSALES: ${JSON.stringify(snapshot.rawData.sales, null, 2)}\nDOCUMENTS: ${JSON.stringify(snapshot.rawData.documents, null, 2)}\n\nCONVERSATION HISTORY:\n${recentHistory.map(msg => `${msg.role.toUpperCase()}: ${msg.content}`).join('\\n')}\n\nCURRENT QUESTION: ${query}\n\nCRITICAL INSTRUCTIONS:\n- Answer ONLY from the provided enterprise data above\n- Be extremely specific with product names, quantities, prices, and batch information\n- If asking about specific products, search through ALL products in the data carefully\n- For inventory questions, provide exact stock levels and batch details\n- Include relevant financial data (prices, values, totals) with ₹ symbol\n- End with 3 relevant quick actions in format: Quick Actions: Question1|Question2|Question3\n- Quick actions should be meaningful questions that would provide useful business insights\n- Keep responses concise but comprehensive\n- If a specific product isn't found, clearly state that and suggest alternatives\n\nQUICK ACTION EXAMPLES:\n- \"How many units of [product name] do we have in stock\"\n- \"Show me all products expiring in next 30 days\"\n- \"What is our total inventory value\"\n- \"Which products are running low on stock\"\n- \"Show me this month's sales performance\"\n\nAnswer the question now:`;\n    \n    try {\n      const response = await this.genai.models.generateContent({\n        model: \"gemini-2.5-flash\", \n        contents: prompt,\n      });\n      \n      return response.text || 'I couldn\\'t process that request. Please try again.';\n    } catch (error) {\n      console.error('[GEMINI-AGENT] Gemini API error:', error);\n      \n      // Use basic fallback without AI\n      return await this.getBasicFallbackResponse(query, { tenantId: snapshot.tenantId } as PharmacyContext) || \n        'I\\'m having trouble accessing the AI service. Please try again.';\n    }\n  }\n  \n  private async getBasicFallbackResponse(query: string, context: PharmacyContext): Promise<string | null> {\n    try {\n      const queryLower = query.toLowerCase();\n      \n      // Simple pattern-based responses as last resort\n      if (queryLower.includes('inventory') || queryLower.includes('stock')) {\n        const result = await this.handleGoodsInLookup({ tenant_id: context.tenantId }, context);\n        return `Current inventory: ${result.total_products} products worth ₹${result.total_stock_value?.toFixed(2) || '0'}\\n\\nQuick Actions: How many products do we have|Show me products with low stock|What is our most expensive product`;\n      }\n      \n      if (queryLower.includes('sales')) {\n        const result = await this.handleGoodsOutLookup({ tenant_id: context.tenantId }, context);\n        return `Sales summary: ${result.total_sales} transactions (₹${result.total_value?.toFixed(2) || '0'})\\n\\nQuick Actions: Show me today's sales total|What are our top selling products|How much revenue did we make this week`;\n      }\n      \n      return null;\n    } catch (error) {\n      console.error('[GEMINI-AGENT] Error in basic fallback:', error);\n      return null;\n    }\n  }\n\n  // Helper methods for fetching data\n  private async fetchProductsData(): Promise<any[]> {\n    try {\n      const response = await fetch('http://localhost:5000/api/products');\n      return await response.json();\n    } catch (error) {\n      console.error('[GEMINI-AGENT] Error fetching products:', error);\n      return [];\n    }\n  }\n\n  private async fetchStockData(): Promise<any[]> {\n    try {\n      const response = await fetch('http://localhost:5000/api/stock');\n      return await response.json();\n    } catch (error) {\n      console.error('[GEMINI-AGENT] Error fetching stock data:', error);\n      return [];\n    }\n  }\n\n  private async fetchSalesData(): Promise<any[]> {\n    try {\n      const response = await fetch('http://localhost:5000/api/sales');\n      return await response.json();\n    } catch (error) {\n      console.error('[GEMINI-AGENT] Error fetching sales data:', error);\n      return [];\n    }\n  }\n\n  private async fetchDocumentsData(): Promise<any[]> {\n    try {\n      const response = await fetch('http://localhost:5000/api/documents');\n      return await response.json();\n    } catch (error) {\n      console.error('[GEMINI-AGENT] Error fetching documents:', error);\n      return [];\n    }\n  }\n\n  // Cache invalidation method for when new sales/documents are added\n  invalidateCache(tenantId: string): void {\n    const sessionsToDelete: string[] = [];\n    sessionCache.forEach((session, sessionId) => {\n      if (session.snapshot.tenantId === tenantId) {\n        sessionsToDelete.push(sessionId);\n      }\n    });\n    \n    sessionsToDelete.forEach(sessionId => {\n      sessionCache.delete(sessionId);\n      console.log(`[GEMINI-AGENT] Cache invalidated for tenant ${tenantId}, session ${sessionId}`);\n    });\n  }\n\n  // Expose cache invalidation method\n  static invalidateTenantCache(tenantId: string): void {\n    const sessionsToDelete: string[] = [];\n    sessionCache.forEach((session, sessionId) => {\n      if (session.snapshot.tenantId === tenantId) {\n        sessionsToDelete.push(sessionId);\n      }\n    });\n    \n    sessionsToDelete.forEach(sessionId => {\n      sessionCache.delete(sessionId);\n      console.log(`[GEMINI-AGENT] Global cache invalidated for tenant ${tenantId}`);\n    });\n  }\n\n  // Core tool implementations\n  private async handleGoodsInLookup(params: any, context: PharmacyContext): Promise<any> {\n    try {\n      // Fetch products and stock data\n      const [products, stock] = await Promise.all([\n        this.fetchProductsData(),\n        this.fetchStockData()\n      ]);\n\n      // Create inventory map with totals\n      const inventoryMap = new Map();\n      \n      for (const stockItem of stock) {\n        const product = products.find((p: any) => p.id === stockItem.productId);\n        if (!product) continue;\n\n        const key = product.id;\n        if (!inventoryMap.has(key)) {\n          inventoryMap.set(key, {\n            id: product.id,\n            name: product.name,\n            description: product.description,\n            price: product.price,\n            total_stock: 0,\n            batches: 0,\n            stock_details: []\n          });\n        }\n\n        const item = inventoryMap.get(key);\n        item.total_stock += stockItem.quantity;\n        item.batches += 1;\n        item.stock_details.push({\n          batch: stockItem.batchNumber,\n          quantity: stockItem.quantity,\n          expiry: stockItem.expiryDate\n        });\n      }\n\n      const inventory = Array.from(inventoryMap.values());\n      const totalValue = inventory.reduce((sum, item) => sum + (item.total_stock * item.price), 0);\n\n      return {\n        inventory,\n        total_products: inventory.length,\n        total_stock_value: totalValue,\n        timestamp: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('[GEMINI-AGENT] Error in goods lookup:', error);\n      return { inventory: [], total_products: 0, total_stock_value: 0 };\n    }\n  }\n\n  private async handleGoodsOutLookup(params: any, context: PharmacyContext): Promise<any> {\n    try {\n      const sales = await this.fetchSalesData();\n\n      const totalSales = sales.length;\n      const totalValue = sales.reduce((sum: number, sale: any) => sum + (sale.total || 0), 0);\n\n      // Create top movers analysis\n      const productSales = new Map();\n      for (const sale of sales) {\n        if (sale.items) {\n          for (const item of sale.items) {\n            const key = item.productId;\n            if (!productSales.has(key)) {\n              productSales.set(key, {\n                product_id: item.productId,\n                product_name: item.productName || 'Unknown',\n                quantity_sold: 0,\n                revenue: 0\n              });\n            }\n            const productData = productSales.get(key);\n            productData.quantity_sold += item.quantity;\n            productData.revenue += item.quantity * item.price;\n          }\n        }\n      }\n\n      const topMovers = Array.from(productSales.values())\n        .sort((a, b) => b.quantity_sold - a.quantity_sold);\n\n      return {\n        total_sales: totalSales,\n        total_value: totalValue,\n        top_movers: topMovers,\n        timestamp: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('[GEMINI-AGENT] Error in sales lookup:', error);\n      return { total_sales: 0, total_value: 0, top_movers: [] };\n    }\n  }\n\n  private async handleDocumentQuery(params: any, context: PharmacyContext): Promise<any> {\n    try {\n      const documents = await this.fetchDocumentsData();\n\n      const suppliers = new Set();\n      const buyers = new Set();\n\n      for (const doc of documents) {\n        if (doc.extractedData) {\n          if (doc.extractedData.supplier) suppliers.add(doc.extractedData.supplier);\n          if (doc.extractedData.buyer) buyers.add(doc.extractedData.buyer);\n          if (doc.extractedData.from) suppliers.add(doc.extractedData.from);\n          if (doc.extractedData.to) buyers.add(doc.extractedData.to);\n        }\n      }\n\n      return {\n        documents,\n        total_documents: documents.length,\n        suppliers: Array.from(suppliers),\n        buyers: Array.from(buyers),\n        timestamp: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('[GEMINI-AGENT] Error in document query:', error);\n      return { documents: [], total_documents: 0, suppliers: [], buyers: [] };\n    }\n  }\n}\n\n// Export a singleton instance\nexport const geminiAgent = new PharmacyIntelligenceAgent();","size_bytes":20274}},"version":1}